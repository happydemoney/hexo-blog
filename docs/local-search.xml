<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【解决方案】前端换肤方案</title>
    <link href="/hexo-blog/2022/09/22/website-skin-project/"/>
    <url>/hexo-blog/2022/09/22/website-skin-project/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>方法</th><th>特点</th><th>兼容性</th><th>推荐度</th></tr></thead><tbody><tr><td>利用class 命名空间</td><td>最简单的换肤方案</td><td></td><td></td></tr><tr><td>准备多套CSS主题</td><td>最常用</td><td></td><td>推荐</td></tr><tr><td>动态换肤</td><td>支持浏览器热换肤，最酷炫</td><td></td><td></td></tr><tr><td>less在线编译实现</td><td></td><td></td><td>不推荐</td></tr><tr><td>CSS变量换肤</td><td>不考虑IE，最佳换肤方式</td><td>使用css-vars-ponyfill解决兼容性问题</td><td>推荐</td></tr></tbody></table><h2 id="利用class-命名空间"><a href="#利用class-命名空间" class="headerlink" title="利用class 命名空间"></a>利用class 命名空间</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.red-theme</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: red</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.blue-theme</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: blue</span><br><span class="language-css">｝</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red-theme&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> 这里是红色主题 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="准备多套CSS主题"><a href="#准备多套CSS主题" class="headerlink" title="准备多套CSS主题"></a>准备多套CSS主题</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*theme-default.css*/</span><br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* theme-red.css */</span><br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: #red<br>&#125;<br></code></pre></td></tr></table></figure><p>页面加载后，根据用户需求加载不同的样式列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;themeLink&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/multipleTheme/light.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>light主题显示蓝字，dark主题显示红字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeTheme()&quot;</span>&gt;</span>切换主题<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> currentTheme = <span class="hljs-string">&#x27;light&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getTheme</span> () &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (currentTheme === <span class="hljs-string">&#x27;light&#x27;</span>) &#123;</span><br><span class="language-javascript">        currentTheme = <span class="hljs-string">&#x27;dark&#x27;</span>;</span><br><span class="language-javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">        currentTheme = <span class="hljs-string">&#x27;light&#x27;</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> currentTheme;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeTheme</span> () &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeMap</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;light&#x27;</span>: <span class="hljs-string">&#x27;./css/multipleTheme/light.css&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;dark&#x27;</span>: <span class="hljs-string">&#x27;./css/multipleTheme/dark.css&#x27;</span></span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> themeLink = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#themeLink&#x27;</span>);</span><br><span class="language-javascript">      themeLink.<span class="hljs-property">href</span> = <span class="hljs-title class_">ThemeMap</span>[<span class="hljs-title function_">getTheme</span>()];</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>有时候需要保存用户使用的主题，可以通过如下方式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">利用路由标记<br>利用cookie标记<br>利用localstorage<br>保存到后端服务器<br></code></pre></td></tr></table></figure><p>优化点：<br>利用CSS预处理生成多套主题样式</p><h2 id="动态换肤"><a href="#动态换肤" class="headerlink" title="动态换肤"></a>动态换肤</h2><p>这是element ui中的换肤方案，支持浏览器热换肤。生成一套主题， 将主题配色配置写在js中，在浏览器中用js动态修改style标签覆盖原有的CSS。</p><ol><li>先把默认主题文件中涉及到颜色的 CSS 值替换成关键词</li><li>根据用户选择的主题色生成一系列对应的颜色值</li><li>把关键词再换回刚刚生成的相应的颜色值</li><li>直接在页面上加 style 标签，把生成的样式填进去</li></ol><h3 id="先把默认主题文件中涉及到颜色的-CSS-值替换成关键词"><a href="#先把默认主题文件中涉及到颜色的-CSS-值替换成关键词" class="headerlink" title="先把默认主题文件中涉及到颜色的 CSS 值替换成关键词"></a>先把默认主题文件中涉及到颜色的 CSS 值替换成关键词</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L250-L274</span><br><span class="hljs-title function_">getStyleTemplate</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-keyword">const</span> colorMap = &#123;<br>    <span class="hljs-string">&#x27;#20a0ff&#x27;</span>: <span class="hljs-string">&#x27;primary&#x27;</span>,<br>    <span class="hljs-string">&#x27;#0190fe&#x27;</span>: <span class="hljs-string">&#x27;secondary&#x27;</span>,<br>    <span class="hljs-string">&#x27;#fbfdff&#x27;</span>: <span class="hljs-string">&#x27;darkWhite&#x27;</span>,<br>    <span class="hljs-string">&#x27;#1f2d3d&#x27;</span>: <span class="hljs-string">&#x27;baseBlack&#x27;</span>,<br>    <span class="hljs-string">&#x27;#324157&#x27;</span>: <span class="hljs-string">&#x27;lightBlack&#x27;</span>,<br>    <span class="hljs-string">&#x27;#48576a&#x27;</span>: <span class="hljs-string">&#x27;extraLightBlack&#x27;</span>,<br>    <span class="hljs-string">&#x27;#8391a5&#x27;</span>: <span class="hljs-string">&#x27;baseSilver&#x27;</span>,<br>    <span class="hljs-string">&#x27;#97a8be&#x27;</span>: <span class="hljs-string">&#x27;lightSilver&#x27;</span>,<br>    <span class="hljs-string">&#x27;#bfcbd9&#x27;</span>: <span class="hljs-string">&#x27;extraLightSilver&#x27;</span>,<br>    <span class="hljs-string">&#x27;#d1dbe5&#x27;</span>: <span class="hljs-string">&#x27;baseGray&#x27;</span>,<br>    <span class="hljs-string">&#x27;#e4e8f1&#x27;</span>: <span class="hljs-string">&#x27;lightGray&#x27;</span>,<br>    <span class="hljs-string">&#x27;#eef1f6&#x27;</span>: <span class="hljs-string">&#x27;extraLightGray&#x27;</span>,<br>    <span class="hljs-string">&#x27;#1d90e6&#x27;</span>: <span class="hljs-string">&#x27;buttonActive&#x27;</span>,<br>    <span class="hljs-string">&#x27;#4db3ff&#x27;</span>: <span class="hljs-string">&#x27;buttonHover&#x27;</span>,<br>    <span class="hljs-string">&#x27;#dfe6ec&#x27;</span>: <span class="hljs-string">&#x27;tableBorder&#x27;</span>,<br>    <span class="hljs-string">&#x27;#d2ecff&#x27;</span>: <span class="hljs-string">&#x27;datepickerInRange&#x27;</span>,<br>    <span class="hljs-string">&#x27;#afddff&#x27;</span>: <span class="hljs-string">&#x27;datepickerInRangeHover&#x27;</span>,<br>    <span class="hljs-string">&#x27;#1c8de0&#x27;</span>: <span class="hljs-string">&#x27;selectOptionSelected&#x27;</span>,<br>    <span class="hljs-string">&#x27;#edf7ff&#x27;</span>: <span class="hljs-string">&#x27;lightBackground&#x27;</span><br>  &#125;;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(colorMap).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> value = colorMap[key];<br>    data = data.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(key, <span class="hljs-string">&#x27;ig&#x27;</span>), value);<br>  &#125;);<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="根据用户选择的主题色生成一系列对应的颜色值"><a href="#根据用户选择的主题色生成一系列对应的颜色值" class="headerlink" title="根据用户选择的主题色生成一系列对应的颜色值"></a>根据用户选择的主题色生成一系列对应的颜色值</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// https://github.com/ElementUI/theme-preview/blob/master/src/utils/formula.json</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;secondary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary s(99%) l(*0.9))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;darkWhite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(#fff blend(primary 2%))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;baseBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary h(+6) s(33%) l(18%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack h(+5) s(27%) l(27%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;extraLightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack h(+2) s(19%) l(35%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;baseSilver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack h(+3) s(16%) l(58%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lightSilver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack h(+3) s(23%) l(67%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;extraLightSilver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack s(26%) l(80%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;baseGray&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack s(28%) l(86%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lightGray&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack h(+10) s(33%) l(92%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;extraLightGray&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack h(+6) s(33%) l(95%))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;buttonActive&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary shade(10%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;buttonHover&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(20%))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;tableBorder&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(extraLightSilver h(-3) s(27%) l(90%))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;datepickerInRange&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(80%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;datepickerInRangeHover&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(64%))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;selectOptionSelected&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary shade(12%))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;lightBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(92%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;emptyText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary s(16%) l(44%))&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="把关键词再换回刚刚生成的相应的颜色值"><a href="#把关键词再换回刚刚生成的相应的颜色值" class="headerlink" title="把关键词再换回刚刚生成的相应的颜色值"></a>把关键词再换回刚刚生成的相应的颜色值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://github.com/ElementUI/theme-preview/blob/master/src/utils/color.js</span><br><span class="hljs-keyword">import</span> color <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;css-color-function&#x27;</span>;<br><span class="hljs-keyword">import</span> formula <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./formula.json&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">generateColors</span> = primary =&gt; &#123;<br>  <span class="hljs-keyword">let</span> colors = &#123;&#125;;<br>  <span class="hljs-keyword">let</span> baseBlack = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">let</span> extraLightBlack = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">let</span> extraLightSilver = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(formula).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> value = formula[key]<br>      .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/primary/g</span>, primary)<br>      .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/baseBlack/g</span>, baseBlack)<br>      .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/extraLightBlack/g</span>, extraLightBlack)<br>      .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/extraLightSilver/g</span>, extraLightSilver);<br>    colors[key] = color.<span class="hljs-title function_">convert</span>(value);<br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;baseBlack&#x27;</span>) &#123;<br>      baseBlack = colors[key];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;extraLightBlack&#x27;</span>) &#123;<br>      extraLightBlack = colors[key];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;extraLightSilver&#x27;</span>) &#123;<br>      extraLightSilver = colors[key];<br>    &#125;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> colors;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> generateColors;<br></code></pre></td></tr></table></figure><h3 id="直接在页面上加-style-标签，把生成的样式填进去"><a href="#直接在页面上加-style-标签，把生成的样式填进去" class="headerlink" title="直接在页面上加 style 标签，把生成的样式填进去"></a>直接在页面上加 style 标签，把生成的样式填进去</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L198-L211</span><br><span class="hljs-title function_">writeNewStyle</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> cssText = <span class="hljs-variable language_">this</span>.<span class="hljs-property">originalStyle</span>;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    cssText = cssText.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;(:|\\s+)&#x27;</span> + key, <span class="hljs-string">&#x27;g&#x27;</span>), <span class="hljs-string">&#x27;$1&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>[key]);<br>  &#125;);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">originalStylesheetCount</span> === <span class="hljs-variable language_">document</span>.<span class="hljs-property">styleSheets</span>.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">const</span> style = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;style&#x27;</span>);<br>    style.<span class="hljs-property">innerText</span> = cssText;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(style);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-property">lastChild</span>.<span class="hljs-property">innerText</span> = cssText;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="less在线编译实现"><a href="#less在线编译实现" class="headerlink" title="less在线编译实现"></a>less在线编译实现</h2><p>不推荐</p><h2 id="CSS变量实现"><a href="#CSS变量实现" class="headerlink" title="CSS变量实现"></a>CSS变量实现</h2><p><a href="https://caniuse.com/?search=css%20variables">CSS Variables (Custom Properties)</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* variable.css */</span><br><span class="hljs-comment">/* 默认变量 */</span><br><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--primary</span>: blue;<br>&#125;<br><br><span class="hljs-comment">/* 亮色变量 */</span><br><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;light&quot;</span>]</span> &#123;<br>  <span class="hljs-attr">--primary</span>: green;<br>&#125;<br><br><span class="hljs-comment">/* 深色变量 */</span><br><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]</span> &#123;<br>  <span class="hljs-attr">--primary</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">data-theme</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Css Variable<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;themeLink&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/cssVariable/variable.css&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--primary);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>默认主题为蓝色，light主题显示绿字，dark主题显示红字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeTheme()&quot;</span>&gt;</span>切换主题<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> themeList = [<span class="hljs-string">&#x27;default&#x27;</span>, <span class="hljs-string">&#x27;light&#x27;</span>, <span class="hljs-string">&#x27;dark&#x27;</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> currentThemeIndex = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeTheme</span> () &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> htmlNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;html&#x27;</span>);</span><br><span class="language-javascript">      currentThemeIndex++;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (currentThemeIndex &gt; themeList.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">        currentThemeIndex = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      htmlNode.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data-theme&#x27;</span>, themeList[currentThemeIndex]);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="css变量兼容方案"><a href="#css变量兼容方案" class="headerlink" title="css变量兼容方案"></a>css变量兼容方案</h3><p>首先需要建一个存放公共css变量的js文件，将需要定义的css变量存放到该js文件，例如（variable.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//浅色</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> lightTheme = &#123; <br>  <span class="hljs-string">&#x27;--primary&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span><br>&#125;;<br><span class="hljs-comment">// 深色</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> darkTheme = &#123; <br>  <span class="hljs-string">&#x27;--primary&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>页面使用css变量，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"> </span><br><span class="language-css"><span class="hljs-selector-class">.text</span> &#123; </span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--primary);</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>安装css-vars-ponyfill 插件</p><p>「css-vars-ponyfill」 官方概念：在传统浏览器和现代浏览器中为CSS自定义属性(又名“CSS变量”)提供客户端支持的ponyfill。 （具体用法与概念请查阅官方网站：<a href="https://github.com/JofunLiang/vue-project-themable-demo">css-vars-ponyfill</a>）</p><p>封装切换主题的js，在main.js做初始化调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// theme.js</span><br><span class="hljs-keyword">import</span> &#123; lightTheme, darkTheme &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../src/assets/js/variable&quot;</span>;<br><span class="hljs-keyword">import</span> cssVars <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;css-vars-ponyfill&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">initTheme</span> = (<span class="hljs-params">theme</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;data-theme&quot;</span>, theme ? <span class="hljs-string">&quot;light&quot;</span> : <span class="hljs-string">&quot;dark&quot;</span>); <br>  <span class="hljs-title function_">cssVars</span>(&#123;<br>    <span class="hljs-attr">watch</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 当添加，删除或修改其&lt;link&gt;或&lt;style&gt;元素的禁用或href属性时，ponyfill将自行调用    </span><br>    <span class="hljs-attr">variables</span>: theme ? lightTheme : darkTheme, <span class="hljs-comment">// variables 自定义属性名/值对的集合</span><br>    <span class="hljs-attr">onlyLegacy</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// false  默认将css变量编译为浏览器识别的css样式  true 当浏览器不支持css变量的时候将css变量编译为识别的css</span><br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【webpack】打包一个vue应用</title>
    <link href="/hexo-blog/2022/09/22/webpack-package/"/>
    <url>/hexo-blog/2022/09/22/webpack-package/</url>
    
    <content type="html"><![CDATA[<p>Tag: <code>学习</code> <code>webapck</code></p><p>打包一个vue应用最方便的还是使用官方提供的vue-cli应用，但是，从长远来说，这不利于我们自身的成长；<br>所以让我们暂时忘却vue-cli，基于webpack，从头一点一点去整合出一个webpack打包配置来；</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>打包一个vue应用，可本地运行调试，可打线上包</li></ul><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p><a href="http://webpack.wuhaolin.cn/">深入浅出webpack</a></p><p><a href="https://webpack.docschina.org/concepts/">webpack中文文档</a></p><h3 id="webpack核心概念"><a href="#webpack核心概念" class="headerlink" title="webpack核心概念"></a>webpack核心概念</h3><ul><li>Entry：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。</li><li>Module：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。</li><li>Chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。</li><li>Loader：模块转换器，用于把模块原内容按照需求转换成新内容。</li><li>Plugin：扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</li><li>Output：输出结果，在 Webpack 经过一系列处理并得出最终想要的代码后输出结果。</li></ul><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p><a href="https://nodejs.org/zh-cn/">node-v16.9.1</a><br><a href="https://cli.vuejs.org/zh/guide/installation.html">vue-cli(用于生成一个vue基本工程)</a></p><p>依赖版本相关<br>“webpack”: “^5.64.1”,<br>“webpack-cli”: “^4.9.1”,</p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><ul><li><p>开发语言 ( JS (ES5/ES6+) or TS )</p><p>使用ES6，借助Babel</p></li><li><p>css预处理器 ( Less (.less) | Sass (.scss/.sass) | Stylus(.stylus/.styl) | Postcss )</p><p>使用Less</p></li></ul><h3 id="一个空vue工程"><a href="#一个空vue工程" class="headerlink" title="一个空vue工程"></a>一个空vue工程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 验证cli是否安装成功</span><br>vue -V <span class="hljs-comment">// 3.5.1</span><br><br><span class="hljs-comment">// Mac/linux系统</span><br>vue create webpack-practice<br><span class="hljs-comment">// Windows系统</span><br>winpty vue.<span class="hljs-property">cmd</span> create webpack-practice<br><br><span class="hljs-comment">// 选择default(babel, eslint)</span><br>cd webpack-practice<br>npm run serve<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  DONE  Compiled successfully in 3542ms </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * App running at:</span><br><span class="hljs-comment">  - Local:   http://localhost:8080/ </span><br><span class="hljs-comment">  - Network: http://x.x.x.x:8080/</span><br><span class="hljs-comment">  Note that the development build is not optimized.</span><br><span class="hljs-comment">  To create a production build, run npm run build.</span><br><span class="hljs-comment"> * /</span><br><span class="hljs-comment">// 出现以上字样表示空工程已就绪</span><br></code></pre></td></tr></table></figure><p>一切准备就绪，下面开始进入正题</p><h2 id="基础依赖及配置"><a href="#基础依赖及配置" class="headerlink" title="基础依赖及配置"></a>基础依赖及配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i webpack webpack-cli -D<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// package.json - add npm script</span><br><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span>,<br>  <span class="hljs-string">&quot;serve:webpack&quot;</span>: <span class="hljs-string">&quot;webpack serve&quot;</span>,<br>  <span class="hljs-string">&quot;build:webpack&quot;</span>: <span class="hljs-string">&quot;webpack --mode production&quot;</span><br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 根目录 - ./webpack.config.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * webapck配置总入口</span><br><span class="hljs-comment"> * 将配置分成三份，common/dev/prod</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>);<br><span class="hljs-keyword">const</span> commonConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./build/webpack-common.config.js&#x27;</span>);<br><span class="hljs-keyword">const</span> developmentConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./build/webpack-dev.config.js&#x27;</span>);<br><span class="hljs-keyword">const</span> productionConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./build/webpack-prod.config.js&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">env, args</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (args.<span class="hljs-property">mode</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(commonConfig, productionConfig);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(commonConfig, developmentConfig);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// build目录 - ./build/webpack-common.config.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * webapck配置文档</span><br><span class="hljs-comment"> * docs: https://webpack.docschina.org/concepts/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span> (dir) &#123;<br>  <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;..&#x27;</span>, dir)<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 入口(entry)</span><br><span class="hljs-comment">   * 入口起点(entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</span><br><span class="hljs-comment">   * 默认值是 ./src/index.js</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/main.js&#x27;</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 输出(output)</span><br><span class="hljs-comment">   * output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;/dist&#x27;</span>), <span class="hljs-comment">// 需要绝对路径</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].js&#x27;</span>,<br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;/&#x27;</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// build目录 - ./build/webpack-dev.config.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开发环境webpack配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// build目录 - ./build/webpack-prod.config.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产环境webpack配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>至此webpack相关基本配置已完成</p><p>开始执行打包命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">npm run start<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * ERROR in ./src/App.vue 1:0</span><br><span class="hljs-comment">Module parse failed: Unexpected token (1:0)</span><br><span class="hljs-comment">You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders</span><br><span class="hljs-comment">&gt; &lt;template&gt;</span><br><span class="hljs-comment">|   &lt;div id=&quot;app&quot;&gt;</span><br><span class="hljs-comment">|     &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="hljs-comment"> @ ./src/main.js 2:0-27 7:17-20</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * /</span><br></code></pre></td></tr></table></figure><p>报错了，大概意思是.vue文件它不能识别，需要借助相关loader处理</p><h2 id="loader配置"><a href="#loader配置" class="headerlink" title="loader配置"></a>loader配置</h2><h3 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h3><p><a href="https://vue-loader.vuejs.org/zh/">vue-loader</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue-loader因为已经通过cli安装了，所以不需要再安装了</span><br><br><span class="hljs-comment">// ./build/webpack-common.config.js - 更新配置</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">VueLoaderPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vue-loader&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// ... 其它规则</span><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.vue$/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;vue-loader&#x27;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 请确保引入这个插件！</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueLoaderPlugin</span>()<br>  ]<br>&#125;<br><br><span class="hljs-comment">// 再次执行打包命令</span><br>npm run start<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * ERROR in ./src/App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp; (./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp;) 20:0</span><br><span class="hljs-comment">Module parse failed: Unexpected character &#x27;#&#x27; (20:0)</span><br><span class="hljs-comment">File was processed with these loaders:</span><br><span class="hljs-comment"> * ./node_modules/vue-loader/lib/index.js</span><br><span class="hljs-comment">You may need an additional loader to handle the result of these loaders.</span><br><span class="hljs-comment">| </span><br><span class="hljs-comment">| </span><br><span class="hljs-comment">&gt; #app &#123;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>又报错了，这次是识别不了图片和css样式，得，继续配置loader</p><h3 id="css-loader-url-loader"><a href="#css-loader-url-loader" class="headerlink" title="css-loader / url-loader"></a>css-loader / url-loader</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// css-loader因为已经通过cli安装了，所以不需要再安装了</span><br><br><span class="hljs-comment">// ./build/webpack-common.config.js - 更新配置</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// 其他loader</span><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;vue-style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.png$/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>      &#125;<br>    ]<br>  &#125;,<br>&#125;<br><br><span class="hljs-comment">// 再次执行打包命令</span><br>npm run start<br><br><span class="hljs-comment">// nice 打包成功</span><br></code></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li><p>css-loader 会找出 CSS 代码中的 @import 和 url() 这样的导入语句，告诉 Webpack 依赖这些资源。同时还支持 CSS Modules、压缩 CSS 等功能。处理完后再把结果交给 style-loader 去处理。</p></li><li><p>style-loader 会把 CSS 代码转换成字符串后，注入到 JavaScript 代码中去，通过 JavaScript 去给 DOM 增加样式。</p></li></ul><p>这里使用的vue-style-loader是fork了style-loader的源代码，对vue文件做了一些定制化处理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>熟悉并实践了一下webpack的基本配置</li><li>使用vue-loader加载.vue单文件</li><li>使用css-loader/vue-style-loader加载.css文件</li><li>使用url-loader加载图片资源文件</li></ul><p>其他未解决问题（后续再更新）：</p><ul><li>css预处理文件处理 ，比如less (less-loader)</li><li>ES6转ES5语法 (babel-loader)</li><li>本地运行一个服务并支持热更新 (wepack-dev-server)</li><li>字体等文件的加载 (url-loader)</li><li>视频等文件的加载 (url-loader)</li><li>其他实用的功能（比如vue支持jsx的写法）</li><li>线上打包的优化等等</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【实用功能】请求队列</title>
    <link href="/hexo-blog/2022/09/22/request-queue/"/>
    <url>/hexo-blog/2022/09/22/request-queue/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  某些页面的首屏请求会比较多，比如超过20多个，如果用户量大的情况下，会给服务器带来极大的压力，为了优化这种情况，服务端的开发同事建议前端能不能限制一下同时请求的数量，比如保持并行请求数量最大为6，当并发中的某个请求完成，执行请求队列的中的队头的请求，直到所有请求完成。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="请求队列类"><a href="#请求队列类" class="headerlink" title="请求队列类"></a>请求队列类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求队列类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestQueue</span> &#123; <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@params</span> &#123;<span class="hljs-type">Array</span>&#125; <span class="hljs-variable">requestList</span> - 请求队列，先进先出</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@params</span> &#123;<span class="hljs-type">Number</span>&#125; <span class="hljs-variable">requestLimit</span> - 最大请求并发数，默认为6</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">requestList  = [], requestLimit = <span class="hljs-number">6</span></span>) &#123; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestList</span> = requestList;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span> = requestLimit;<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 执行请求的方法</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestList</span>.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">const</span> requestTask = <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestList</span>.<span class="hljs-title function_">shift</span>();<br>      <span class="hljs-title function_">requestTask</span>()<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">time</span> =&gt;</span> &#123; <br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;response success &lt;-- request duration:&#x27;</span>, time);<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123; <br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>        &#125;)<br>        .<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span>++;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">run</span>();<br>        &#125;);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span>--;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构建请求函数"><a href="#构建请求函数" class="headerlink" title="构建请求函数"></a>构建请求函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createRequest</span>(<span class="hljs-params">time</span>) &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 这里简单解释下为什么包一层function</span><br><span class="hljs-comment">   * 如果不包function的话，放到队列中请求就已经执行了</span><br><span class="hljs-comment">   * 达不到想要的效果</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;start request --&gt; response time:&#x27;</span>, time);<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; <br>          <span class="hljs-title function_">resolve</span>(time);<br>        &#125;, time)<br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123; <br>        <span class="hljs-title function_">reject</span>(error);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> requestTimeList = [<br>  <span class="hljs-number">1000</span>, <span class="hljs-number">2500</span>, <span class="hljs-number">3000</span>,<br>  <span class="hljs-number">1500</span>, <span class="hljs-number">3500</span>, <span class="hljs-number">2000</span>,<br>  <span class="hljs-number">1200</span>, <span class="hljs-number">4000</span>, <span class="hljs-number">800</span>,<br>  <span class="hljs-number">500</span>, <span class="hljs-number">600</span>, <span class="hljs-number">1400</span>,<br>  <span class="hljs-number">1600</span>, <span class="hljs-number">2400</span>, <span class="hljs-number">2200</span><br>];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createRequest</span>(<span class="hljs-params">time</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;start request --&gt; response time:&#x27;</span>, time);<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; <br>          <span class="hljs-title function_">resolve</span>(time);<br>        &#125;, time)<br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123; <br>        <span class="hljs-title function_">reject</span>(error);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> requestQueueList = requestTimeList.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-title function_">createRequest</span>(item));<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestQueue</span> &#123; <br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">requestList  = [], requestLimit = <span class="hljs-number">6</span></span>) &#123; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestList</span> = requestList;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span> = requestLimit;<br>  &#125;<br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestList</span>.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">const</span> requestTask = <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestList</span>.<span class="hljs-title function_">shift</span>();<br>      <span class="hljs-title function_">requestTask</span>()<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">time</span> =&gt;</span> &#123; <br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;response success &lt;-- request duration:&#x27;</span>, time);<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123; <br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>        &#125;)<br>        .<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span>++;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">run</span>();<br>        &#125;);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span>--;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> requestQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestQueue</span>(requestQueueList, <span class="hljs-number">6</span>);<br>requestQueue.<span class="hljs-title function_">run</span>();<br><br><span class="hljs-comment">// 输出示例</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">// 首次执行run函数，发出6个并发请求</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 1000</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 2500</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 3000</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 1500</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 3500</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 2000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 上述6个请求中，1000最短，所以最先返回结果</span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 1000</span><br><span class="hljs-comment">// 并发数少一个，立马执行未执行队列中的新的请求</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 1200</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 1500</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 4000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 2000</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 800</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 1200</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 500</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 2500</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 600</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 500</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 1400</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 800</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 1600</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 3000</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 2400</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 600</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 2200</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 3500</span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 1400</span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 1600</span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 2200</span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 2400</span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 4000</span><br><span class="hljs-comment">**/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【实现API】数组reduce方法的实现</title>
    <link href="/hexo-blog/2022/09/22/reduce/"/>
    <url>/hexo-blog/2022/09/22/reduce/</url>
    
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">MDN-Array.prototype.reduce</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>reduce() 方法对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</p><p>第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为 0 的元素开始执行，则需要传递初始值。否则，数组索引为 0 的元素将被作为初始值 initialValue，迭代器将从第二个元素开始执行（索引为 1 而不是 0）。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><br><span class="hljs-comment">// 0 + 1 + 2 + 3 + 4</span><br><span class="hljs-keyword">const</span> initialValue = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> sumWithInitial = array1.<span class="hljs-title function_">reduce</span>(<br>  <span class="hljs-function">(<span class="hljs-params">previousValue, currentValue</span>) =&gt;</span> previousValue + currentValue,<br>  initialValue<br>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sumWithInitial);<br><span class="hljs-comment">// expected output: 10</span><br></code></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">reduceFn</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">reducer<span class="hljs-comment">/*, initValue*/</span></span>) &#123;<br>  <span class="hljs-comment">// reducer必须是一个函数</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> reducer !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;reducer&#125;</span> is not a function.`</span>);<br>  &#125;<br>  <span class="hljs-comment">// 是否包含初始值</span><br>  <span class="hljs-keyword">const</span> hasInitValue = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// 当前遍历的数组</span><br>  <span class="hljs-keyword">const</span> array = <span class="hljs-title class_">Object</span>(<span class="hljs-variable language_">this</span>);<br>  <span class="hljs-keyword">const</span> length = array.<span class="hljs-property">length</span>;<br>  <span class="hljs-comment">// 数组长度要大于0或包含初始值</span><br>  <span class="hljs-keyword">if</span> (length === <span class="hljs-number">0</span> &amp;&amp; !hasInitValue) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Reduce of empty array with no initial value&#x27;</span>);<br>  &#125;<br>  <span class="hljs-comment">// 上一次调用 reducer 时的返回值, 此处为初始值赋值</span><br>  <span class="hljs-keyword">let</span> previousValue = hasInitValue ? <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>] : array[<span class="hljs-number">0</span>];<br>  <span class="hljs-comment">// 数组中正在处理的元素的索引</span><br>  <span class="hljs-keyword">let</span> currentIndex = hasInitValue ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (currentIndex &lt; length) &#123;<br>    previousValue = <span class="hljs-title function_">reducer</span>(previousValue, array[currentIndex], currentIndex, array);<br>    currentIndex ++;<br>  &#125;<br>  <span class="hljs-keyword">return</span> previousValue;<br>&#125;;<br><br><span class="hljs-comment">// test</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">reduceFn</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> prev + cur); <span class="hljs-comment">// 15</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">reduceFn</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> prev + cur, <span class="hljs-number">10</span>); <span class="hljs-comment">// 25</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【算法】深入掌握算法系列</title>
    <link href="/hexo-blog/2022/09/22/algorithms-test/"/>
    <url>/hexo-blog/2022/09/22/algorithms-test/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sisterAn/JavaScript-Algorithms">JavaScript-Algorithms</a> - 题源地址<br><a href="https://labuladong.gitee.io/algo/">labuladong的算法小抄</a> - 好的算法学习资料</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为业务开发，虽然在平常开发中很少写算法，但当我们需要深入框架、开发语言、开源库时，懂算法将大大提高我们看源码的能力。例如 ：</p><ul><li>virtual-dom diff 算法做了一些约定，后将原先 O(n3) 的时间复杂度降到了O(n) ，核心原理就是一个树的深度优先搜索</li><li>babel 这些就是一些编译原理的 parser 生成抽象语法树的知识，再将抽象语法树进行转换操作生成文件</li><li>浏览器的 history，底层可以使用栈来实现</li><li>webpack 中利用 tree-shaking 优化</li><li>v8 中的调用栈、消息队列等等</li></ul><p>这些就大量使用了算法，看懂了就能更好的了解它们的性能，更高效的解决问题，提升我们的代码质量与思维视野，进阶到更高 Level，赚更多钱💰💰💰。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>给自己定个小目标，把下面深入掌握算法的小题全过一遍，每天最少一题；<br>目前先附上源地址，后续自己做好后更新题目后的链接地址，并标记清除，比如 ✅图解leetcode88：合并两个有序数组</p><h2 id="深入掌握算法"><a href="#深入掌握算法" class="headerlink" title="深入掌握算法"></a>深入掌握算法</h2><p>分为四个模块：数据结构、算法、设计、基础架构等</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="数组篇"><a href="#数组篇" class="headerlink" title="数组篇"></a>数组篇</h4><ul><li><a href="https://leetcode-cn.com/problems/merge-sorted-array/solution/tou-ge-lan-shi-yong-yuan-sheng-api-by-ha-qpg5/">✅图解leetcode88：合并两个有序数组</a></li><li><a href="https://leetcode-cn.com/problems/two-sum/solution/xiao-nan-gua-kong-jian-huan-shi-jian-by-9kjta/">✅字节&amp;leetcode1：两数之和</a></li><li><a href="https://leetcode-cn.com/problems/3sum/solution/xiao-nan-gua-pai-xu-shuang-zhi-zhen-by-h-i03k/">✅腾讯&amp;leetcode15：三数之和</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/128">字节：N数之和</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/5">腾讯：数组扁平化、去重、排序 </a></li><li><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/xiao-nan-gua-pai-xu-jia-shuang-zhi-zhen-tbapt/">✅leetcode349：给定两个数组，编写一个函数来计算它们的交集</a></li><li><a href="https://leetcode-cn.com/problems/lru-cache/solution/xiao-nan-gua-shuang-xiang-lian-biao-ji-m-q7rt/">✅华为&amp;leetcode146：设计和实现一个LRU（最近最少使用）缓存机制</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/10">阿里算法题：编写一个函数计算多个数组的交集</a></li><li><a href="https://leetcode-cn.com/problems/data-stream-as-disjoint-intervals/solution/xiao-nan-gua-he-li-li-yong-zhan-by-happy-rsd8/">✅leetcode352: 将数据流变为多个不相交区间</a></li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ul><li><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/xiao-nan-gua-die-dai-by-happydemoney-c19o/">✅leetcode21：合并两个有序链表</a></li><li><a href="https://leetcode-cn.com/problems/linked-list-cycle/solution/xiao-nan-gua-kuai-man-zhi-zhen-by-happyd-hnyl/">✅有赞&amp;leetcode141：判断一个单链表是否有环</a></li><li><a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/xiao-nan-gua-xian-jin-hou-chu-zhan-by-ha-m56f/">✅图解leetcode206：反转链表</a></li><li><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/solution/xiao-nan-gua-bian-li-lian-biao-ji-suan-c-nfvg/">✅leetcode876：求链表的中间结点</a></li><li><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/xiao-nan-gua-jian-dan-de-die-dai-by-happ-8mo6/">✅leetcode19：删除链表倒数第 n 个结点</a></li><li><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiao-nan-gua-shuang-zhi-zhen-by-happydem-4gsx/">✅图解字节&amp;leetcode160：编写一个程序，找到两个单链表相交的起始节点</a></li><li><a href="https://leetcode-cn.com/problems/valid-triangle-number/solution/xiao-nan-gua-pai-xu-er-fen-by-happydemon-vrkq/">✅腾讯&amp;leetcode611：有效三角形的个数</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/114">快手算法：链表求和</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/122">leetcode42：接雨水问题</a></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/xiao-yuan-sheng-apiyi-tao-lu-by-happydem-5yiv/">✅字节&amp;leetcode151：翻转字符串里的单词</a></li><li><a href="https://leetcode-cn.com/problems/longest-common-prefix/solution/xiao-zhan-jia-lin-shi-bian-liang-by-happ-jr44/">✅图解拼多多&amp;leetcode14：最长公共前缀（LCP）</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/20">百度：实现一个函数，判断输入是不是回文字符串</a></li><li><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/xiao-dui-lie-by-happydemoney-k6uq/">✅字节&amp;Leetcode3：无重复字符的最长子串</a></li><li><a href="https://leetcode-cn.com/problems/add-strings/solution/xiao-shuang-zhi-zhen-die-dai-wei-bu-by-h-fi94/">✅Facebook&amp;字节&amp;leetcode415: 字符串相加</a></li><li><a href="https://leetcode-cn.com/problems/multiply-strings/solution/zi-fu-chuan-xiang-cheng-by-leetcode-solution/">✅腾讯&amp;leetcode43：字符串相乘</a></li><li><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/solution/">✅腾讯&amp;剑指 Offer 67. 把字符串转换成整数</a></li></ul><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><ul><li><a href="https://leetcode-cn.com/problems/min-stack/solution/xiao-nan-gua-zui-xiao-zhan-by-happydemon-4bbb/">✅字节&amp;leetcode155：最小栈（包含getMin函数的栈）</a></li><li><a href="https://leetcode-cn.com/problems/valid-parentheses/solution/xiao-nan-gua-zuo-jin-you-chu-by-happydem-kq7g/">✅图解腾讯&amp;哔哩哔哩&amp;leetcode20：有效的括号</a></li><li><a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/solution/xiao-nan-gua-yong-zhan-jian-dan-chu-li-b-foi7/">✅leetcode1047：删除字符串中的所有相邻重复项</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/27">leetcode1209：删除字符串中的所有相邻重复项 II</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/28">面试真题：删除字符串中出现次数 &gt;= 2 次的相邻字符</a></li></ul><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><ul><li><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/xiao-nan-gua-zhu-zhan-fu-zhu-zhan-by-hap-tdmu/">✅腾讯&amp;剑指offer09：用两个栈实现队列</a></li><li><a href="https://leetcode-cn.com/problems/sliding-window-maximum/solution/hua-dong-chuang-kou-zui-da-zhi-by-leetco-ki6m/">✅leetcode239：滑动窗口最大值问题</a></li><li><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/xiao-yuan-sheng-apiyi-tao-lu-by-happydem-5yiv/">✅字节&amp;leetcode151：翻转字符串里的单词</a></li><li><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/xiao-dui-lie-by-happydemoney-k6uq/">✅字节&amp;Leetcode3：无重复字符的最长子串</a></li></ul><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><ul><li><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/xiao-nan-gua-pai-xu-jia-shuang-zhi-zhen-tbapt/">✅leetcode349：给定两个数组，编写一个函数来计算它们的交集</a></li><li><a href="https://leetcode-cn.com/problems/two-sum/solution/xiao-nan-gua-kong-jian-huan-shi-jian-by-9kjta/">✅字节&amp;leetcode1：两数之和</a></li><li><a href="https://leetcode-cn.com/problems/3sum/solution/xiao-nan-gua-pai-xu-shuang-zhi-zhen-by-h-i03k/">✅腾讯&amp;leetcode15：三数之和</a></li><li><a href="https://leetcode-cn.com/problems/insert-delete-getrandom-o1/solution/chang-shu-shi-jian-cha-ru-shan-chu-he-huo-qu-sui-j/">✅leetcode380：常数时间插入、删除和获取随机元素</a></li><li><a href="https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/solution/xiao-nan-gua-ha-xi-biao-by-happydemoney-h6z6/">✅剑指Offer50：第一个只出现一次的字符</a></li></ul><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><h5 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h5><ul><li><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/">✅字节&amp;leetcode144：二叉树的前序遍历</a></li><li><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/">✅字节&amp;leetcode94：二叉树的中序遍历</a></li><li><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/">✅字节&amp;leetcode145：二叉树的后序遍历</a></li><li><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/xiao-nan-gua-bfs-by-happydemoney-kgdd/">✅leetcode102：二叉树的层序遍历</a></li><li><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/solution/xiao-nan-gua-bfszhan-by-happydemoney-e7tg/">✅l字节&amp;leetcode107：二叉树的层次遍历</a></li></ul><h5 id="重构二叉树"><a href="#重构二叉树" class="headerlink" title="重构二叉树"></a>重构二叉树</h5><ul><li><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/xiao-nan-gua-di-gui-by-happydemoney-7jkz/">✅leetcode105：从前序与中序遍历序列构造二叉树</a></li></ul><h5 id="二叉树进阶"><a href="#二叉树进阶" class="headerlink" title="二叉树进阶"></a>二叉树进阶</h5><ul><li><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution/xiao-nan-gua-bfs-by-happydemoney-xlgv/">✅l腾讯&amp;leetcode104：二叉树的最大深度</a></li><li><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/xiao-nan-gua-hou-xu-bian-li-by-happydemo-xa1z/">✅字节&amp;腾讯leetcode236：二叉树的最近公共祖先</a></li><li><a href="https://leetcode-cn.com/problems/balanced-binary-tree/solution/xiao-nan-gua-hou-xu-bian-li-by-happydemo-y9aj/">✅剑指Offer&amp;leetcode110：平衡二叉树</a></li><li><a href="https://leetcode-cn.com/problems/path-sum/solution/xiao-nan-gua-qian-xu-bian-li-by-happydem-6brs/">✅字节&amp;leetcode112：路径总和</a></li><li><a href="https://leetcode-cn.com/problems/symmetric-tree/solution/xiao-nan-gua-di-gui-by-happydemoney-45at/">✅剑指Offer&amp;leetcode101：对称二叉树</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/82">字节一面：给定一个二叉树, 找到该树中两个指定节点间的最短距离</a></li><li><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/solution/xiao-nan-gua-dfs-by-happydemoney-x8t7/">✅腾讯&amp;leetcode230：二叉搜索树中第K小的元素</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/141">二叉树的左右子树交换</a></li></ul><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><ul><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/59">腾讯&amp;字节等：最小的k个数</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/61">leetcode347：前 K 个高频元素</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/62">字节&amp;leetcode215：数组中的第K个最大元素</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/63">剑指Offer&amp;leetcode295：数据流的中位数</a></li></ul><h4 id="图"><a href="#图" class="headerlink" title="图"></a>图</h4><ul><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/65">leetcode997：找到小镇的法官</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/66">leetcode207：课程表问题</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/57">剑指Offer&amp;Bigo：旋转矩阵</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/134">腾讯&amp;leetcode：螺旋矩阵 II</a></li></ul><h3 id="算法技巧"><a href="#算法技巧" class="headerlink" title="算法技巧"></a>算法技巧</h3><h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><ul><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/70">腾讯&amp;字节：介绍一下快排原理以及时间复杂度，并实现一个快排</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/74">字节&amp;阿里&amp;网易&amp;leetcode384：打乱数组（洗牌算法）</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/75">阿里五面：说下希尔排序的过程？ 希尔排序的时间复杂度和空间复杂度又是多少？</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/79">腾讯&amp;leetcode148：排序链表</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/80">字节算法题：扑克牌问题（反向推导题）</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/93">腾讯&amp;leetcode611：有效三角形的个数</a></li></ul><h4 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h4><ul><li><a href="https://leetcode-cn.com/problems/binary-search/solution/er-fen-cha-zhao-by-leetcode-solution-f0xw/">✅腾讯：简述二分查找算法与时间复杂度，并实现一个二分查找算法</a></li><li><a href="https://labuladong.gitee.io/algo/1/9/">✅腾讯&amp;字节&amp;leetcode34：在排序数组中查找元素的第一个和最后一个位置</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/86">腾讯&amp;leetcode230：二叉搜索树中第K小的元素</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/109">腾讯&amp;leetcode875：爱吃香蕉的珂珂</a></li></ul><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><ul><li><a href="https://leetcode-cn.com/problems/climbing-stairs/solution/xiao-nan-gua-jian-dan-di-gui-by-happydem-ribe/">✅字节&amp;leetcode70：爬楼梯问题</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/91">字节&amp;leetcode746：使用最小花费爬楼梯</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/94">字节二面&amp;leetcode53：最大子序和</a></li><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/xiao-dong-tai-gui-hua-by-happydemoney-rfwv/">✅腾讯&amp;leetcode121：买卖股票的最佳时机</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/107">腾讯&amp;leetcode647：回文子串</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/121">腾讯&amp;leetcode5：最长回文子串</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/139">阿里&amp;网易&amp;leetcode64：最小路径和</a></li></ul><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><ul><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/xiao-tan-xin-by-happydemoney-mafm/">✅字节&amp;leetcode122：买卖股票的最佳时机 II</a></li><li><a href="https://leetcode-cn.com/problems/assign-cookies/solution/xiao-shuang-zhi-zhen-by-happydemoney-rmza/">✅字节&amp;leetcode455：分发饼干</a></li><li><a href="https://leetcode-cn.com/problems/split-array-into-consecutive-subsequences/solution/fen-ge-shu-zu-wei-lian-xu-zi-xu-lie-by-l-lbs5/">✅腾讯&amp;leetcode659：分割数组为连续子序列</a></li></ul><h4 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h4><ul><li><a href="https://leetcode-cn.com/problems/permutations/solution/xiao-hui-su-fa-by-happydemoney-1hi0/">✅百度&amp;leetcode46：全排列问题</a></li><li><a href="https://leetcode-cn.com/problems/generate-parentheses/solution/gua-hao-sheng-cheng-by-leetcode-solution/">✅腾讯&amp;leetcode22：括号生成</a></li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul><li><a href="https://leetcode-cn.com/problems/lru-cache/solution/xiao-nan-gua-shuang-xiang-lian-biao-ji-m-q7rt/">✅华为&amp;leetcode146：设计和实现一个LRU（最近最少使用）缓存机制</a></li><li><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/er-cha-shu-de-xu-lie-hua-yu-fan-xu-lie-hua-by-le-2/">✅leetcode297. 二叉树的序列化与反序列化</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【算法】机试算法-数独算法变种</title>
    <link href="/hexo-blog/2022/09/22/algorithms-sudoku/"/>
    <url>/hexo-blog/2022/09/22/algorithms-sudoku/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/78a1a4ebe8a34c93aac006c44f6bf8a1?tpId=37&tqId=21267&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">Sudoku-数独问题</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>问题描述：给你一个大写单词word，在这样一个遍布着大写的字母(A-Z)的矩阵(n(行) x m(列))中，如果你可以通过上、下、左、右的方向去找到连续的字母组成word，则输出word的的字母的坐标（行列从1开始计算），如果遍历了矩阵所有位置都找不到，则输出NO；</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * 首行为标识矩阵的行(n)、列数(m)，比如这个是4x5的矩阵</span><br><span class="hljs-comment"> * 第2行为目标单词word</span><br><span class="hljs-comment"> * 从第3行到第n+2行为矩阵内的字母</span><br><span class="hljs-comment"> */</span><br><span class="hljs-string">`4 5</span><br><span class="hljs-string">HELLO</span><br><span class="hljs-string">ABCDE</span><br><span class="hljs-string">HDFGA</span><br><span class="hljs-string">ELRTY</span><br><span class="hljs-string">ALOGH`</span><br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-comment">// H(3 1) - E(4 1) - L(4 2) - L(5 2) - O(5 3)</span><br></code></pre></td></tr></table></figure><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ul><li>第一步，把输入的矩阵数据转换成一个二维数组 board</li><li>以从左到右，从上到下的顺序遍历每一个字母</li><li>当找到word的首字母，将step加1，并记录此时board下标数据和result((i+1) + ‘ ‘ + (j+1))</li><li>同时在当前字母位置的上、下、左、右四个方向上尝试下一个，同时继续遍历下一个</li><li>如果没找到，遍历下一个，同时为了防止无限循环，对于有标识result的，return掉</li><li>一直到遍历完所有字母</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 遍历函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; board n x m的二维数组矩阵</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; i 遍历到第几行</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; j 遍历到第几列</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; step 遍历到word的第几步</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; result 满足条件board下标数据，word[0] === board[i][j]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sudoku</span>(<span class="hljs-params">input</span>) &#123;<br>  <span class="hljs-keyword">const</span> inputArr = input.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [n, m] = inputArr.<span class="hljs-title function_">shift</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">// 首行为标识矩阵的行(n)、列数(m)，比如这个是4x5的矩阵</span><br>  <span class="hljs-keyword">const</span> word = inputArr.<span class="hljs-title function_">shift</span>().<span class="hljs-title function_">trim</span>(); <span class="hljs-comment">// 第2行为目标单词word</span><br>  <span class="hljs-keyword">const</span> board = inputArr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>));<br>  <span class="hljs-keyword">let</span> output = <span class="hljs-string">&#x27;NO&#x27;</span>;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">backtrack</span> = (<span class="hljs-params">board, i, j, step = <span class="hljs-number">0</span>, result = <span class="hljs-string">&#x27;&#x27;</span></span>) =&gt; &#123;<br>    <span class="hljs-comment">// 遍历到行尾，往下一行遍历</span><br>    <span class="hljs-keyword">if</span> (j === +m) &#123;<br>      <span class="hljs-keyword">if</span> (step !== <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">backtrack</span>(board, i+<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 遍历完整个矩阵</span><br>    <span class="hljs-keyword">if</span> (i === +n) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (board[i][j] !== word[step]) &#123;<br>      <span class="hljs-comment">// 上一次满足条件此次不满足不在往下遍历</span><br>      <span class="hljs-keyword">if</span> (result !== <span class="hljs-string">&#x27;&#x27;</span> || step !== <span class="hljs-number">0</span>) &#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">backtrack</span>(board, i, j + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 找到满足条件的</span><br>      <span class="hljs-keyword">if</span> (step === <span class="hljs-number">0</span>) &#123;<br>        result = (i+<span class="hljs-number">1</span>) + <span class="hljs-string">&#x27; &#x27;</span> + (j+<span class="hljs-number">1</span>);<br>      &#125;<br>      <span class="hljs-comment">// 找到了整个word</span><br>      <span class="hljs-keyword">if</span> (step === word.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (result) &#123;<br>          output = result;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>      step++;<br>      <span class="hljs-comment">// up - 向上找</span><br>      <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; board[i - <span class="hljs-number">1</span>][j] === word[step]) &#123; <br>        <span class="hljs-title function_">backtrack</span>(board, i-<span class="hljs-number">1</span>, j, step, result);<br>      &#125;<br>      <span class="hljs-comment">// down - 向下找</span><br>      <span class="hljs-keyword">if</span> (i+<span class="hljs-number">1</span>&lt;+n &amp;&amp; board[i+<span class="hljs-number">1</span>][j] === word[step]) &#123; <br>        <span class="hljs-title function_">backtrack</span>(board, i+<span class="hljs-number">1</span>, j, step, result);<br>      &#125;<br>      <span class="hljs-comment">// left - 向左找</span><br>      <span class="hljs-keyword">if</span> (j-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span> &amp;&amp; board[i][j-<span class="hljs-number">1</span>] === word[step]) &#123; <br>        <span class="hljs-title function_">backtrack</span>(board, i, j-<span class="hljs-number">1</span>, step, result);<br>      &#125;<br>      <span class="hljs-comment">// right - 向右找</span><br>      <span class="hljs-keyword">if</span> (j+<span class="hljs-number">1</span>&lt;+m &amp;&amp; board[i][j+<span class="hljs-number">1</span>] === word[step]) &#123; <br>        <span class="hljs-title function_">backtrack</span>(board, i, j+<span class="hljs-number">1</span>, step, result);<br>      &#125;<br>      step--;<br>      <span class="hljs-title function_">backtrack</span>(board, i, j+<span class="hljs-number">1</span>, step);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;;<br>  <span class="hljs-title function_">backtrack</span>(board, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(output);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// test case -1</span><br><span class="hljs-title function_">sudoku</span>(<span class="hljs-string">`5 5</span><br><span class="hljs-string">HELLO</span><br><span class="hljs-string">OAIHL</span><br><span class="hljs-string">HCDOL</span><br><span class="hljs-string">ELLOW</span><br><span class="hljs-string">OABRT</span><br><span class="hljs-string">OABRH`</span>);<br><br><span class="hljs-comment">// 2 1</span><br><br><span class="hljs-comment">// test case -2</span><br><span class="hljs-title function_">sudoku</span>(<span class="hljs-string">`4 5</span><br><span class="hljs-string">HELLO</span><br><span class="hljs-string">ABCHE</span><br><span class="hljs-string">HDFGH</span><br><span class="hljs-string">ELRTY</span><br><span class="hljs-string">ALOGH`</span>);<br><br><span class="hljs-comment">// 2 1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>

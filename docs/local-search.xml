<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【TS】TypeScript编码规范</title>
    <link href="/hexo-blog/2022/12/08/ts-code-guide/"/>
    <url>/hexo-blog/2022/12/08/ts-code-guide/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="TypeScript编码规范"><a href="#TypeScript编码规范" class="headerlink" title="TypeScript编码规范"></a>TypeScript编码规范</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着 TypeScript 的不断发展，越来越多的开发者认可并使用 TypeScript 开发应用。本文档的目标是使 TypeScript 新特性的代码风格保持一致，并给予一些实践<em>建议</em>。</p><p>由于 TypeScript 依然在快速发展，本文档也将随时保持更新。更新内容主要涉及对新增的语言特性的格式规范化、实践指导，引擎与编译器环境变化的使用指导。</p><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><h3 id="2-1-环境"><a href="#2-1-环境" class="headerlink" title="2.1 环境"></a>2.1 环境</h3><p>[<strong>强制</strong>] TypeScript 文件使用 .ts 扩展名。含 JSX 语法的 TypeScript 文件使用 .tsx 扩展名。<br>[<em>建议</em>] tsconfig.json 配置文件应开启 strict、noImplicitReturns、noUnusedLocals 选项。<br>[<em>建议</em>] tsconfig.json 配置文件应开启 allowSyntheticDefaultImports 选项。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br></code></pre></td></tr></table></figure><p>[<em>建议</em>] 使用 VS Code 编写 TypeScript。</p><h3 id="2-2-文件"><a href="#2-2-文件" class="headerlink" title="2.2 文件"></a>2.2 文件</h3><p>[<strong>强制</strong>] 在文件结尾处，保留一个空行。</p><h3 id="2-3-命名"><a href="#2-3-命名" class="headerlink" title="2.3 命名"></a>2.3 命名</h3><p>[<strong>强制</strong>] 接口 使用 Pascal 命名法。<br>[<strong>强制</strong>] 接口名 不使用 I 作为前缀。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ButtonProps</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IButtonProps</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>[<strong>强制</strong>] 类型别名 使用 Pascal 命名法。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">HeaderStateProps</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">HeaderDispatchProps</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">HeaderProps</span> = <span class="hljs-title class_">HeaderStateProps</span> &amp; <span class="hljs-title class_">HeaderDispatchProps</span>;<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 使用PascalCase为类型命名。<br><span class="hljs-bullet">2.</span> 不要使用<span class="hljs-code">`I`</span>做为接口名前缀。<br><span class="hljs-bullet">3.</span> 使用PascalCase为枚举值命名。<br><span class="hljs-bullet">4.</span> 使用camelCase为函数命名。<br><span class="hljs-bullet">5.</span> 使用camelCase为属性或本地变量命名。<br><span class="hljs-bullet">6.</span> 不要为私有属性名添加<span class="hljs-code">`_`</span>前缀。<br><span class="hljs-bullet">7.</span> 尽可能使用完整的单词拼写命名。<br></code></pre></td></tr></table></figure><h2 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h2><h3 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h3><p>[<strong>强制</strong>] 使用 const 声明 枚举 。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Directions</span> &#123;<br>    <span class="hljs-variable constant_">UP</span>,<br>    <span class="hljs-variable constant_">DOWM</span>,<br>    <span class="hljs-variable constant_">LEFT</span>,<br>    <span class="hljs-variable constant_">RIGHT</span>,<br>&#125;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Directions</span> &#123;<br>    <span class="hljs-variable constant_">UP</span>,<br>    <span class="hljs-variable constant_">DOWN</span>,<br>    <span class="hljs-variable constant_">LEFT</span>,<br>    <span class="hljs-variable constant_">RIGHT</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-类型"><a href="#3-2-类型" class="headerlink" title="3.2 类型"></a>3.2 类型</h3><p>[<strong>强制</strong>] 不应显式声明可以自动推导的类型。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">let</span> shouldUpdate = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">shouldUpdate</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>[<strong>强制</strong>] 使用 string / number / boolean 声明基本类型，不使用 String / Number / Boolean。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span>;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-title class_">String</span>;<br></code></pre></td></tr></table></figure><p>[<strong>强制</strong>] 不使用 Object / Function 声明类型。<br>[<strong>强制</strong>] 数组元素为简单类型（非匿名且不含泛型）时，使用 T[] 声明类型，否则应使用 Array<T>。<br>[<em>建议</em>] 数组元素为不可变数据时，使用 ReadonlyArray<T> 声明类型。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">files</span>: <span class="hljs-built_in">string</span>[];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">tokens</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>&gt;;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">buffer</span>: <span class="hljs-title class_">Buffer</span>[];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">responses</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">number</span>&gt;&gt;;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">files</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">string</span>&gt;;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">tokens</span>: (<span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>)[];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">buffer</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">Buffer</span>&gt;;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">responses</span>: <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">number</span>&gt;[];<br></code></pre></td></tr></table></figure><p>[<strong>强制</strong>] 不使用 ! 声明对象属性非空。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">if</span> (foo.<span class="hljs-property">bar</span> &amp;&amp; foo.<span class="hljs-property">bar</span>.<span class="hljs-property">baz</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">if</span> (foo!.<span class="hljs-property">bar</span>!.<span class="hljs-property">baz</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>[<em>建议</em>] 不使用 any 声明类型。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">const</span> identity = &lt;T&gt;<span class="hljs-function">(<span class="hljs-params">x: T</span>) =&gt;</span> x;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">identity</span> = (<span class="hljs-params">x: <span class="hljs-built_in">any</span></span>) =&gt; x;<br></code></pre></td></tr></table></figure><p>[<strong>强制</strong>] 使用 as 进行类型声明转换，不使用 &lt;&gt; 。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLDivElement</span>;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> root = &lt;<span class="hljs-title class_">HTMLDivElement</span>&gt;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>);<br></code></pre></td></tr></table></figure><p>[<strong>强制</strong>] 接口不应为空。<br>[<strong>强制</strong>] 接口中同一函数重载的类型声明需相邻。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AnyInterface</span> &#123;<br>    <span class="hljs-title function_">foo</span>();<br>    <span class="hljs-title function_">foo</span>(<span class="hljs-attr">x</span>: <span class="hljs-built_in">string</span>);<br>    <span class="hljs-title function_">bar</span>();<br>    <span class="hljs-title function_">bar</span>(<span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>);<br>&#125;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AnyInterface</span> &#123;<br>    <span class="hljs-title function_">foo</span>();<br>    <span class="hljs-title function_">bar</span>();<br>    <span class="hljs-title function_">foo</span>(<span class="hljs-attr">x</span>: <span class="hljs-built_in">string</span>);<br>    <span class="hljs-title function_">bar</span>(<span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>[<em>建议</em>] 不要导出类型/函数，除非你要在不同的组件中共享它。<br>[<em>建议</em>] 不要在全局命名空间内定义类型/值。<br>[<em>建议</em>] 共享的类型应该在<code>types.ts</code>里定义。<br>[<em>建议</em>] 在一个文件里，类型定义应该出现在顶部。</p><h3 id="3-3-条件"><a href="#3-3-条件" class="headerlink" title="3.3 条件"></a>3.3 条件</h3><p>[<strong>强制</strong>] 使用 === 或 !== 判断相等性，不使用 == 或 !=。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">if</span> (foo !== <span class="hljs-literal">null</span> &amp;&amp; foo !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">if</span> (foo != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-循环"><a href="#3-4-循环" class="headerlink" title="3.4 循环"></a>3.4 循环</h3><p>[<em>建议</em>] 使用 Object.keys / Object.values / Object.entries / Object.getOwnPropertyNames 遍历对象，不使用 for .. in 。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> <span class="hljs-comment">/* ... */</span>);<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>[<em>建议</em>] 索引仅用于获取数组当前被迭代的项时，使用 for .. of 遍历数组，不使用 for 。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> items) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; items.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> item = items[i];<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-数组"><a href="#3-5-数组" class="headerlink" title="3.5 数组"></a>3.5 数组</h3><p>[<em>建议</em>] 使用 … 进行数组浅拷贝，不使用 Array.from / Array.prototype.slice 。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">const</span> copies = [...items];<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> copies = items.<span class="hljs-title function_">slice</span>();<br><br><span class="hljs-comment">// worst</span><br><span class="hljs-keyword">let</span> copies = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; items.<span class="hljs-property">length</span>; i++) &#123;<br>    copies.<span class="hljs-title function_">push</span>(items[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>[<em>建议</em>] 使用 … 将类数组对象转化为数组，不使用 Array.from / Array.prototype.slice 。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">const</span> elements = [...<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.foo&#x27;</span>)];<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> element = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.foo&#x27;</span>));<br><br><span class="hljs-comment">// worst</span><br><span class="hljs-keyword">const</span> element = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.foo&#x27;</span>));<br></code></pre></td></tr></table></figure><h3 id="3-6-对象"><a href="#3-6-对象" class="headerlink" title="3.6 对象"></a>3.6 对象</h3><p>[<strong>强制</strong>] 使用 … 进行对象浅拷贝，不使用 Object.assign 。<br>示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// good</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> (&#123;...state, <span class="hljs-attr">clicked</span>: <span class="hljs-literal">true</span>&#125;));<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, state, &#123;<span class="hljs-attr">clicked</span>: <span class="hljs-literal">true</span>&#125;));<br></code></pre></td></tr></table></figure><h3 id="3-7-函数"><a href="#3-7-函数" class="headerlink" title="3.7 函数"></a>3.7 函数</h3><p>[<strong>强制</strong>] 避免 return undefined ，应直接 return。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">bar: <span class="hljs-built_in">boolean</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!bar) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">bar: <span class="hljs-built_in">boolean</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!bar) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-8-类"><a href="#3-8-类" class="headerlink" title="3.8 类"></a>3.8 类</h3><p>[<em>建议</em>] 每个文件中最多声明一个类。<br>[<strong>强制</strong>] 类成员的可访问性为 public 时，不应显式声明。<br>[<em>建议</em>] 构造函数可忽略时，应忽略。<br>[<em>建议</em>] 类成员之间使用空行隔开。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span>&lt;<span class="hljs-title class_">ButtonProps</span>, <span class="hljs-title class_">ButtonState</span>&gt; &#123;<br>    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">state</span>: <span class="hljs-title class_">ButtonState</span> = &#123;<br>        <span class="hljs-attr">clicked</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span>&lt;<span class="hljs-title class_">ButtonProps</span>, <span class="hljs-title class_">ButtonState</span>&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-attr">state</span>: <span class="hljs-title class_">ButtonState</span> = &#123;<br>        <span class="hljs-attr">clicked</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props: ButtonProps</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>[<em>建议</em>] 构造函数初始化实例属性时，应尽量使用参数属性。<br>[<em>建议</em>] 构造函数的参数中，作为属性的参数应排列于其他参数前。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> heroService: HeroService</span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-attr">heroService</span>: <span class="hljs-title class_">HeroService</span>;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">heroService: HeroService</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">heroService</span> = heroService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-9-模块"><a href="#3-9-模块" class="headerlink" title="3.9 模块"></a>3.9 模块</h3><p>[<strong>强制</strong>] 使用 ECMAScript 2015 标准的模块系统。<br>[<strong>强制</strong>] 除类型声明文件外，不使用 module / namespace 关键字。<br>[<strong>强制</strong>] 不使用 /// &lt;reference path= &gt; 。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">import</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;foo&#x27;</span>;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">import</span> foo = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br></code></pre></td></tr></table></figure><p>[<strong>强制</strong>] 对于同一个模块路径，仅 import 一次。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<span class="hljs-title class_">PureComponent</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">PureComponent</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br></code></pre></td></tr></table></figure><p>[<em>建议</em>] 对于使用 webpack 等构建工具的项目，在模块中引入其他资源（如样式、图片等）时，为资源编写类型声明文件，或使用合适的 loader 生成类型声明文件。<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><br><span class="hljs-comment">// Button.scss.d.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-attr">clicked</span>: <span class="hljs-built_in">string</span>;<br><br><span class="hljs-comment">// logo.png.d.ts</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">logo</span>: <span class="hljs-built_in">string</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> logo;<br><br><span class="hljs-comment">// Button.tsx</span><br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Button.scss&#x27;</span>;<br><span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./logo.png&#x27;</span>;<br><br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> styles = <span class="hljs-built_in">require</span>&lt;<span class="hljs-built_in">any</span>&gt;(<span class="hljs-string">&#x27;./Button.scss&#x27;</span>);<br><span class="hljs-keyword">const</span> logo = <span class="hljs-built_in">require</span>&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;./logo.png&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-10-字符串"><a href="#3-10-字符串" class="headerlink" title="3.10 字符串"></a>3.10 字符串</h3><p>[<strong>强制</strong>] 使用双引号<code>&quot;&quot;</code><br>[<em>建议</em>] 所有要展示给用户看的信息字符串都要做好本地化工作（在diagnosticMessages.json中创建新的实体）。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="4-1-注释"><a href="#4-1-注释" class="headerlink" title="4.1 注释"></a>4.1 注释</h3><p>[<em>建议</em>] 为函数，接口，枚举类型和类使用JSDoc风格的注释。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// good</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建一个websocket</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string | URL</span>&#125; <span class="hljs-variable">url</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string | string[]</span>&#125; <span class="hljs-variable">protocols</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">WebSocket</span>&#125; 返回websocket实例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createWebSocket</span> (url, protocols) &#123;<br>  <span class="hljs-comment">// code here</span><br>&#125;<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createWebSocket</span> (url, protocols) &#123;<br>  <span class="hljs-comment">// code here</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-错误提示信息"><a href="#4-2-错误提示信息" class="headerlink" title="4.2 错误提示信息"></a>4.2 错误提示信息</h3><ol><li>在句子结尾使用<code>.</code>。</li><li>对不确定的实体使用不定冠词。</li><li>确切的实体应该使用名字（变量名，类型名等）</li><li>当创建一条新的规则时，主题应该使用单数形式（比如：An external module cannot…而不是External modules cannot）。</li><li>使用现在时态。</li></ol><h3 id="4-3-错误提示信息代码"><a href="#4-3-错误提示信息代码" class="headerlink" title="4.3 错误提示信息代码"></a>4.3 错误提示信息代码</h3><p>提示信息被划分类成了一般的区间。如果要新加一个提示信息，在上条代码上加1做为新的代码。</p><ul><li>1000 语法信息</li><li>2000 语言信息</li><li>4000 声明生成信息</li><li>5000 编译器选项信息</li><li>6000 命令行编译器信息</li><li>7000 noImplicitAny信息</li></ul><h3 id="4-4-普通方法"><a href="#4-4-普通方法" class="headerlink" title="4.4 普通方法"></a>4.4 普通方法</h3><p>由于种种原因，我们避免使用一些方法，而使用我们自己定义的。</p><ol><li>不使用ECMAScript 5函数；而是使用<a href="https://github.com/Microsoft/TypeScript/blob/master/src/compiler/core.ts">core.ts</a>这里的。</li><li>不要使用<code>for..in</code>语句；而是使用<code>ts.forEach</code>，<code>ts.forEachKey</code>和<code>ts.forEachValue</code>。注意它们之间的区别。</li><li>如果可能的话，尝试使用<code>ts.forEach</code>，<code>ts.map</code>和<code>ts.filter</code>代替循环。</li></ol><h3 id="4-5-风格"><a href="#4-5-风格" class="headerlink" title="4.5 风格"></a>4.5 风格</h3><ol><li>使用arrow函数代替匿名函数表达式。</li><li>只要需要的时候才把arrow函数的参数括起来。 比如，<code>(x) =&gt; x + x</code>是错误的，下面是正确的做法：<ol><li><code>x =&gt; x + x</code></li><li><code>(x,y) =&gt; x + y</code></li><li><code>&lt;T&gt;(x: T, y: T) =&gt; x === y</code></li></ol></li><li>总是使用<code>&#123;&#125;</code>把循环体和条件语句括起来。</li><li>开始的<code>&#123;</code>总是在同一行。</li><li>小括号里开始不要有空白.  逗号，冒号，分号后要有一个空格。比如：<ol><li><code>for (var i = 0, n = str.length; i &lt; 10; i++) &#123; &#125;</code></li><li><code>if (x &lt; 10) &#123; &#125;</code></li><li><code>function f(x: number, y: string): void &#123; &#125;</code></li></ol></li><li>每个变量声明语句只声明一个变量  （比如 使用 <code>var x = 1; var y = 2;</code> 而不是 <code>var x = 1, y = 2;</code>）。</li><li><code>else</code>要在结束的<code>&#125;</code>后另起一行。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【面试】重构现有产品的思路？</title>
    <link href="/hexo-blog/2022/10/13/interview-restructure/"/>
    <url>/hexo-blog/2022/10/13/interview-restructure/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>  现有一个线上产品，有几百万行代码，已经交付了很多的用户使用，现在面临一个问题，因为当初项目赶进度，欠下了很多技术债，现在开发一个小功能到上线成本很高，如果让你来对现有产品进行重构，同时保证已发布产品能正常升级，你会怎么做？</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ol><li>架构腐烂，可维护性差</li><li>重构的同时保持线上正常运行</li></ol><h2 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h2><h3 id="架构选择"><a href="#架构选择" class="headerlink" title="架构选择"></a>架构选择</h3><p>  首先要捋清思路，确定理想的架构</p><h3 id="架构拆解"><a href="#架构拆解" class="headerlink" title="架构拆解"></a>架构拆解</h3><p>进行架构分层：</p><ol><li>最底层-核心框架、路由系统等</li><li>现有的业务组件复用改造</li><li>是否通过业务组件组合就能组成业务模块</li><li>多端展示处理-H5、移动端、PC等</li></ol><h3 id="线上运行与重构并行方案"><a href="#线上运行与重构并行方案" class="headerlink" title="线上运行与重构并行方案"></a>线上运行与重构并行方案</h3><p>  可以考虑进行基础模块改造，同时要考虑好对外接口兼容</p><p>并行方案：</p><ol><li>微前端-比如qiankun</li><li>webpack模块联邦</li><li>system.js加载新模块</li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>  重构要做好计划，思路要清晰，目标要明确，要做好deadline，不然很可能就不了了之了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【解决方案】前端换肤方案</title>
    <link href="/hexo-blog/2022/10/12/website-skin-project/"/>
    <url>/hexo-blog/2022/10/12/website-skin-project/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>方法</th><th>特点</th><th>兼容性</th><th>推荐度</th></tr></thead><tbody><tr><td>利用class 命名空间</td><td>最简单的换肤方案</td><td></td><td></td></tr><tr><td>准备多套CSS主题</td><td>最常用</td><td></td><td>推荐</td></tr><tr><td>动态换肤</td><td>支持浏览器热换肤，最酷炫</td><td></td><td></td></tr><tr><td>less在线编译实现</td><td></td><td></td><td>不推荐</td></tr><tr><td>CSS变量换肤</td><td>不考虑IE，最佳换肤方式</td><td>使用css-vars-ponyfill解决兼容性问题</td><td>推荐</td></tr></tbody></table><h2 id="利用class-命名空间"><a href="#利用class-命名空间" class="headerlink" title="利用class 命名空间"></a>利用class 命名空间</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.red-theme</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: red</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.blue-theme</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: blue</span><br><span class="language-css">｝</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red-theme&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> 这里是红色主题 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="准备多套CSS主题"><a href="#准备多套CSS主题" class="headerlink" title="准备多套CSS主题"></a>准备多套CSS主题</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*theme-default.css*/</span><br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* theme-red.css */</span><br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: #red<br>&#125;<br></code></pre></td></tr></table></figure><p>页面加载后，根据用户需求加载不同的样式列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;themeLink&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/multipleTheme/light.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>light主题显示蓝字，dark主题显示红字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeTheme()&quot;</span>&gt;</span>切换主题<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> currentTheme = <span class="hljs-string">&#x27;light&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getTheme</span> () &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (currentTheme === <span class="hljs-string">&#x27;light&#x27;</span>) &#123;</span><br><span class="language-javascript">        currentTheme = <span class="hljs-string">&#x27;dark&#x27;</span>;</span><br><span class="language-javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">        currentTheme = <span class="hljs-string">&#x27;light&#x27;</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> currentTheme;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeTheme</span> () &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeMap</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;light&#x27;</span>: <span class="hljs-string">&#x27;./css/multipleTheme/light.css&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;dark&#x27;</span>: <span class="hljs-string">&#x27;./css/multipleTheme/dark.css&#x27;</span></span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> themeLink = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#themeLink&#x27;</span>);</span><br><span class="language-javascript">      themeLink.<span class="hljs-property">href</span> = <span class="hljs-title class_">ThemeMap</span>[<span class="hljs-title function_">getTheme</span>()];</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>有时候需要保存用户使用的主题，可以通过如下方式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">利用路由标记<br>利用cookie标记<br>利用localstorage<br>保存到后端服务器<br></code></pre></td></tr></table></figure><p>优化点：<br>利用CSS预处理生成多套主题样式</p><h2 id="动态换肤"><a href="#动态换肤" class="headerlink" title="动态换肤"></a>动态换肤</h2><p>这是element ui中的换肤方案，支持浏览器热换肤。生成一套主题， 将主题配色配置写在js中，在浏览器中用js动态修改style标签覆盖原有的CSS。</p><ol><li>先把默认主题文件中涉及到颜色的 CSS 值替换成关键词</li><li>根据用户选择的主题色生成一系列对应的颜色值</li><li>把关键词再换回刚刚生成的相应的颜色值</li><li>直接在页面上加 style 标签，把生成的样式填进去</li></ol><h3 id="先把默认主题文件中涉及到颜色的-CSS-值替换成关键词"><a href="#先把默认主题文件中涉及到颜色的-CSS-值替换成关键词" class="headerlink" title="先把默认主题文件中涉及到颜色的 CSS 值替换成关键词"></a>先把默认主题文件中涉及到颜色的 CSS 值替换成关键词</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L250-L274</span><br><span class="hljs-title function_">getStyleTemplate</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-keyword">const</span> colorMap = &#123;<br>    <span class="hljs-string">&#x27;#20a0ff&#x27;</span>: <span class="hljs-string">&#x27;primary&#x27;</span>,<br>    <span class="hljs-string">&#x27;#0190fe&#x27;</span>: <span class="hljs-string">&#x27;secondary&#x27;</span>,<br>    <span class="hljs-string">&#x27;#fbfdff&#x27;</span>: <span class="hljs-string">&#x27;darkWhite&#x27;</span>,<br>    <span class="hljs-string">&#x27;#1f2d3d&#x27;</span>: <span class="hljs-string">&#x27;baseBlack&#x27;</span>,<br>    <span class="hljs-string">&#x27;#324157&#x27;</span>: <span class="hljs-string">&#x27;lightBlack&#x27;</span>,<br>    <span class="hljs-string">&#x27;#48576a&#x27;</span>: <span class="hljs-string">&#x27;extraLightBlack&#x27;</span>,<br>    <span class="hljs-string">&#x27;#8391a5&#x27;</span>: <span class="hljs-string">&#x27;baseSilver&#x27;</span>,<br>    <span class="hljs-string">&#x27;#97a8be&#x27;</span>: <span class="hljs-string">&#x27;lightSilver&#x27;</span>,<br>    <span class="hljs-string">&#x27;#bfcbd9&#x27;</span>: <span class="hljs-string">&#x27;extraLightSilver&#x27;</span>,<br>    <span class="hljs-string">&#x27;#d1dbe5&#x27;</span>: <span class="hljs-string">&#x27;baseGray&#x27;</span>,<br>    <span class="hljs-string">&#x27;#e4e8f1&#x27;</span>: <span class="hljs-string">&#x27;lightGray&#x27;</span>,<br>    <span class="hljs-string">&#x27;#eef1f6&#x27;</span>: <span class="hljs-string">&#x27;extraLightGray&#x27;</span>,<br>    <span class="hljs-string">&#x27;#1d90e6&#x27;</span>: <span class="hljs-string">&#x27;buttonActive&#x27;</span>,<br>    <span class="hljs-string">&#x27;#4db3ff&#x27;</span>: <span class="hljs-string">&#x27;buttonHover&#x27;</span>,<br>    <span class="hljs-string">&#x27;#dfe6ec&#x27;</span>: <span class="hljs-string">&#x27;tableBorder&#x27;</span>,<br>    <span class="hljs-string">&#x27;#d2ecff&#x27;</span>: <span class="hljs-string">&#x27;datepickerInRange&#x27;</span>,<br>    <span class="hljs-string">&#x27;#afddff&#x27;</span>: <span class="hljs-string">&#x27;datepickerInRangeHover&#x27;</span>,<br>    <span class="hljs-string">&#x27;#1c8de0&#x27;</span>: <span class="hljs-string">&#x27;selectOptionSelected&#x27;</span>,<br>    <span class="hljs-string">&#x27;#edf7ff&#x27;</span>: <span class="hljs-string">&#x27;lightBackground&#x27;</span><br>  &#125;;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(colorMap).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> value = colorMap[key];<br>    data = data.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(key, <span class="hljs-string">&#x27;ig&#x27;</span>), value);<br>  &#125;);<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="根据用户选择的主题色生成一系列对应的颜色值"><a href="#根据用户选择的主题色生成一系列对应的颜色值" class="headerlink" title="根据用户选择的主题色生成一系列对应的颜色值"></a>根据用户选择的主题色生成一系列对应的颜色值</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// https://github.com/ElementUI/theme-preview/blob/master/src/utils/formula.json</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;secondary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary s(99%) l(*0.9))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;darkWhite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(#fff blend(primary 2%))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;baseBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary h(+6) s(33%) l(18%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack h(+5) s(27%) l(27%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;extraLightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack h(+2) s(19%) l(35%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;baseSilver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack h(+3) s(16%) l(58%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lightSilver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack h(+3) s(23%) l(67%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;extraLightSilver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack s(26%) l(80%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;baseGray&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack s(28%) l(86%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lightGray&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack h(+10) s(33%) l(92%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;extraLightGray&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(baseBlack h(+6) s(33%) l(95%))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;buttonActive&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary shade(10%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;buttonHover&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(20%))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;tableBorder&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(extraLightSilver h(-3) s(27%) l(90%))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;datepickerInRange&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(80%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;datepickerInRangeHover&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(64%))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;selectOptionSelected&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary shade(12%))&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;lightBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(92%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;emptyText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary s(16%) l(44%))&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="把关键词再换回刚刚生成的相应的颜色值"><a href="#把关键词再换回刚刚生成的相应的颜色值" class="headerlink" title="把关键词再换回刚刚生成的相应的颜色值"></a>把关键词再换回刚刚生成的相应的颜色值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://github.com/ElementUI/theme-preview/blob/master/src/utils/color.js</span><br><span class="hljs-keyword">import</span> color <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;css-color-function&#x27;</span>;<br><span class="hljs-keyword">import</span> formula <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./formula.json&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">generateColors</span> = primary =&gt; &#123;<br>  <span class="hljs-keyword">let</span> colors = &#123;&#125;;<br>  <span class="hljs-keyword">let</span> baseBlack = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">let</span> extraLightBlack = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">let</span> extraLightSilver = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(formula).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> value = formula[key]<br>      .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/primary/g</span>, primary)<br>      .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/baseBlack/g</span>, baseBlack)<br>      .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/extraLightBlack/g</span>, extraLightBlack)<br>      .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/extraLightSilver/g</span>, extraLightSilver);<br>    colors[key] = color.<span class="hljs-title function_">convert</span>(value);<br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;baseBlack&#x27;</span>) &#123;<br>      baseBlack = colors[key];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;extraLightBlack&#x27;</span>) &#123;<br>      extraLightBlack = colors[key];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;extraLightSilver&#x27;</span>) &#123;<br>      extraLightSilver = colors[key];<br>    &#125;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> colors;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> generateColors;<br></code></pre></td></tr></table></figure><h3 id="直接在页面上加-style-标签，把生成的样式填进去"><a href="#直接在页面上加-style-标签，把生成的样式填进去" class="headerlink" title="直接在页面上加 style 标签，把生成的样式填进去"></a>直接在页面上加 style 标签，把生成的样式填进去</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L198-L211</span><br><span class="hljs-title function_">writeNewStyle</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> cssText = <span class="hljs-variable language_">this</span>.<span class="hljs-property">originalStyle</span>;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    cssText = cssText.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;(:|\\s+)&#x27;</span> + key, <span class="hljs-string">&#x27;g&#x27;</span>), <span class="hljs-string">&#x27;$1&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>[key]);<br>  &#125;);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">originalStylesheetCount</span> === <span class="hljs-variable language_">document</span>.<span class="hljs-property">styleSheets</span>.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">const</span> style = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;style&#x27;</span>);<br>    style.<span class="hljs-property">innerText</span> = cssText;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(style);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-property">lastChild</span>.<span class="hljs-property">innerText</span> = cssText;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="less在线编译实现"><a href="#less在线编译实现" class="headerlink" title="less在线编译实现"></a>less在线编译实现</h2><p>不推荐</p><h2 id="CSS变量实现"><a href="#CSS变量实现" class="headerlink" title="CSS变量实现"></a>CSS变量实现</h2><p><a href="https://caniuse.com/?search=css%20variables">CSS Variables (Custom Properties)</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* variable.css */</span><br><span class="hljs-comment">/* 默认变量 */</span><br><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--primary</span>: blue;<br>&#125;<br><br><span class="hljs-comment">/* 亮色变量 */</span><br><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;light&quot;</span>]</span> &#123;<br>  <span class="hljs-attr">--primary</span>: green;<br>&#125;<br><br><span class="hljs-comment">/* 深色变量 */</span><br><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]</span> &#123;<br>  <span class="hljs-attr">--primary</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">data-theme</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Css Variable<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;themeLink&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/cssVariable/variable.css&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--primary);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>默认主题为蓝色，light主题显示绿字，dark主题显示红字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeTheme()&quot;</span>&gt;</span>切换主题<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> themeList = [<span class="hljs-string">&#x27;default&#x27;</span>, <span class="hljs-string">&#x27;light&#x27;</span>, <span class="hljs-string">&#x27;dark&#x27;</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> currentThemeIndex = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeTheme</span> () &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> htmlNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;html&#x27;</span>);</span><br><span class="language-javascript">      currentThemeIndex++;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (currentThemeIndex &gt; themeList.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">        currentThemeIndex = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      htmlNode.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data-theme&#x27;</span>, themeList[currentThemeIndex]);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="css变量兼容方案"><a href="#css变量兼容方案" class="headerlink" title="css变量兼容方案"></a>css变量兼容方案</h3><p>首先需要建一个存放公共css变量的js文件，将需要定义的css变量存放到该js文件，例如（variable.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//浅色</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> lightTheme = &#123; <br>  <span class="hljs-string">&#x27;--primary&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span><br>&#125;;<br><span class="hljs-comment">// 深色</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> darkTheme = &#123; <br>  <span class="hljs-string">&#x27;--primary&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>页面使用css变量，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"> </span><br><span class="language-css"><span class="hljs-selector-class">.text</span> &#123; </span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--primary);</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>安装css-vars-ponyfill 插件</p><p>「css-vars-ponyfill」 官方概念：在传统浏览器和现代浏览器中为CSS自定义属性(又名“CSS变量”)提供客户端支持的ponyfill。 （具体用法与概念请查阅官方网站：<a href="https://github.com/JofunLiang/vue-project-themable-demo">css-vars-ponyfill</a>）</p><p>封装切换主题的js，在main.js做初始化调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// theme.js</span><br><span class="hljs-keyword">import</span> &#123; lightTheme, darkTheme &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../src/assets/js/variable&quot;</span>;<br><span class="hljs-keyword">import</span> cssVars <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;css-vars-ponyfill&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">initTheme</span> = (<span class="hljs-params">theme</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;data-theme&quot;</span>, theme ? <span class="hljs-string">&quot;light&quot;</span> : <span class="hljs-string">&quot;dark&quot;</span>); <br>  <span class="hljs-title function_">cssVars</span>(&#123;<br>    <span class="hljs-attr">watch</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 当添加，删除或修改其&lt;link&gt;或&lt;style&gt;元素的禁用或href属性时，ponyfill将自行调用    </span><br>    <span class="hljs-attr">variables</span>: theme ? lightTheme : darkTheme, <span class="hljs-comment">// variables 自定义属性名/值对的集合</span><br>    <span class="hljs-attr">onlyLegacy</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// false  默认将css变量编译为浏览器识别的css样式  true 当浏览器不支持css变量的时候将css变量编译为识别的css</span><br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【webpack】打包一个vue应用</title>
    <link href="/hexo-blog/2022/10/12/webpack-package/"/>
    <url>/hexo-blog/2022/10/12/webpack-package/</url>
    
    <content type="html"><![CDATA[<p>Tag: <code>学习</code> <code>webapck</code></p><p>打包一个vue应用最方便的还是使用官方提供的vue-cli应用，但是，从长远来说，这不利于我们自身的成长；<br>所以让我们暂时忘却vue-cli，基于webpack，从头一点一点去整合出一个webpack打包配置来；</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>打包一个vue应用，可本地运行调试，可打线上包</li></ul><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p><a href="http://webpack.wuhaolin.cn/">深入浅出webpack</a></p><p><a href="https://webpack.docschina.org/concepts/">webpack中文文档</a></p><h3 id="webpack核心概念"><a href="#webpack核心概念" class="headerlink" title="webpack核心概念"></a>webpack核心概念</h3><ul><li>Entry：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。</li><li>Module：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。</li><li>Chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。</li><li>Loader：模块转换器，用于把模块原内容按照需求转换成新内容。</li><li>Plugin：扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</li><li>Output：输出结果，在 Webpack 经过一系列处理并得出最终想要的代码后输出结果。</li></ul><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p><a href="https://nodejs.org/zh-cn/">node-v16.9.1</a><br><a href="https://cli.vuejs.org/zh/guide/installation.html">vue-cli(用于生成一个vue基本工程)</a></p><p>依赖版本相关<br>“webpack”: “^5.64.1”,<br>“webpack-cli”: “^4.9.1”,</p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><ul><li><p>开发语言 ( JS (ES5/ES6+) or TS )</p><p>使用ES6，借助Babel</p></li><li><p>css预处理器 ( Less (.less) | Sass (.scss/.sass) | Stylus(.stylus/.styl) | Postcss )</p><p>使用Less</p></li></ul><h3 id="一个空vue工程"><a href="#一个空vue工程" class="headerlink" title="一个空vue工程"></a>一个空vue工程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 验证cli是否安装成功</span><br>vue -V <span class="hljs-comment">// 3.5.1</span><br><br><span class="hljs-comment">// Mac/linux系统</span><br>vue create webpack-practice<br><span class="hljs-comment">// Windows系统</span><br>winpty vue.<span class="hljs-property">cmd</span> create webpack-practice<br><br><span class="hljs-comment">// 选择default(babel, eslint)</span><br>cd webpack-practice<br>npm run serve<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  DONE  Compiled successfully in 3542ms </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * App running at:</span><br><span class="hljs-comment">  - Local:   http://localhost:8080/ </span><br><span class="hljs-comment">  - Network: http://x.x.x.x:8080/</span><br><span class="hljs-comment">  Note that the development build is not optimized.</span><br><span class="hljs-comment">  To create a production build, run npm run build.</span><br><span class="hljs-comment"> * /</span><br><span class="hljs-comment">// 出现以上字样表示空工程已就绪</span><br></code></pre></td></tr></table></figure><p>一切准备就绪，下面开始进入正题</p><h2 id="基础依赖及配置"><a href="#基础依赖及配置" class="headerlink" title="基础依赖及配置"></a>基础依赖及配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i webpack webpack-cli -D<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// package.json - add npm script</span><br><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span>,<br>  <span class="hljs-string">&quot;serve:webpack&quot;</span>: <span class="hljs-string">&quot;webpack serve&quot;</span>,<br>  <span class="hljs-string">&quot;build:webpack&quot;</span>: <span class="hljs-string">&quot;webpack --mode production&quot;</span><br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 根目录 - ./webpack.config.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * webapck配置总入口</span><br><span class="hljs-comment"> * 将配置分成三份，common/dev/prod</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>);<br><span class="hljs-keyword">const</span> commonConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./build/webpack-common.config.js&#x27;</span>);<br><span class="hljs-keyword">const</span> developmentConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./build/webpack-dev.config.js&#x27;</span>);<br><span class="hljs-keyword">const</span> productionConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./build/webpack-prod.config.js&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">env, args</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (args.<span class="hljs-property">mode</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(commonConfig, productionConfig);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(commonConfig, developmentConfig);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// build目录 - ./build/webpack-common.config.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * webapck配置文档</span><br><span class="hljs-comment"> * docs: https://webpack.docschina.org/concepts/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span> (dir) &#123;<br>  <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;..&#x27;</span>, dir)<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 入口(entry)</span><br><span class="hljs-comment">   * 入口起点(entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</span><br><span class="hljs-comment">   * 默认值是 ./src/index.js</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/main.js&#x27;</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 输出(output)</span><br><span class="hljs-comment">   * output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;/dist&#x27;</span>), <span class="hljs-comment">// 需要绝对路径</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].js&#x27;</span>,<br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;/&#x27;</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// build目录 - ./build/webpack-dev.config.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开发环境webpack配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// build目录 - ./build/webpack-prod.config.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产环境webpack配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>至此webpack相关基本配置已完成</p><p>开始执行打包命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">npm run start<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * ERROR in ./src/App.vue 1:0</span><br><span class="hljs-comment">Module parse failed: Unexpected token (1:0)</span><br><span class="hljs-comment">You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders</span><br><span class="hljs-comment">&gt; &lt;template&gt;</span><br><span class="hljs-comment">|   &lt;div id=&quot;app&quot;&gt;</span><br><span class="hljs-comment">|     &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="hljs-comment"> @ ./src/main.js 2:0-27 7:17-20</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * /</span><br></code></pre></td></tr></table></figure><p>报错了，大概意思是.vue文件它不能识别，需要借助相关loader处理</p><h2 id="loader配置"><a href="#loader配置" class="headerlink" title="loader配置"></a>loader配置</h2><h3 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h3><p><a href="https://vue-loader.vuejs.org/zh/">vue-loader</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue-loader因为已经通过cli安装了，所以不需要再安装了</span><br><br><span class="hljs-comment">// ./build/webpack-common.config.js - 更新配置</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">VueLoaderPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vue-loader&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// ... 其它规则</span><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.vue$/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;vue-loader&#x27;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 请确保引入这个插件！</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueLoaderPlugin</span>()<br>  ]<br>&#125;<br><br><span class="hljs-comment">// 再次执行打包命令</span><br>npm run start<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * ERROR in ./src/App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp; (./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp;) 20:0</span><br><span class="hljs-comment">Module parse failed: Unexpected character &#x27;#&#x27; (20:0)</span><br><span class="hljs-comment">File was processed with these loaders:</span><br><span class="hljs-comment"> * ./node_modules/vue-loader/lib/index.js</span><br><span class="hljs-comment">You may need an additional loader to handle the result of these loaders.</span><br><span class="hljs-comment">| </span><br><span class="hljs-comment">| </span><br><span class="hljs-comment">&gt; #app &#123;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>又报错了，这次是识别不了图片和css样式，得，继续配置loader</p><h3 id="css-loader-url-loader"><a href="#css-loader-url-loader" class="headerlink" title="css-loader / url-loader"></a>css-loader / url-loader</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// css-loader因为已经通过cli安装了，所以不需要再安装了</span><br><br><span class="hljs-comment">// ./build/webpack-common.config.js - 更新配置</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// 其他loader</span><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;vue-style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.png$/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>      &#125;<br>    ]<br>  &#125;,<br>&#125;<br><br><span class="hljs-comment">// 再次执行打包命令</span><br>npm run start<br><br><span class="hljs-comment">// nice 打包成功</span><br></code></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li><p>css-loader 会找出 CSS 代码中的 @import 和 url() 这样的导入语句，告诉 Webpack 依赖这些资源。同时还支持 CSS Modules、压缩 CSS 等功能。处理完后再把结果交给 style-loader 去处理。</p></li><li><p>style-loader 会把 CSS 代码转换成字符串后，注入到 JavaScript 代码中去，通过 JavaScript 去给 DOM 增加样式。</p></li></ul><p>这里使用的vue-style-loader是fork了style-loader的源代码，对vue文件做了一些定制化处理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>熟悉并实践了一下webpack的基本配置</li><li>使用vue-loader加载.vue单文件</li><li>使用css-loader/vue-style-loader加载.css文件</li><li>使用url-loader加载图片资源文件</li></ul><p>其他未解决问题（后续再更新）：</p><ul><li>css预处理文件处理 ，比如less (less-loader)</li><li>ES6转ES5语法 (babel-loader)</li><li>本地运行一个服务并支持热更新 (wepack-dev-server)</li><li>字体等文件的加载 (url-loader)</li><li>视频等文件的加载 (url-loader)</li><li>其他实用的功能（比如vue支持jsx的写法）</li><li>线上打包的优化等等</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【Vue】vue2的mixins相关问题</title>
    <link href="/hexo-blog/2022/10/12/vue2-mixins/"/>
    <url>/hexo-blog/2022/10/12/vue2-mixins/</url>
    
    <content type="html"><![CDATA[<h2 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h2><p><a href="#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0">问题描述</a><br><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档</a><br><a href="#%E6%83%B3%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0%E8%A7%A3%E6%9E%90">问题描述解析</a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>vue2中，假设有一个组件A，其中mixins了文件B和C，那么请问：</p><ul><li><p>假设A的data中有一个myData的key，如果B和C中的data都有这个key，</p><ol><li>created生命周期中访问this.myData，输出哪个文件的值</li><li>如果把A组件内的myData这个key删掉，那么输出哪个文件的值</li></ol></li><li><p>假设A、B、C都定义了created这个生命周期函数</p><ol><li>生命周期函数是怎么执行的？</li><li>如果都执行，那么执行顺序是什么？</li><li>如果在C文件中在mixins引入B，这个时候生命周期怎么执行？</li></ol></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>如果对以上问题有疑惑，可以看看下面这篇文章，写的很清晰</p><p><a href="https://vue3js.cn/interview/vue/mixin.html">说说你对vue的mixin的理解，有什么应用场景？</a></p><h3 id="文档结论如下"><a href="#文档结论如下" class="headerlink" title="文档结论如下"></a>文档结论如下</h3><p>vue2中mixin有四种策略：</p><ol><li>替换型策略有props、methods、inject、computed，就是将新的同名参数替代旧的参数</li><li>合并型策略是data, 通过set方法进行合并和重新赋值</li><li>队列型策略有生命周期函数和watch，原理是将函数存入一个数组，然后正序遍历依次执行</li><li>叠加型有component、directives、filters，通过原型链进行层层的叠加</li></ol><h2 id="问题描述解析"><a href="#问题描述解析" class="headerlink" title="问题描述解析"></a>问题描述解析</h2><p>简单分析下, 问题描述中有这样三个对象：<br><code>componentA</code>, <code>mixinB</code>, <code>mixinC</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 对于data</span><br>componentA.<span class="hljs-property">data</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(mixinB.<span class="hljs-property">data</span>, mixinC.<span class="hljs-property">data</span>, componentA.<span class="hljs-property">data</span>);<br><br><span class="hljs-comment">// 2. 对于methods</span><br>componentA.<span class="hljs-property">methods</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;...mixinB.<span class="hljs-property">methods</span>&#125;, &#123;...mixinC.<span class="hljs-property">methods</span>&#125;, &#123;...componentA.<span class="hljs-property">methods</span>&#125;);<br><br><span class="hljs-comment">// 3. 对于生命周期，比如created</span><br>componentA.<span class="hljs-property">created</span> = <span class="hljs-function">() =&gt;</span> [mixinB.<span class="hljs-property">created</span>, mixinC.<span class="hljs-property">created</span>, componentA.<span class="hljs-property">created</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">created</span> =&gt;</span> <span class="hljs-title function_">created</span>());<br></code></pre></td></tr></table></figure><h3 id="问题描述解答"><a href="#问题描述解答" class="headerlink" title="问题描述解答"></a>问题描述解答</h3><p>vue2中，假设有一个组件A，其中mixins了文件B和C，那么请问：</p><ul><li><p>假设A的data中有一个myData的key，如果B和C中的data都有这个key，</p><ol><li>created生命周期中访问this.myData，输出哪个文件的值<br><code>输出当前组件的值</code></li><li>如果把A组件内的myData这个key删掉，那么输出哪个文件的值<br><code>输出mixins数组最尾部那个mixin文件中的值，比如mixins:[B, C]，那么输出的就是C文件中的值</code></li></ol></li><li><p>假设A、B、C都定义了created这个生命周期函数</p><ol><li>生命周期函数是怎么执行的？<br><code>全部都会执行，因为生命周期在mixin中会处理为队列，按顺序执行</code></li><li>如果都执行，那么执行顺序是什么？<br><code>组件本身A --&gt; mixin B --&gt; mixin C</code></li><li>如果在C文件中在mixins引入B，这个时候生命周期怎么执行？<br><code>组件本身A --&gt; mixin B --&gt; mixin C, mixin处理中做了去重</code></li></ol></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【Taro】从0到1开发前端面试刷题小程序</title>
    <link href="/hexo-blog/2022/10/12/taro-weapp-interview/"/>
    <url>/hexo-blog/2022/10/12/taro-weapp-interview/</url>
    
    <content type="html"><![CDATA[<h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="https://taro-docs.jd.com/taro/docs/">Taro介绍</a></p><p>Taro 是一个开放式跨端跨框架解决方案，支持使用 React/Vue/Nerv 等框架来开发 微信 / 京东 / 百度 / 支付宝 / 字节跳动 / QQ / 飞书 小程序 / H5 / RN 等应用。</p><p><a href="https://react.docschina.org/">React</a></p><p><a href="https://www.tslang.cn/docs/home.html">TypeScript</a></p><p><a href="https://taro-ui.jd.com/#/docs/introduction">Taro-UI</a></p><p>注意：<br>Taro 3 只能配合使用 taro-ui@next 版本<br>安装命令： <code>npm i taro-ui@next</code></p><h2 id="开发目的"><a href="#开发目的" class="headerlink" title="开发目的"></a>开发目的</h2><ul><li>实现一个前端面试刷题的小程序，可以刷题库进行知识点回顾以及查缺补漏，抽题考察进行知识点掌握训练；</li><li>熟悉下微信小程序的开发、部署、发布等流程</li><li>熟悉下技术栈<code>typescript+react-hooks+taro+taro-ui</code></li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><a href="https://taro-docs.jd.com/taro/docs/GETTING-STARTED">tarojs的安装及使用</a></p><p>  Taro 项目基于 node，请确保已具备较新的 node 环境（&gt;=12.0.0）</p><h3 id="CLI-工具安装"><a href="#CLI-工具安装" class="headerlink" title="CLI 工具安装"></a>CLI 工具安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 使用 npm 安装 CLI</span><br>$ npm install -g @tarojs/cli<br><br><span class="hljs-comment"># OR 使用 yarn 安装 CLI</span><br>$ yarn global add @tarojs/cli<br><br><span class="hljs-comment"># OR 安装了 cnpm，使用 cnpm 安装 CLI</span><br>$ cnpm install -g @tarojs/cli<br></code></pre></td></tr></table></figure><blockquote><p>值得一提的是，如果安装过程出现sass相关的安装错误，请在安装 mirror-config-china 后重试。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm install -g mirror-config-china<br></code></pre></td></tr></table></figure><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">taro init myApp<br></code></pre></td></tr></table></figure><p>npm 5.2+ 也可在不全局安装的情况下使用 npx 创建模板项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npx @tarojs/cli init myApp<br></code></pre></td></tr></table></figure><p>按自己的喜好选择对应的开发工具即可，比如使用react还是vue/vue3，是否使用TS，使用sass还是less等等；</p><p>一般来说，依赖安装会比较顺利，但某些情况下可能会安装失败，这时候你可以在项目目录下自己使用安装命令进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入项目根目录</span><br>$ <span class="hljs-built_in">cd</span> myApp<br><br><span class="hljs-comment"># 使用 yarn 安装依赖</span><br>$ yarn<br><br><span class="hljs-comment"># OR 使用 cnpm 安装依赖</span><br>$ cnpm install<br><br><span class="hljs-comment"># OR 使用 npm 安装依赖</span><br>$ npm install<br></code></pre></td></tr></table></figure><h3 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h3><p>以微信小程序为例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># yarn</span><br>$ yarn dev:weapp<br>$ yarn build:weapp<br><br><span class="hljs-comment"># npm script</span><br>$ npm run dev:weapp<br>$ npm run build:weapp<br></code></pre></td></tr></table></figure><h4 id="小程序开发者工具"><a href="#小程序开发者工具" class="headerlink" title="小程序开发者工具"></a>小程序开发者工具</h4><p>下载并打开<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信开发者工具</a>，然后选择项目根目录进行预览。</p><p>需要注意开发者工具的项目设置：</p><ul><li>需要设置关闭 ES6 转 ES5 功能，开启可能报错</li><li>需要设置关闭上传代码时样式自动补全，开启可能报错</li><li>需要设置关闭代码压缩上传，开启可能报错</li></ul><p>以上步骤全部完成，可在小程序开发者工具里面预览到一个hello  world的界面；</p><h3 id="小程序主流程简介"><a href="#小程序主流程简介" class="headerlink" title="小程序主流程简介"></a>小程序主流程简介</h3><p>参考了目前线上的一些前端面试题小程序，预计程序大概的流程如下：</p><ul><li>有三个底部tab：首页、题库、我的</li><li>首页会有banner和题型分类区块（CSS、js、vue、react、ts、设计模式等等）</li><li>题库就包含所有题型分类的总数据列表</li><li>题目详情页：题目列表各项可点击至跳转至题目详情页</li><li>我的页面会包含用户的基本信息展示，分享小程序、关于我们等一些介绍内容</li></ul><h4 id="小程序部分图示"><a href="#小程序部分图示" class="headerlink" title="小程序部分图示"></a>小程序部分图示</h4><p><img src="img/taro-weapp-interview/interview-index.png" alt="interview-index"><br><img src="img/taro-weapp-interview/interview-subject.png" alt="interview-subject"><br><img src="img/taro-weapp-interview/interview-my.png" alt="interview-my"><br><img src="img/taro-weapp-interview/interview-subject-list.png" alt="interview-subject-list"><br><img src="img/taro-weapp-interview/interview-subject-detail.png" alt="interview-subject-detail"></p><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 主要代码结构</span><br><span class="hljs-attribute">src</span><br>    -components<br>      <span class="hljs-attr">--SubjectItem</span> <span class="hljs-comment">// 题目展示组件</span><br>      <span class="hljs-attr">--TabBar</span> <span class="hljs-comment">// 底部tab组件</span><br>    -pages<br>      <span class="hljs-attr">--index</span> <span class="hljs-comment">// 首页</span><br>      <span class="hljs-attr">--my</span> <span class="hljs-comment">// 我的</span><br>      <span class="hljs-attr">--subject</span> <span class="hljs-comment">// 题库</span><br>      <span class="hljs-attr">--subjectDetail</span> <span class="hljs-comment">// 课程详情页</span><br>      <span class="hljs-attr">--subjectList</span> <span class="hljs-comment">// 课程列表页</span><br>app<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.ts</span> <span class="hljs-comment">// pages信息配置</span><br></code></pre></td></tr></table></figure><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p>UI库选择taro-ui，Taro 3 只能配合使用 taro-ui@next 版本<br>安装命令： <code>npm i taro-ui@next</code></p><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><ul><li>使用taro-ui的AtGrid完成分类组件块的UI</li><li>点击分类项跳转（Taro.navigateTo）题目列表页面</li><li>封装底部tabBar组件，题库和我的页签会用到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/pages/index/index.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">FC</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">View</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AtGrid</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;taro-ui&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Taro</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/taro&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TabBar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../components/TabBar/index&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.scss&#x27;</span><br><span class="hljs-keyword">import</span> &#123; classifyList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data/classifyList&#x27;</span>;<br><br>type <span class="hljs-title class_">GridItemData</span> = &#123;<br>  <span class="hljs-attr">image</span>: string;<br>  <span class="hljs-attr">value</span>: string;<br>  tag?: string;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">gridClick</span> = (<span class="hljs-params">item: GridItemData, index: number</span>) =&gt; &#123; <br>  <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">navigateTo</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">`/pages/subjectList/index?tag=<span class="hljs-subst">$&#123;item.tag&#125;</span>`</span><br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Index</span>: <span class="hljs-variable constant_">FC</span> = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123; <br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AtGrid</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;classifyList&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;gridClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TabBar</span> <span class="hljs-attr">current</span>=<span class="hljs-string">&#123;0&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Index</span>;<br><br><span class="hljs-comment">// src/app.config.ts</span><br><span class="hljs-attr">pages</span>: [<br>  <span class="hljs-string">&#x27;pages/index/index&#x27;</span>, <span class="hljs-comment">// 首页</span><br>  ...<br>],<br></code></pre></td></tr></table></figure><h4 id="题目列表"><a href="#题目列表" class="headerlink" title="题目列表"></a>题目列表</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【实用功能】请求队列</title>
    <link href="/hexo-blog/2022/10/12/request-queue/"/>
    <url>/hexo-blog/2022/10/12/request-queue/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  某些页面的首屏请求会比较多，比如超过20多个，如果用户量大的情况下，会给服务器带来极大的压力，为了优化这种情况，服务端的开发同事建议前端能不能限制一下同时请求的数量，比如保持并行请求数量最大为6，当并发中的某个请求完成，执行请求队列的中的队头的请求，直到所有请求完成。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="请求队列类"><a href="#请求队列类" class="headerlink" title="请求队列类"></a>请求队列类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求队列类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestQueue</span> &#123; <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@params</span> &#123;<span class="hljs-type">Array</span>&#125; <span class="hljs-variable">requestList</span> - 请求队列，先进先出</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@params</span> &#123;<span class="hljs-type">Number</span>&#125; <span class="hljs-variable">requestLimit</span> - 最大请求并发数，默认为6</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">requestList  = [], requestLimit = <span class="hljs-number">6</span></span>) &#123; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestList</span> = requestList;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span> = requestLimit;<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 执行请求的方法</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestList</span>.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">const</span> requestTask = <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestList</span>.<span class="hljs-title function_">shift</span>();<br>      <span class="hljs-title function_">requestTask</span>()<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">time</span> =&gt;</span> &#123; <br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;response success &lt;-- request duration:&#x27;</span>, time);<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123; <br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>        &#125;)<br>        .<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span>++;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">run</span>();<br>        &#125;);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span>--;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构建请求函数"><a href="#构建请求函数" class="headerlink" title="构建请求函数"></a>构建请求函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createRequest</span>(<span class="hljs-params">time</span>) &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 这里简单解释下为什么包一层function</span><br><span class="hljs-comment">   * 如果不包function的话，放到队列中请求就已经执行了</span><br><span class="hljs-comment">   * 达不到想要的效果</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;start request --&gt; response time:&#x27;</span>, time);<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; <br>          <span class="hljs-title function_">resolve</span>(time);<br>        &#125;, time)<br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123; <br>        <span class="hljs-title function_">reject</span>(error);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> requestTimeList = [<br>  <span class="hljs-number">1000</span>, <span class="hljs-number">2500</span>, <span class="hljs-number">3000</span>,<br>  <span class="hljs-number">1500</span>, <span class="hljs-number">3500</span>, <span class="hljs-number">2000</span>,<br>  <span class="hljs-number">1200</span>, <span class="hljs-number">4000</span>, <span class="hljs-number">800</span>,<br>  <span class="hljs-number">500</span>, <span class="hljs-number">600</span>, <span class="hljs-number">1400</span>,<br>  <span class="hljs-number">1600</span>, <span class="hljs-number">2400</span>, <span class="hljs-number">2200</span><br>];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createRequest</span>(<span class="hljs-params">time</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;start request --&gt; response time:&#x27;</span>, time);<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; <br>          <span class="hljs-title function_">resolve</span>(time);<br>        &#125;, time)<br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123; <br>        <span class="hljs-title function_">reject</span>(error);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> requestQueueList = requestTimeList.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-title function_">createRequest</span>(item));<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestQueue</span> &#123; <br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">requestList  = [], requestLimit = <span class="hljs-number">6</span></span>) &#123; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestList</span> = requestList;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span> = requestLimit;<br>  &#125;<br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestList</span>.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">const</span> requestTask = <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestList</span>.<span class="hljs-title function_">shift</span>();<br>      <span class="hljs-title function_">requestTask</span>()<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">time</span> =&gt;</span> &#123; <br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;response success &lt;-- request duration:&#x27;</span>, time);<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123; <br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>        &#125;)<br>        .<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span>++;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">run</span>();<br>        &#125;);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">requestLimit</span>--;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> requestQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestQueue</span>(requestQueueList, <span class="hljs-number">6</span>);<br>requestQueue.<span class="hljs-title function_">run</span>();<br><br><span class="hljs-comment">// 输出示例</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">// 首次执行run函数，发出6个并发请求</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 1000</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 2500</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 3000</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 1500</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 3500</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 2000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 上述6个请求中，1000最短，所以最先返回结果</span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 1000</span><br><span class="hljs-comment">// 并发数少一个，立马执行未执行队列中的新的请求</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 1200</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 1500</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 4000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 2000</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 800</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 1200</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 500</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 2500</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 600</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 500</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 1400</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 800</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 1600</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 3000</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 2400</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 600</span><br><span class="hljs-comment">VM36:11 start request --&gt; response time: 2200</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 3500</span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 1400</span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 1600</span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 2200</span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 2400</span><br><span class="hljs-comment">VM36:34 response success &lt;-- request duration: 4000</span><br><span class="hljs-comment">**/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【实现API】数组reduce方法的实现</title>
    <link href="/hexo-blog/2022/10/12/reduce/"/>
    <url>/hexo-blog/2022/10/12/reduce/</url>
    
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">MDN-Array.prototype.reduce</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>reduce() 方法对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</p><p>第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为 0 的元素开始执行，则需要传递初始值。否则，数组索引为 0 的元素将被作为初始值 initialValue，迭代器将从第二个元素开始执行（索引为 1 而不是 0）。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><br><span class="hljs-comment">// 0 + 1 + 2 + 3 + 4</span><br><span class="hljs-keyword">const</span> initialValue = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> sumWithInitial = array1.<span class="hljs-title function_">reduce</span>(<br>  <span class="hljs-function">(<span class="hljs-params">previousValue, currentValue</span>) =&gt;</span> previousValue + currentValue,<br>  initialValue<br>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sumWithInitial);<br><span class="hljs-comment">// expected output: 10</span><br></code></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">reduceFn</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">reducer<span class="hljs-comment">/*, initValue*/</span></span>) &#123;<br>  <span class="hljs-comment">// reducer必须是一个函数</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> reducer !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;reducer&#125;</span> is not a function.`</span>);<br>  &#125;<br>  <span class="hljs-comment">// 是否包含初始值</span><br>  <span class="hljs-keyword">const</span> hasInitValue = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// 当前遍历的数组</span><br>  <span class="hljs-keyword">const</span> array = <span class="hljs-title class_">Object</span>(<span class="hljs-variable language_">this</span>);<br>  <span class="hljs-keyword">const</span> length = array.<span class="hljs-property">length</span>;<br>  <span class="hljs-comment">// 数组长度要大于0或包含初始值</span><br>  <span class="hljs-keyword">if</span> (length === <span class="hljs-number">0</span> &amp;&amp; !hasInitValue) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Reduce of empty array with no initial value&#x27;</span>);<br>  &#125;<br>  <span class="hljs-comment">// 上一次调用 reducer 时的返回值, 此处为初始值赋值</span><br>  <span class="hljs-keyword">let</span> previousValue = hasInitValue ? <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>] : array[<span class="hljs-number">0</span>];<br>  <span class="hljs-comment">// 数组中正在处理的元素的索引</span><br>  <span class="hljs-keyword">let</span> currentIndex = hasInitValue ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (currentIndex &lt; length) &#123;<br>    previousValue = <span class="hljs-title function_">reducer</span>(previousValue, array[currentIndex], currentIndex, array);<br>    currentIndex ++;<br>  &#125;<br>  <span class="hljs-keyword">return</span> previousValue;<br>&#125;;<br><br><span class="hljs-comment">// test</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">reduceFn</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> prev + cur); <span class="hljs-comment">// 15</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">reduceFn</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> prev + cur, <span class="hljs-number">10</span>); <span class="hljs-comment">// 25</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【vue】Vue面试题</title>
    <link href="/hexo-blog/2022/10/12/interview-vue/"/>
    <url>/hexo-blog/2022/10/12/interview-vue/</url>
    
    <content type="html"><![CDATA[<h2 id="历史题目"><a href="#历史题目" class="headerlink" title="历史题目"></a>历史题目</h2><p><a href="#vue">vue</a> | <a href="#vue-cli">vue-cli</a> | <a href="#vue-router">vue-router</a> | <a href="#vuex">vuex</a>  | <a href="#ElementUI">ElementUI</a> | <a href="#ElementUI">ElementUI</a> | <a href="#mint-ui">mint-ui</a></p><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/983">从0到1自己构架一个vue项目，说说有哪些步骤、哪些重要插件、目录结构你会怎么组织</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/561">你知道vue的模板语法用的是哪个web模板引擎的吗？说说你对这模板引擎的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/560">你知道v-model的原理吗？说说看</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/559">你有使用过vue开发多语言项目吗？说说你的做法？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/558">在使用计算属性的时，函数名和data数据源中的数据可以同名吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/557">vue中data的属性可以和methods中的方法同名吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/556">怎么给vue定义全局的方法？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/555">vue2.0不再支持v-html中使用过滤器了怎么办？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/554">怎么解决vue打包后静态资源图片失效的问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/553">怎么解决vue动态设置img的src不生效的问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/552">使用vue后怎么针对搜索引擎做SEO优化？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/551">跟keep-alive有关的生命周期是哪些？描述下这些生命周期</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/550">如果现在让你从vue/react/angularjs三个中选择一个，你会选哪个？说说你的理由</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/549">你知道vue2.0兼容IE哪个版本以上吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/548">使用vue开发一个todo小应用，谈下你的思路</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/547">你有看过vue推荐的风格指南吗？列举出你知道的几条</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/546">你是从vue哪个版本开始用的？你知道1.x和2.x有什么区别吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/545">你知道vue中key的原理吗？说说你对它的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/544">vue中怎么重置data？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/508">vue渲染模板时怎么保留模板中的HTML注释呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/507">Vue.observable你有了解过吗？说说看</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/506">你知道style加scoped属性的用途和原理吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/489">你期待vue3.0有什么功能或者改进的地方？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/478">vue边界情况有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/477">如何在子组件中访问父组件的实例？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/476">watch的属性用箭头函数定义结果会怎么样？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/475">在vue项目中如果methods的方法用箭头函数定义结果会怎么样？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/474">在vue项目中如何配置favicon？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/473">你有使用过babel-polyfill模块吗？主要是用来做什么的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/472">说说你对vue的错误处理的了解？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/471">在vue事件中传入$event，使用e.target和e.currentTarget有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/470">在.vue文件中style是必须的吗？那script是必须的吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/469">vue怎么实现强制刷新组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/468">vue自定义事件中父组件怎么接收子组件的多个参数？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/467">实际工作中，你总结的vue最佳实践有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/466">vue给组件绑定自定义事件无效怎么解决？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/465">vue的属性名称与method的方法名称一样时会发生什么问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/464">vue变量名如果以_、$开头的属性会发生什么问题？怎么访问到它们的值？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/463">vue使用v-for遍历对象时，是按什么顺序遍历的？如何保证顺序？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/462">vue如果想扩展某个现有的组件时，怎么做呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/461">说下$attrs和$listeners的使用场景</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/460">分析下vue项目本地开发完成后部署到服务器后报404是什么原因呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/459">v-once的使用场景有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/458">说说你对vue的表单修饰符.lazy的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/457">vue为什么要求组件模板只能有一个根元素？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/456">EventBus注册在全局上时，路由切换时会重复触发事件，如何解决呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/455">怎么修改vue打包后生成文件路径？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/454">你有使用做过vue与原生app交互吗？说说vue与ap交互的方法</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/453">使用vue写一个tab切换</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/452">vue中什么是递归组件？举个例子说明下？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/451">怎么访问到子组件的实例或者子元素？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/450">在子组件中怎么访问到父组件的实例？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/449">在组件中怎么访问到根实例？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/448">说说你对Object.defineProperty的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/447">vue组件里写的原生addEventListeners监听事件，要手动去销毁吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/446">vue组件里的定时器要怎么销毁？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/445">vue组件会在什么时候下被销毁？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/444">使用vue渲染大量数据时应该怎么优化？说下你的思路！</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/443">在vue中使用this应该注意哪些问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/442">你有使用过JSX吗？说说你对JSX的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/441">说说组件的命名规范</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/440">怎么配置使vue2.0+支持TypeScript写法？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/439"><code>&lt;template&gt;&lt;/template&gt;</code>有什么用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/438">vue的is这个特性你有用过吗？主要用在哪些方面？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/437">vue的:class和:style有几种表示方式？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/436">你了解什么是函数式组件吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/435">vue怎么改变插入模板的分隔符？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/434">组件中写name选项有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/433">说说你对provide和inject的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/432">开发过程中有使用过devtools吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/431">说说你对slot的理解有多少？slot使用场景有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/430">你有使用过动态组件吗？说说你对它的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/429">prop验证的type类型有哪几种？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/428">prop是怎么做验证的？可以设置默认值吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/427">怎么缓存当前打开的路由组件，缓存后想更新当前组件怎么办呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/426">说说你对vue组件的设计原则的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/425">你了解vue的diff算法吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/424">vue如何优化首页的加载速度？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/423">vue打包成最终的文件有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/422">ajax、fetch、axios这三都有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/421">vue能监听到数组变化的方法有哪些？为什么这些方法能监听到呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/420">vue中是如何使用event对象的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/366">vue首页白屏是什么问题引起的？如何解决呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/365">说说你对单向数据流和双向数据流的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/364">移动端ui你用的是哪个ui库？有遇到过什么问题吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/363">你知道nextTick的原理吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/362">说说你对v-clock和v-pre指令的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/361">写出你知道的表单修饰符和事件修饰符</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/359">说说你对proxy的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/358">你有自己用vue写过UI组件库吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/357">用vue怎么实现一个换肤的功能？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/356">有在vue中使用过echarts吗？踩过哪些坑？如何解决的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/355">如果让你教一个2-3年经验前端经验的同事使用vue，你该怎么教？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/354">vue性能的优化的方法有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/353">SSR解决了什么问题？有做过SSR吗？你是怎么做的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/352">说说你觉得认为的vue开发规范有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/350">vue部署上线前需要做哪些准备工作？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/349">vue过渡动画实现的方式有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/348">vue在created和mounted这两个生命周期中请求数据有什么区别呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/347">vue父子组件双向绑定的方法有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/346">vue怎么获取DOM节点？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/345">vue项目有做过单元测试吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/344">vue项目有使用过npm run build –report吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/343">如何解决vue打包vendor过大的问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/342">webpack打包vue速度太慢怎么办？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/341">vue在开发过程中要同时跟N个不同的后端人员联调接口（请求的url不一样）时你该怎么办？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/340">vue要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/339">说下你的vue项目的目录结构，如果是大型项目你该怎么划分结构和划分组件呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/338">在移动端使用vue，你觉得最佳实践有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/337">你们项目为什么会选vue而不选择其它的框架呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/336">对于即将到来的vue3.0特性你有什么了解的吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/335">vue开发过程中你有使用什么辅助工具吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/334">vue和微信小程序写法上有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/333">怎么缓存当前的组件？缓存后怎么更新？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/332">你了解什么是高阶组件吗？可否举个例子说明下？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/331">为什么我们写组件的时候可以写在.vue里呢？可以是别的文件名后缀吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/330">vue-loader是什么？它有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/329">说说你对vue的extend（构造器）的理解，它主要是用来做什么的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/328">如果将axios异步请求同步化处理？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/327">怎么捕获组件vue的错误信息？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/326">为什么vue使用异步更新组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/325">如何实现一个虚拟DOM？说说你的思路</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/324">写出多种定义组件模板的方法</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/323">SPA单页面的实现方式有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/322">说说你对SPA单页面的理解，它的优缺点分别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/321">说说你都用vue做过哪些类型的项目？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/320">在vue项目中如何引入第三方库（比如jQuery）？有哪些方法可以做到？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/319">使用vue手写一个过滤器</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/318">你有使用过render函数吗？有什么好处？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/317">写出你常用的指令有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/316">手写一个自定义指令及写出如何调用</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/315">组件进来请求接口时你是放在哪个生命周期？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/314">你有用过事件总线(EventBus)吗？说说你的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/313">说说vue的优缺点分别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/312">DOM渲染在哪个周期中就已经完成了？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/311">第一次加载页面时会触发哪几个钩子？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/310">vue生命周期总共有几个阶段？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/309">vue生命周期的作用是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/308">vue和angular有什么区别呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/307">如何引入scss？引入后如何使用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/306">使用vue开发过程你是怎么做接口管理的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/305">为何官方推荐使用axios而不用vue-resource？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/304">你了解axios的原理吗？有看过它的源码吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/303">你有封装过axios吗？主要是封装哪方面的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/302">如何中断axios的请求？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/301">axios是什么？怎样使用它？怎么解决跨域的问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/292">说说你对vue的template编译的理解？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/291">v-on可以绑定多个方法吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/290">vue常用的修饰符有哪些？列举并说明</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/289">你认为vue的核心是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/288">v-model是什么？有什么用呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/287">说说你对vue的mixin的理解，有什么应用场景？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/286">SPA首屏加载速度慢的怎么解决？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/285">删除数组用delete和Vue.delete有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/284">动态给vue的data添加一个新的属性时会发生什么？怎样解决？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/283">组件和插件有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/274">说说你使用vue过程中遇到的问题（坑）有哪些，你是怎么解决的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/273">说说你对选项el,template,render的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/272">vue实例挂载的过程是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/271">vue在组件中引入插件的方法有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/270">v-if和v-for的优先级是什么？如果这两个同时出现时，那应该怎么优化才能得到更好的性能？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/269">分别说说vue能监听到数组或对象变化的场景，还有哪些场景是监听不到的？无法监听时有什么解决方案？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/268">$nextTick有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/267">为什么data属性必须声明为返回一个初始数据对应的函数呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/266">怎么在watch监听开始之后立即被调用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/265">watch怎么深度监听对象变化？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/264">watch和计算属性有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/263">vue如何监听键盘事件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/262">v-for循环中key有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/261">怎么在vue中使用插件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/260">你有写过自定义组件吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/259">说说你对keep-alive的理解是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/258">怎么使css样式只在当前组件中生效？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/235">你有看过vue的源码吗？如果有那就说说看</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/234">你有写过自定义指令吗？自定义指令的生命周期（钩子函数）有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/232">v-show和v-if有什么区别？使用场景分别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/231">说说你对MVC、MVP、MVVM模式的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/230">说下你对指令的理解？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/229">请描述下vue的生命周期是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/228">vue组件之间的通信都有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/227">什么是虚拟DOM？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/226">什么是双向绑定？原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/225">vue和react有什么不同？使用场景是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/224">说说vue的优缺点</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/223">有使用过vue吗？说说你对vue的理解</a></li></ul><h3 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/543">vue-cli提供了的哪几种脚手架模板？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/542">vue-cli工程中常用的npm命令有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/541">在使用vue-cli开发vue项目时，自动刷新页面的原理你了解吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/540">vue-cli3插件有写过吗？怎么写一个代码生成插件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/488">vue-cli生成的项目可以使用es6、es7的语法吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/487">vue-cli怎么解决跨域的问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/486">vue-cli中你经常的加载器有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/485">你知道什么是脚手架吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/484">说下你了解的vue-cli原理？你可以自己实现个类vue-cli吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/483">怎么使用vue-cli3创建一个项目？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/482">vue-cli3你有使用过吗？它和2.x版本有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/360">vue-cli默认是单页面的，那要弄成多页面该怎么办呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/351">不用vue-cli，你自己有搭建过vue的开发环境吗？流程是什么？</a></li></ul><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/419">vue-router怎么重定向页面？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/418">vue-router怎么配置404页面？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/417">切换路由时，需要保存草稿的功能，怎么实现呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/416">vue-router路由有几种模式？说说它们的区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/415">vue-router有哪几种导航钩子（ 导航守卫 ）？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/414">说说你对router-link的了解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/383">vue-router如何响应路由参数的变化？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/382">你有看过vue-router的源码吗？说说看</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/381">切换到新路由时，页面要滚动到顶部或保持原先的滚动位置怎么做呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/380">在什么场景下会用到嵌套路由？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/379">如何获取路由传过来的参数？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/378">说说active-class是哪个组件的属性？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/377">在vue组件中怎么获取到当前的路由信息？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/376">vur-router怎么重定向？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/375">怎样动态加载路由？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/374">怎么实现路由懒加载呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/373">如果让你从零开始写一个vue路由，说说你的思路</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/372">说说vue-router完整的导航解析流程是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/371">路由之间是怎么跳转的？有哪些方式？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/370">如果vue-router使用history模式，部署时要注意什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/369">route和router有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/368">vue-router钩子函数有哪些？都有哪些参数？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/367">vue-router是用来做什么的？它有哪些组件？</a></li></ul><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/539">你有写过vuex中store的插件吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/538">你有使用过vuex的module吗？主要是在什么场景下使用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/537">vuex中actions和mutations有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/413">vuex使用actions时不支持多参数传递怎么办？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/412">你觉得vuex有什么缺点？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/411">你觉得要是不用vuex的话会带来哪些问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/393">vuex怎么知道state是通过mutation修改还是外部直接修改的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/392">请求数据是写在组件的methods中还是在vuex的action中？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/391">怎么监听vuex数据的变化？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/390">vuex的action和mutation的特性是什么？有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/389">页面刷新后vuex的state数据丢失怎么解决？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/388">vuex的state、getter、mutation、action、module特性分别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/387">vuex的store有几个属性值？分别讲讲它们的作用是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/386">你理解的vuex是什么呢？哪些场景会用到？不用会有问题吗？有哪些特性？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/385">使用vuex的优势是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/384">有用过vuex吗？它主要解决的是什么问题？推荐在哪些场景用？</a></li></ul><h3 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/402">ElementUI是怎么做表单验证的？在循环里对每个input验证怎么做呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/401">你有二次封装过ElementUI组件吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/400">ElementUI怎么修改组件的默认样式？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/399">ElementUI的穿梭组件如果数据量大会变卡怎么解决不卡的问题呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/398">ElementUI表格组件如何实现动态表头？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/397">ElementUI使用表格组件时有遇到过问题吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/396">有阅读过ElementUI的源码吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/395">项目中有使用过ElementUI吗？有遇到过哪些问题？它的使用场景主要是哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/394">有用过哪些vue的ui？说说它们的优缺点？</a></li></ul><h3 id="mint-ui"><a href="#mint-ui" class="headerlink" title="mint-ui"></a>mint-ui</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/481">mint-ui使用过程中有没有遇到什么坑？怎么解决的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/480">说出几个mint-ui常用的组件</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/479">mint-ui是什么？你有使用过吗？</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【react】React面试题</title>
    <link href="/hexo-blog/2022/10/12/interview-react/"/>
    <url>/hexo-blog/2022/10/12/interview-react/</url>
    
    <content type="html"><![CDATA[<h2 id="历史题目"><a href="#历史题目" class="headerlink" title="历史题目"></a>历史题目</h2><p><a href="#React">React</a> | <a href="#ReactNative">ReactNative</a> | <a href="#React-Router">React-Router</a> | <a href="#Redux/Mobx">Redux/Mobx</a> | <a href="#Flux">Flux</a></p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/953">什么时候使用状态管理器？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/952">render函数中return如果没有使用()会有什么问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/951">componentWillUpdate可以直接修改state的值吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/950">说说你对React的渲染原理的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/949">什么渲染劫持？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/948">React Intl是什么原理？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/947">你有使用过React Intl吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/946">怎么实现React组件的国际化呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/945">说说Context有哪些属性？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/944">怎么使用Context开发组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/943">为什么React并不推荐我们优先考虑使用Context？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/942">除了实例的属性可以获取Context外哪些地方还能直接获取Context呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/941">childContextTypes是什么？它有什么用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/940">contextType是什么？它有什么用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/939">Consumer向上找不到Provider的时候怎么办？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/938">有使用过Consumer吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/937">在React怎么使用Context？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/936">React15和16别支持IE几以上？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/935">说说你对windowing的了解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/934">举例说明React的插槽有哪些运用场景？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/933">你有用过React的插槽(Portals)吗？怎么用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/932">React的严格模式有什么用处？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/931">React如何进行代码拆分？拆分的原则是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/930">React组件的构造函数有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/929">React组件的构造函数是必须的吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/928">React中在哪捕获错误？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/927">React怎样引入svg的文件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/926">说说你对Relay的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/925">在React中你有经常使用常量吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/924">为什么说React中的props是只读的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/923">你有使用过formik库吗？说说它的优缺点</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/901">你有用过哪些React的表单库吗？说说它们的优缺点</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/900">如果组件的属性没有传值，那么它的默认值是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/899">可以使用TypeScript写React应用吗？怎么操作？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/898"><code>super()</code>和<code>super(props)</code>有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/897">你有使用过loadable组件吗？它帮我们解决了什么问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/896">你有使用过suspense组件吗？它帮我们解决了什么问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/895">怎样动态导入组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/894">如何给非控组件设置默认的值？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/893">怎么在React中引入其它的UI库，例如Bootstrap</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/892">怎样将事件传递给子组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/891">怎样使用Hooks获取服务端数据？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/890">使用Hooks要遵守哪些原则？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/889">render方法的原理你有了解吗？它返回的数据类型是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/888">useEffect和useLayoutEffect有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/887">在React项目中你用过哪些动画的包？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/886">React必须使用JSX吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/885">自定义组件时render是可选的吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/884">需要把keys设置为全局唯一吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/883">怎么定时更新一个组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/882">React根据不同的环境打包不同的域名？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/881">使用webpack打包React项目，怎么减小生成的js大小？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/880">在React中怎么使用async/await？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/879">你阅读了几遍React的源码？都有哪些收获？你是怎么阅读的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/878">什么是React.forwardRef？它有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/877">写个例子说明什么是JSX的内联条件渲染</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/876">在React中怎么将参数传递给事件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/875">React的事件和普通的HTML事件有什么不同？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/874">在React中怎么阻止事件的默认行为？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/873">你最喜欢React的哪一个特性（说一个就好）？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/872">在React中什么时候使用箭头函数更方便呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/871">你最不喜欢React的哪一个特性（说一个就好）？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/870">说说你对React的reconciliation（一致化算法）的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/869">使用PropTypes和Flow有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/868">怎样有条件地渲染组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/867">在JSX中如何写注释？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/866">constructor和getInitialState有不同？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/865">写例子说明React如何在JSX中实现for循环</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/864">为什么建议Fragment包裹元素？它的简写是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/863">你有用过React.Fragment吗？说说它有什么用途？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/862">在React中你有遇到过安全问题吗？怎么解决？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/861">React中如何监听state的变化？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/860">React什么是有状态组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/859">React v15中怎么处理错误边界？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/858">React Fiber它的目的是解决什么问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/857">React为什么不要直接修改state？如果想修改怎么做？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/856">create-react-app有什么好处？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/855">装饰器(Decorator)在React中有什么应用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/854">使用高阶组件(HOC)实现一个loading组件</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/853">如何用React实现滚动动画？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/852">说出几点你认为的React最佳实践</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/851">你是如何划分React组件的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/850">举例说明如何在React创建一个事件</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/849">如何更新组件的状态？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/848">怎样将多个组件嵌入到一个组件中？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/847">React的render中可以写{if else}这样的判断吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/846">React为什么要搞一个Hooks？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/845">React Hooks帮我们解决了哪些问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/844">使用React的memo和forwardRef包装的组件为什么提示children类型不对？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/843">有在项目中使用过Antd吗？说说它的好处</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/842">在React中如果去除生产环境上的sourcemap？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/841">在React中怎么引用sass或less？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/840">组件卸载前，加在DOM元素的监听事件和定时器要不要手动清除？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/839">为什么标签里的for要写成htmlFor呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/838">状态管理器解决了什么问题？什么时候用状态管理器？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/837">状态管理器它精髓是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/836">函数式组件有没有生命周期？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/835">在React中怎么引用第三方插件？比如说jQuery等</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/834">React的触摸事件有哪几种？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/833">路由切换时同一组件无法重新渲染的有什么方法可以解决？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/832">React16新特性有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/831">你有用过哪些React的UI库？它们的优缺点分别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/830"><code>&lt;div onClick=&#123;handlerClick&#125;&gt;单击&lt;/div&gt;</code>和<code>&lt;div onClick=&#123;handlerClick(1)&#125;&gt;单击&lt;/div&gt;</code>有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/829">在React中如何引入图片？哪种方式更好？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/828">在React中怎么使用字体图标？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/827">React的应用如何打包发布？它的步骤是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/826">ES6的语法’…’在React中有哪些应用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/825">如何封装一个React的全局公共组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/824">在React中组件的props改变时更新组件的有哪些方法？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/823">immutable的原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/822">你对immutable有了解吗？它有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/821">如何提高组件的渲染效率呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/820">在React中如何避免不必要的render？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/819">render在什么时候会被触发？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/818">写出React动态改变class切换组件样式</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/817">React中怎么操作虚拟DOM的Class属性？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/816">为什么属性使用className而不是class呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/815">请说下react组件更新的机制是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/814">怎么在JSX里属性可以被覆盖吗？覆盖的原则是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/813">怎么在JSX里使用自定义属性？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/812">怎么防止HTML被转义？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/811">经常用React，你知道React的核心思想是什么吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/810">在React中我们怎么做静态类型检测？都有哪些方法可以做到？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/809">在React中组件的state和setState有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/808">React怎样跳过重新渲染？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/807">React怎么判断什么时候重新渲染组件呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/806">什么是React的实例？函数式组件有没有实例？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/805">在React中如何判断点击元素属于哪一个组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/804">在React中组件和元素有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/803">在React中声明组件时组件名的第一个字母必须是大写吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/802">举例说明什么是高阶组件(HOC)的反向继承？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/801">有用过React Devtools吗？说说它的优缺点分别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/800">举例说明什么是高阶组件(HOC)的属性代理？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/799">React的isMounted有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/798">React组件命名推荐的方式是哪个？为什么不推荐使用displayName？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/797">React的displayName有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/796">说说你对React的组件命名规范的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/795">说说你对React的项目结构的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/794">React16废弃了哪些生命周期？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/793">怎样在React中开启生产模式？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/792">React中getInitialState方法的作用是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/791">React中你知道creatClass的原理吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/790">React中验证props的目的是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/789">React中你有使用过getDefaultProps吗？它有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/788">React中你有使用过propType吗？它有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/787">React中怎么检验props？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/786">React.createClass和extends Component的区别有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/785">高阶组件(HOC)有哪些优点和缺点？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/784">给组件设置很多属性时不想一个个去设置有什么办法可以解决这问题呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/756">React16跟之前的版本生命周期有哪些变化？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/755">怎样实现React组件的记忆？原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/754">创建React动画有哪些方式？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/753">为什么建议不要过渡使用Refs？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/752">在React使用高阶组件(HOC)有遇到过哪些问题？如何解决？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/751">在使用React过程中什么时候用高阶组件(HOC)？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/724">说说React diff的原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/723">React怎么提高列表渲染的性能？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/722">使用ES6的class定义的组件不支持mixins了，那用什么可以替代呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/720">为何说虚拟DOM会提高性能？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/719">React的性能优化在哪个生命周期？它优化的原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/718">你知道的React性能优化有哪些方法？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/717">举例说明在React中怎么使用样式？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/716">React有哪几种方法来处理表单输入？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/715">什么是浅层渲染？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/714">你有做过React的单元测试吗？如果有，用的是哪些工具？怎么做的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/713">在React中什么是合成事件？有什么用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/712">使用React写一个todo应用，说说你的思路</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/711">React16的reconciliation和commit分别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/710">React的函数式组件有没有生命周期？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/709">useState和this.state的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/708">请说说什么是useImperativeHandle？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/707">请说说什么是useReducer？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/706">请说说什么是useRef？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/705">请说说什么是useEffect？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/704">举例说明useState</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/703">请说说什么是useState？为什么要使用useState？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/702">请描述下你对React的新特性Hooks的理解？它有哪些应用场景？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/701">说说你对Error Boundaries的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/700">说说你对Fiber架构的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/699">说说你是怎么理解React的业务组件和技术组件的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/698">为什么建议setState的第一个参数是callback而不是一个对象呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/697">展示组件和容器组件有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/696">Mern和Yeoman脚手架有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/695">你有在项目中使用过Yeoman脚手架吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/694">你有在项目中使用过Mern脚手架吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/693">shouldComponentUpdate方法是做什么的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/692">怎样在React中使用innerHTML？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/691">你有写过React的中间件插件吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/690">React的中间件机制是怎么样的？这种机制有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/689">React中你用过哪些第三方的中间件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/688">不用脚手架，你会手动搭建React项目吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/687">请说说React中Portal是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/686">React中修改prop引发的生命周期有哪几个？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/685">React多个setState调用的原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/684">React中调用setState会更新的生命周期有哪几个？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/683">React中setState的第二个参数作用是什么呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/682">React中的setState是同步还是异步的呢？为什么state并不一定会同步更新？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/681">React中的setState批量更新的过程是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/680">React中的setState执行机制是什么呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/679">在React中遍历的方法有哪些？它们有什么区别呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/678">请说说你对React的render方法的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/677">props.children.map和js的map有什么区别？为什么优先选择React的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/676">有用过React的严格模式吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/675">React中的setState和replaceState的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/674">React中的setState缺点是什么呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/673">有用过React的Fragment吗？它的运用场景是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/672">React组件间共享数据方法有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/671">React的状态提升是什么？使用场景有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/670">简单描述下你有做过哪些React项目？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/669">在构造函数中调用super(props)的目的是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/668">你是如何学习React的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/667">从旧版本的React升级到新版本的React有做过吗？有遇到过什么坑？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/666">你用过React版本有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/665">有用过React的服务端渲染吗？怎么做的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/664">React的mixins有什么作用？适用于什么场景？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/663">React怎么拿到组件对应的DOM元素？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/662">请描述下事件在React中的处理方式是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/661">JSX和HTML有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/660">React的书写规范有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/659">create-react-app创建新运用怎么解决卡的问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/658">使用React的方式有哪几种？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/657">说说你对reader的context的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/656">同时引用这三个库React.js、React-dom.js和babel.js它们都有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/655">你知道Virtual DOM的工作原理吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/654">你阅读过React的源码吗？简要说下它的执行流程</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/653">React中怎样阻止组件渲染？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/652">React非兄弟组件如何通信？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/651">React兄弟组件如何通信？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/650">React非父子组件如何通信？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/649">React父子组件如何通信？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/648">React组件间的通信有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/647">类组件和函数式组件有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/646">React自定义组件你写过吗？说说看都写过哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/645">React组件的state和props两者有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/644">React有几种构建组件的方式？可以写出来吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/643">React中遍历时为什么不用索引作为唯一的key值？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/642">React中的key有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/641">React中除了在构造函数中绑定this,还有别的方式吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/640">在React中页面重新加载时怎样保留数据？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/639">请描述下React的事件机制</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/638">怎样在React中创建一个事件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/637">在React中无状态组件有什么运用场景？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/636">描述下在React中无状态组件和有状态组件的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/635">写一个React的高阶组件(HOC)并说明你对它的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/634">React中可以在render访问refs吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/633">React中refs的作用是什么？有哪些应用场景？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/632">请描述你对纯函数的理解？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/631">受控组件和非受控组件有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/630">React中什么是非控组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/629">React中什么是受控组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/628">React中发起网络请求应该在哪个生命周期中进行？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/627">说说React的生命周期有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/626">说说你对“在React中，一切都是组件”的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/625">写React你是用es6还是es5的语法？有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/624">浏览器为什么无法直接JSX？怎么解决呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/623">在使用React过程中你都踩过哪些坑？你是怎么填坑的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/622">说说你喜欢React的原因是什么？它有什么优缺点？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/621">如何解决引用类型在pureComponent下修改值的时候，页面不渲染的问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/620">createElement与cloneElement两者有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/619">解释下React中Element 和Component两者的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/618">解释下React中component和pureComponent两者的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/617">React的虚拟DOM和vue的虚拟DOM有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/616">你觉得React上手快不快？它有哪些限制？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/615">说说你对声明式编程的理解？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/614">React与angular、vue有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/613">React是哪个公司开发的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/612">React是什么？它的主要特点是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/611">简要描述下你知道的React工作原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/606">在React中怎样改变组件状态，以及状态改变的过程是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/605">在React中你是怎么进行状态管理的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/604">React声明组件有哪几种方法，各有什么不同？</a></li></ul><h3 id="ReactNative"><a href="#ReactNative" class="headerlink" title="ReactNative"></a>ReactNative</h3><ul><li><a href="">如何在React Native中设置环境变量？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/783">请描述下Code Push的原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/782">React Native怎样查看日记？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/781">React Native怎样测试？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/780">React Native怎样调试？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/779">React Native和React有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/725">有做过React Native项目吗？</a></li></ul><h3 id="React-Router"><a href="#React-Router" class="headerlink" title="React-Router"></a>React-Router</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/922">React-Router怎么获取历史对象？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/921">React-Router怎么获取URL的参数？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/778">在history模式中push和replace有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/777">React-Router怎么设置重定向？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/776">React-Router 4中<code>&lt;Router&gt;</code>组件有几种类型？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/775">React-Router 3和React-Router 4有什么变化？添加了什么好的特性？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/774">React-Router的实现原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/773">React-Router 4的switch有什么用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/772">React-Router的路由有几种模式？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/771">React-Router 4怎样在路由变化时重新渲染同一个组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/770">React-Router的<code>&lt;Link&gt;</code>标签和<code>&lt;a&gt;</code>标签有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/728">React的路由和普通路由有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/727">请你说说React的路由的优缺点？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/726">请你说说React的路由是什么？</a></li></ul><h3 id="Redux-Mobx"><a href="#Redux-Mobx" class="headerlink" title="Redux/Mobx"></a>Redux/Mobx</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/920">你有了解Rxjs是什么吗？它是做什么的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/919">在Redux中怎么发起网络请求？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/918">Redux怎样重置状态？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/917">Redux怎样设置初始状态？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/916">Context api可以取代Redux吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/915">推荐在reducer中触发Action吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/914">Redux怎么添加新的中间件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/913">redux-saga和redux-thunk有什么本质的区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/912">在React中你是怎么对异步方案进行选型的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/911">你知道redux-saga的原理吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/910">你有使用过redux-saga中间件吗？它是干什么的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/769">Redux中异步action和同步action最大的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/768">Redux和vuex有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/767">Redux的中间件是什么？你有用过哪些Redux的中间件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/766">说说Redux的实现流程</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/765">Mobx的设计思想是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/764">Redux由哪些组件构成？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/763">Mobx和Redux有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/762">在React项目中你是如何选择Redux和Mobx的？说说你的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/761">你有在React中使用过Mobx吗？它的运用场景有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/740">Redux的thunk作用是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/739">Redux的数据存储和本地储存有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/738">在Redux中，什么是reducer？它有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/737">举例说明怎么在Redux中定义action？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/736">在Redux中，什么是action？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/735">在Redux中，什么是store？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/734">为什么Redux能做到局部渲染呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/733">说说Redux的优缺点分别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/732">Redux和Flux的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/731">Redux它的三个原则是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/730">什么是单一数据源？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/729">什么是Redux？说说你对Redux的理解？有哪些运用场景？</a></li></ul><h3 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/742">请说说点击按钮触发到状态更改，数据的流向？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/742">请描述下Flux的思想</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/741">什么是Flux？说说你对Flux的理解？有哪些运用场景？</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【算法】深入掌握算法系列</title>
    <link href="/hexo-blog/2022/10/12/algorithms-test/"/>
    <url>/hexo-blog/2022/10/12/algorithms-test/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sisterAn/JavaScript-Algorithms">JavaScript-Algorithms</a> - 题源地址<br><a href="https://labuladong.gitee.io/algo/">labuladong的算法小抄</a> - 好的算法学习资料</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为业务开发，虽然在平常开发中很少写算法，但当我们需要深入框架、开发语言、开源库时，懂算法将大大提高我们看源码的能力。例如 ：</p><ul><li>virtual-dom diff 算法做了一些约定，后将原先 O(n3) 的时间复杂度降到了O(n) ，核心原理就是一个树的深度优先搜索</li><li>babel 这些就是一些编译原理的 parser 生成抽象语法树的知识，再将抽象语法树进行转换操作生成文件</li><li>浏览器的 history，底层可以使用栈来实现</li><li>webpack 中利用 tree-shaking 优化</li><li>v8 中的调用栈、消息队列等等</li></ul><p>这些就大量使用了算法，看懂了就能更好的了解它们的性能，更高效的解决问题，提升我们的代码质量与思维视野，进阶到更高 Level，赚更多钱💰💰💰。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>给自己定个小目标，把下面深入掌握算法的小题全过一遍，每天最少一题；<br>目前先附上源地址，后续自己做好后更新题目后的链接地址，并标记清除，比如 ✅图解leetcode88：合并两个有序数组</p><h2 id="深入掌握算法"><a href="#深入掌握算法" class="headerlink" title="深入掌握算法"></a>深入掌握算法</h2><p>分为四个模块：数据结构、算法、设计、基础架构等</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="数组篇"><a href="#数组篇" class="headerlink" title="数组篇"></a>数组篇</h4><ul><li><a href="https://leetcode-cn.com/problems/merge-sorted-array/solution/tou-ge-lan-shi-yong-yuan-sheng-api-by-ha-qpg5/">✅图解leetcode88：合并两个有序数组</a></li><li><a href="https://leetcode-cn.com/problems/two-sum/solution/xiao-nan-gua-kong-jian-huan-shi-jian-by-9kjta/">✅字节&amp;leetcode1：两数之和</a></li><li><a href="https://leetcode-cn.com/problems/3sum/solution/xiao-nan-gua-pai-xu-shuang-zhi-zhen-by-h-i03k/">✅腾讯&amp;leetcode15：三数之和</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/128">字节：N数之和</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/5">腾讯：数组扁平化、去重、排序 </a></li><li><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/xiao-nan-gua-pai-xu-jia-shuang-zhi-zhen-tbapt/">✅leetcode349：给定两个数组，编写一个函数来计算它们的交集</a></li><li><a href="https://leetcode-cn.com/problems/lru-cache/solution/xiao-nan-gua-shuang-xiang-lian-biao-ji-m-q7rt/">✅华为&amp;leetcode146：设计和实现一个LRU（最近最少使用）缓存机制</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/10">阿里算法题：编写一个函数计算多个数组的交集</a></li><li><a href="https://leetcode-cn.com/problems/data-stream-as-disjoint-intervals/solution/xiao-nan-gua-he-li-li-yong-zhan-by-happy-rsd8/">✅leetcode352: 将数据流变为多个不相交区间</a></li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ul><li><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/xiao-nan-gua-die-dai-by-happydemoney-c19o/">✅leetcode21：合并两个有序链表</a></li><li><a href="https://leetcode-cn.com/problems/linked-list-cycle/solution/xiao-nan-gua-kuai-man-zhi-zhen-by-happyd-hnyl/">✅有赞&amp;leetcode141：判断一个单链表是否有环</a></li><li><a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/xiao-nan-gua-xian-jin-hou-chu-zhan-by-ha-m56f/">✅图解leetcode206：反转链表</a></li><li><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/solution/xiao-nan-gua-bian-li-lian-biao-ji-suan-c-nfvg/">✅leetcode876：求链表的中间结点</a></li><li><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/xiao-nan-gua-jian-dan-de-die-dai-by-happ-8mo6/">✅leetcode19：删除链表倒数第 n 个结点</a></li><li><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiao-nan-gua-shuang-zhi-zhen-by-happydem-4gsx/">✅图解字节&amp;leetcode160：编写一个程序，找到两个单链表相交的起始节点</a></li><li><a href="https://leetcode-cn.com/problems/valid-triangle-number/solution/xiao-nan-gua-pai-xu-er-fen-by-happydemon-vrkq/">✅腾讯&amp;leetcode611：有效三角形的个数</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/114">快手算法：链表求和</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/122">leetcode42：接雨水问题</a></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/xiao-yuan-sheng-apiyi-tao-lu-by-happydem-5yiv/">✅字节&amp;leetcode151：翻转字符串里的单词</a></li><li><a href="https://leetcode-cn.com/problems/longest-common-prefix/solution/xiao-zhan-jia-lin-shi-bian-liang-by-happ-jr44/">✅图解拼多多&amp;leetcode14：最长公共前缀（LCP）</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/20">百度：实现一个函数，判断输入是不是回文字符串</a></li><li><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/xiao-dui-lie-by-happydemoney-k6uq/">✅字节&amp;Leetcode3：无重复字符的最长子串</a></li><li><a href="https://leetcode-cn.com/problems/add-strings/solution/xiao-shuang-zhi-zhen-die-dai-wei-bu-by-h-fi94/">✅Facebook&amp;字节&amp;leetcode415: 字符串相加</a></li><li><a href="https://leetcode-cn.com/problems/multiply-strings/solution/zi-fu-chuan-xiang-cheng-by-leetcode-solution/">✅腾讯&amp;leetcode43：字符串相乘</a></li><li><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/solution/">✅腾讯&amp;剑指 Offer 67. 把字符串转换成整数</a></li></ul><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><ul><li><a href="https://leetcode-cn.com/problems/min-stack/solution/xiao-nan-gua-zui-xiao-zhan-by-happydemon-4bbb/">✅字节&amp;leetcode155：最小栈（包含getMin函数的栈）</a></li><li><a href="https://leetcode-cn.com/problems/valid-parentheses/solution/xiao-nan-gua-zuo-jin-you-chu-by-happydem-kq7g/">✅图解腾讯&amp;哔哩哔哩&amp;leetcode20：有效的括号</a></li><li><a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/solution/xiao-nan-gua-yong-zhan-jian-dan-chu-li-b-foi7/">✅leetcode1047：删除字符串中的所有相邻重复项</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/27">leetcode1209：删除字符串中的所有相邻重复项 II</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/28">面试真题：删除字符串中出现次数 &gt;= 2 次的相邻字符</a></li></ul><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><ul><li><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/xiao-nan-gua-zhu-zhan-fu-zhu-zhan-by-hap-tdmu/">✅腾讯&amp;剑指offer09：用两个栈实现队列</a></li><li><a href="https://leetcode-cn.com/problems/sliding-window-maximum/solution/hua-dong-chuang-kou-zui-da-zhi-by-leetco-ki6m/">✅leetcode239：滑动窗口最大值问题</a></li><li><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/xiao-yuan-sheng-apiyi-tao-lu-by-happydem-5yiv/">✅字节&amp;leetcode151：翻转字符串里的单词</a></li><li><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/xiao-dui-lie-by-happydemoney-k6uq/">✅字节&amp;Leetcode3：无重复字符的最长子串</a></li></ul><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><ul><li><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/xiao-nan-gua-pai-xu-jia-shuang-zhi-zhen-tbapt/">✅leetcode349：给定两个数组，编写一个函数来计算它们的交集</a></li><li><a href="https://leetcode-cn.com/problems/two-sum/solution/xiao-nan-gua-kong-jian-huan-shi-jian-by-9kjta/">✅字节&amp;leetcode1：两数之和</a></li><li><a href="https://leetcode-cn.com/problems/3sum/solution/xiao-nan-gua-pai-xu-shuang-zhi-zhen-by-h-i03k/">✅腾讯&amp;leetcode15：三数之和</a></li><li><a href="https://leetcode-cn.com/problems/insert-delete-getrandom-o1/solution/chang-shu-shi-jian-cha-ru-shan-chu-he-huo-qu-sui-j/">✅leetcode380：常数时间插入、删除和获取随机元素</a></li><li><a href="https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/solution/xiao-nan-gua-ha-xi-biao-by-happydemoney-h6z6/">✅剑指Offer50：第一个只出现一次的字符</a></li></ul><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><h5 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h5><ul><li><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/">✅字节&amp;leetcode144：二叉树的前序遍历</a></li><li><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/">✅字节&amp;leetcode94：二叉树的中序遍历</a></li><li><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/">✅字节&amp;leetcode145：二叉树的后序遍历</a></li><li><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/xiao-nan-gua-bfs-by-happydemoney-kgdd/">✅leetcode102：二叉树的层序遍历</a></li><li><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/solution/xiao-nan-gua-bfszhan-by-happydemoney-e7tg/">✅l字节&amp;leetcode107：二叉树的层次遍历</a></li></ul><h5 id="重构二叉树"><a href="#重构二叉树" class="headerlink" title="重构二叉树"></a>重构二叉树</h5><ul><li><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/xiao-nan-gua-di-gui-by-happydemoney-7jkz/">✅leetcode105：从前序与中序遍历序列构造二叉树</a></li></ul><h5 id="二叉树进阶"><a href="#二叉树进阶" class="headerlink" title="二叉树进阶"></a>二叉树进阶</h5><ul><li><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution/xiao-nan-gua-bfs-by-happydemoney-xlgv/">✅l腾讯&amp;leetcode104：二叉树的最大深度</a></li><li><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/xiao-nan-gua-hou-xu-bian-li-by-happydemo-xa1z/">✅字节&amp;腾讯leetcode236：二叉树的最近公共祖先</a></li><li><a href="https://leetcode-cn.com/problems/balanced-binary-tree/solution/xiao-nan-gua-hou-xu-bian-li-by-happydemo-y9aj/">✅剑指Offer&amp;leetcode110：平衡二叉树</a></li><li><a href="https://leetcode-cn.com/problems/path-sum/solution/xiao-nan-gua-qian-xu-bian-li-by-happydem-6brs/">✅字节&amp;leetcode112：路径总和</a></li><li><a href="https://leetcode-cn.com/problems/symmetric-tree/solution/xiao-nan-gua-di-gui-by-happydemoney-45at/">✅剑指Offer&amp;leetcode101：对称二叉树</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/82">字节一面：给定一个二叉树, 找到该树中两个指定节点间的最短距离</a></li><li><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/solution/xiao-nan-gua-dfs-by-happydemoney-x8t7/">✅腾讯&amp;leetcode230：二叉搜索树中第K小的元素</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/141">二叉树的左右子树交换</a></li></ul><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><ul><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/59">腾讯&amp;字节等：最小的k个数</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/61">leetcode347：前 K 个高频元素</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/62">字节&amp;leetcode215：数组中的第K个最大元素</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/63">剑指Offer&amp;leetcode295：数据流的中位数</a></li></ul><h4 id="图"><a href="#图" class="headerlink" title="图"></a>图</h4><ul><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/65">leetcode997：找到小镇的法官</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/66">leetcode207：课程表问题</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/57">剑指Offer&amp;Bigo：旋转矩阵</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/134">腾讯&amp;leetcode：螺旋矩阵 II</a></li></ul><h3 id="算法技巧"><a href="#算法技巧" class="headerlink" title="算法技巧"></a>算法技巧</h3><h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><ul><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/70">腾讯&amp;字节：介绍一下快排原理以及时间复杂度，并实现一个快排</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/74">字节&amp;阿里&amp;网易&amp;leetcode384：打乱数组（洗牌算法）</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/75">阿里五面：说下希尔排序的过程？ 希尔排序的时间复杂度和空间复杂度又是多少？</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/79">腾讯&amp;leetcode148：排序链表</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/80">字节算法题：扑克牌问题（反向推导题）</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/93">腾讯&amp;leetcode611：有效三角形的个数</a></li></ul><h4 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h4><ul><li><a href="https://leetcode-cn.com/problems/binary-search/solution/er-fen-cha-zhao-by-leetcode-solution-f0xw/">✅腾讯：简述二分查找算法与时间复杂度，并实现一个二分查找算法</a></li><li><a href="https://labuladong.gitee.io/algo/1/9/">✅腾讯&amp;字节&amp;leetcode34：在排序数组中查找元素的第一个和最后一个位置</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/86">腾讯&amp;leetcode230：二叉搜索树中第K小的元素</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/109">腾讯&amp;leetcode875：爱吃香蕉的珂珂</a></li></ul><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><ul><li><a href="https://leetcode-cn.com/problems/climbing-stairs/solution/xiao-nan-gua-jian-dan-di-gui-by-happydem-ribe/">✅字节&amp;leetcode70：爬楼梯问题</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/91">字节&amp;leetcode746：使用最小花费爬楼梯</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/94">字节二面&amp;leetcode53：最大子序和</a></li><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/xiao-dong-tai-gui-hua-by-happydemoney-rfwv/">✅腾讯&amp;leetcode121：买卖股票的最佳时机</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/107">腾讯&amp;leetcode647：回文子串</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/121">腾讯&amp;leetcode5：最长回文子串</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/139">阿里&amp;网易&amp;leetcode64：最小路径和</a></li></ul><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><ul><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/xiao-tan-xin-by-happydemoney-mafm/">✅字节&amp;leetcode122：买卖股票的最佳时机 II</a></li><li><a href="https://leetcode-cn.com/problems/assign-cookies/solution/xiao-shuang-zhi-zhen-by-happydemoney-rmza/">✅字节&amp;leetcode455：分发饼干</a></li><li><a href="https://leetcode-cn.com/problems/split-array-into-consecutive-subsequences/solution/fen-ge-shu-zu-wei-lian-xu-zi-xu-lie-by-l-lbs5/">✅腾讯&amp;leetcode659：分割数组为连续子序列</a></li></ul><h4 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h4><ul><li><a href="https://leetcode-cn.com/problems/permutations/solution/xiao-hui-su-fa-by-happydemoney-1hi0/">✅百度&amp;leetcode46：全排列问题</a></li><li><a href="https://leetcode-cn.com/problems/generate-parentheses/solution/gua-hao-sheng-cheng-by-leetcode-solution/">✅腾讯&amp;leetcode22：括号生成</a></li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul><li><a href="https://leetcode-cn.com/problems/lru-cache/solution/xiao-nan-gua-shuang-xiang-lian-biao-ji-m-q7rt/">✅华为&amp;leetcode146：设计和实现一个LRU（最近最少使用）缓存机制</a></li><li><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/er-cha-shu-de-xu-lie-hua-yu-fan-xu-lie-hua-by-le-2/">✅leetcode297. 二叉树的序列化与反序列化</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【算法】机试算法-数独算法变种</title>
    <link href="/hexo-blog/2022/10/12/algorithms-sudoku/"/>
    <url>/hexo-blog/2022/10/12/algorithms-sudoku/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/78a1a4ebe8a34c93aac006c44f6bf8a1?tpId=37&tqId=21267&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">Sudoku-数独问题</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>问题描述：给你一个大写单词word，在这样一个遍布着大写的字母(A-Z)的矩阵(n(行) x m(列))中，如果你可以通过上、下、左、右的方向去找到连续的字母组成word，则输出word的的字母的坐标（行列从1开始计算），如果遍历了矩阵所有位置都找不到，则输出NO；</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * 首行为标识矩阵的行(n)、列数(m)，比如这个是4x5的矩阵</span><br><span class="hljs-comment"> * 第2行为目标单词word</span><br><span class="hljs-comment"> * 从第3行到第n+2行为矩阵内的字母</span><br><span class="hljs-comment"> */</span><br><span class="hljs-string">`4 5</span><br><span class="hljs-string">HELLO</span><br><span class="hljs-string">ABCDE</span><br><span class="hljs-string">HDFGA</span><br><span class="hljs-string">ELRTY</span><br><span class="hljs-string">ALOGH`</span><br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-comment">// H(3 1) - E(4 1) - L(4 2) - L(5 2) - O(5 3)</span><br></code></pre></td></tr></table></figure><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ul><li>第一步，把输入的矩阵数据转换成一个二维数组 board</li><li>以从左到右，从上到下的顺序遍历每一个字母</li><li>当找到word的首字母，将step加1，并记录此时board下标数据和result((i+1) + ‘ ‘ + (j+1))</li><li>同时在当前字母位置的上、下、左、右四个方向上尝试下一个，同时继续遍历下一个</li><li>如果没找到，遍历下一个，同时为了防止无限循环，对于有标识result的，return掉</li><li>一直到遍历完所有字母</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 遍历函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; board n x m的二维数组矩阵</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; i 遍历到第几行</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; j 遍历到第几列</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; step 遍历到word的第几步</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; result 满足条件board下标数据，word[0] === board[i][j]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sudoku</span>(<span class="hljs-params">input</span>) &#123;<br>  <span class="hljs-keyword">const</span> inputArr = input.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [n, m] = inputArr.<span class="hljs-title function_">shift</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">// 首行为标识矩阵的行(n)、列数(m)，比如这个是4x5的矩阵</span><br>  <span class="hljs-keyword">const</span> word = inputArr.<span class="hljs-title function_">shift</span>().<span class="hljs-title function_">trim</span>(); <span class="hljs-comment">// 第2行为目标单词word</span><br>  <span class="hljs-keyword">const</span> board = inputArr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>));<br>  <span class="hljs-keyword">let</span> output = <span class="hljs-string">&#x27;NO&#x27;</span>;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">backtrack</span> = (<span class="hljs-params">board, i, j, step = <span class="hljs-number">0</span>, result = <span class="hljs-string">&#x27;&#x27;</span></span>) =&gt; &#123;<br>    <span class="hljs-comment">// 遍历到行尾，往下一行遍历</span><br>    <span class="hljs-keyword">if</span> (j === +m) &#123;<br>      <span class="hljs-keyword">if</span> (step !== <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">backtrack</span>(board, i+<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 遍历完整个矩阵</span><br>    <span class="hljs-keyword">if</span> (i === +n) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (board[i][j] !== word[step]) &#123;<br>      <span class="hljs-comment">// 上一次满足条件此次不满足不在往下遍历</span><br>      <span class="hljs-keyword">if</span> (result !== <span class="hljs-string">&#x27;&#x27;</span> || step !== <span class="hljs-number">0</span>) &#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">backtrack</span>(board, i, j + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 找到满足条件的</span><br>      <span class="hljs-keyword">if</span> (step === <span class="hljs-number">0</span>) &#123;<br>        result = (i+<span class="hljs-number">1</span>) + <span class="hljs-string">&#x27; &#x27;</span> + (j+<span class="hljs-number">1</span>);<br>      &#125;<br>      <span class="hljs-comment">// 找到了整个word</span><br>      <span class="hljs-keyword">if</span> (step === word.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (result) &#123;<br>          output = result;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>      step++;<br>      <span class="hljs-comment">// up - 向上找</span><br>      <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; board[i - <span class="hljs-number">1</span>][j] === word[step]) &#123; <br>        <span class="hljs-title function_">backtrack</span>(board, i-<span class="hljs-number">1</span>, j, step, result);<br>      &#125;<br>      <span class="hljs-comment">// down - 向下找</span><br>      <span class="hljs-keyword">if</span> (i+<span class="hljs-number">1</span>&lt;+n &amp;&amp; board[i+<span class="hljs-number">1</span>][j] === word[step]) &#123; <br>        <span class="hljs-title function_">backtrack</span>(board, i+<span class="hljs-number">1</span>, j, step, result);<br>      &#125;<br>      <span class="hljs-comment">// left - 向左找</span><br>      <span class="hljs-keyword">if</span> (j-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span> &amp;&amp; board[i][j-<span class="hljs-number">1</span>] === word[step]) &#123; <br>        <span class="hljs-title function_">backtrack</span>(board, i, j-<span class="hljs-number">1</span>, step, result);<br>      &#125;<br>      <span class="hljs-comment">// right - 向右找</span><br>      <span class="hljs-keyword">if</span> (j+<span class="hljs-number">1</span>&lt;+m &amp;&amp; board[i][j+<span class="hljs-number">1</span>] === word[step]) &#123; <br>        <span class="hljs-title function_">backtrack</span>(board, i, j+<span class="hljs-number">1</span>, step, result);<br>      &#125;<br>      step--;<br>      <span class="hljs-title function_">backtrack</span>(board, i, j+<span class="hljs-number">1</span>, step);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;;<br>  <span class="hljs-title function_">backtrack</span>(board, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(output);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// test case -1</span><br><span class="hljs-title function_">sudoku</span>(<span class="hljs-string">`5 5</span><br><span class="hljs-string">HELLO</span><br><span class="hljs-string">OAIHL</span><br><span class="hljs-string">HCDOL</span><br><span class="hljs-string">ELLOW</span><br><span class="hljs-string">OABRT</span><br><span class="hljs-string">OABRH`</span>);<br><br><span class="hljs-comment">// 2 1</span><br><br><span class="hljs-comment">// test case -2</span><br><span class="hljs-title function_">sudoku</span>(<span class="hljs-string">`4 5</span><br><span class="hljs-string">HELLO</span><br><span class="hljs-string">ABCHE</span><br><span class="hljs-string">HDFGH</span><br><span class="hljs-string">ELRTY</span><br><span class="hljs-string">ALOGH`</span>);<br><br><span class="hljs-comment">// 2 1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>

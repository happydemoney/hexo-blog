{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/img/0101.webp","path":"img/0101.webp","modified":1,"renderable":0},{"_id":"source/img/chrome.webp","path":"img/chrome.webp","modified":1,"renderable":0},{"_id":"source/img/coders-offical.webp","path":"img/coders-offical.webp","modified":1,"renderable":0},{"_id":"source/img/cpu.webp","path":"img/cpu.webp","modified":1,"renderable":0},{"_id":"source/img/keyboard-number.webp","path":"img/keyboard-number.webp","modified":1,"renderable":0},{"_id":"source/img/pc.webp","path":"img/pc.webp","modified":1,"renderable":0},{"_id":"source/img/reduce.webp","path":"img/reduce.webp","modified":1,"renderable":0},{"_id":"source/img/skin-change.webp","path":"img/skin-change.webp","modified":1,"renderable":0},{"_id":"source/img/skin.webp","path":"img/skin.webp","modified":1,"renderable":0},{"_id":"source/img/webpack.webp","path":"img/webpack.webp","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/algorithms-sudoku.md","hash":"9666af32d1fdaee56ed3133d2c41793b08cc52b5","modified":1664351485295},{"_id":"source/_posts/algorithms-test.md","hash":"79e5fa15dff3fe4c68a548d112f5a8bedf4ba049","modified":1664349552194},{"_id":"source/_posts/reduce.md","hash":"41e369eada2ebc409f7bc6cd95444fac554e007e","modified":1664349935545},{"_id":"source/_posts/webpack-package.md","hash":"ea7981118468bc308282a5ffcf6bec099d002601","modified":1664350208254},{"_id":"source/_posts/request-queue.md","hash":"de44c6cf68db1bc52141b5ec4e4f68d66c9ef9e2","modified":1664351418897},{"_id":"source/_posts/website-skin-project.md","hash":"2d8b3cfe913ce75550175d1cde6dca7c849cc36d","modified":1664351386830},{"_id":"source/about/index.md","hash":"83bd05e1b062bb53f7f572a9f1f5f49a7b4ef4f4","modified":1663817264996},{"_id":"source/img/coders-offical.webp","hash":"8e95de70d8c37d4e044893f5a5f6401e7c303dc1","modified":1664349517058},{"_id":"source/img/keyboard-number.webp","hash":"067ccb8abec16bffa87ab7550ba6dd32bd2b8516","modified":1664351467198},{"_id":"source/img/cpu.webp","hash":"bd8f0b6a72b0fd87bda8ac30ae6d545d7ce79a0f","modified":1664351370879},{"_id":"source/img/reduce.webp","hash":"dbc67bb4acfe4d7be845aa210771a24eda41b044","modified":1664349920950},{"_id":"source/img/pc.webp","hash":"28555d79d9728c63ddaabbb39a3aad63e927c9e3","modified":1664351308912},{"_id":"source/img/skin.webp","hash":"b4a91f1409d29b583bfe08603c51c460dd3c539f","modified":1664351272484},{"_id":"source/img/skin-change.webp","hash":"5838611f81a9638b6a45a1e91cc88c642a7b2ad0","modified":1664351349299},{"_id":"source/img/webpack.webp","hash":"d0a1b61a714cc3907c47791e13fadf9e7c138f8f","modified":1664350195133},{"_id":"source/img/chrome.webp","hash":"070fe757810255fceab0d140be77b67bf1d016d1","modified":1664351286850},{"_id":"source/img/0101.webp","hash":"7564572c415d98b9349b018e76f86394a7f8925b","modified":1664351240643},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"39baa882da9b0af5178c7767306be14bcf992a55","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"167c6a0729a9286a7f508c1dd6a9c689e8799008","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"97e003371b76911522fb93c5180c9fdceed29488","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"0aa512c21a4b74ef2e70009786a1858d7c2fae9c","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1663125902627},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1663125902627},{"_id":"public/local-search.xml","hash":"6496b820fecd7a5d3ed77797c5cf10dd9e7ecf3d","modified":1664351561453},{"_id":"public/about/index.html","hash":"94a5f6f5d4035ddd4fb58e6eb7ed57fdfc9892d3","modified":1664351561453},{"_id":"public/archives/index.html","hash":"218e8d22866750f5affbcc83ec1b0daade298391","modified":1664351561453},{"_id":"public/2022/09/22/website-skin-project/index.html","hash":"bb0408f949558b9a90c29f40ac62492b37eb1298","modified":1664351561453},{"_id":"public/2022/09/22/webpack-package/index.html","hash":"d70b8b213ef46208ab543692d71d2d6f9482f657","modified":1664351561453},{"_id":"public/2022/09/22/request-queue/index.html","hash":"d3e5112864cbe918c2189c4365f56462164e4753","modified":1664351561453},{"_id":"public/2022/09/22/reduce/index.html","hash":"7c2341840e78db65ebbcf6916d994bda02cd8fa4","modified":1664351561453},{"_id":"public/2022/09/22/algorithms-test/index.html","hash":"72f25451087fbd2843fe16f37ce98fb86d183ca5","modified":1664351561453},{"_id":"public/archives/2022/09/index.html","hash":"37f098852c6f0b48884e4591dd036e8141846837","modified":1664351561453},{"_id":"public/archives/2022/index.html","hash":"cdc3e94e5f38aace9eca81e1c8cf6e37917c9d47","modified":1664351561453},{"_id":"public/tags/index.html","hash":"9a00d86ee0776266b6c796c0e16579d8ac8c7323","modified":1664351561453},{"_id":"public/categories/index.html","hash":"d332f447ce00a12102f50c8bc2c3e00284905470","modified":1664351561453},{"_id":"public/links/index.html","hash":"832ae12101f9a50fc3792be8612f9cf9f4d791a9","modified":1664351561453},{"_id":"public/404.html","hash":"39aed28eeaf8ff8c090c73f7ad01e27f781a50a4","modified":1664351561453},{"_id":"public/2022/09/22/algorithms-sudoku/index.html","hash":"c8a9b7d39acd59ab6bc0cfa9bd24277b8561bb28","modified":1664351561453},{"_id":"public/index.html","hash":"096e57b1be4d3603cb354b439fcbd53e5a87261e","modified":1664351561453},{"_id":"public/img/cpu.webp","hash":"bd8f0b6a72b0fd87bda8ac30ae6d545d7ce79a0f","modified":1664351561453},{"_id":"public/img/coders-offical.webp","hash":"8e95de70d8c37d4e044893f5a5f6401e7c303dc1","modified":1664351561453},{"_id":"public/img/keyboard-number.webp","hash":"067ccb8abec16bffa87ab7550ba6dd32bd2b8516","modified":1664351561453},{"_id":"public/img/pc.webp","hash":"28555d79d9728c63ddaabbb39a3aad63e927c9e3","modified":1664351561453},{"_id":"public/img/skin-change.webp","hash":"5838611f81a9638b6a45a1e91cc88c642a7b2ad0","modified":1664351561453},{"_id":"public/img/reduce.webp","hash":"dbc67bb4acfe4d7be845aa210771a24eda41b044","modified":1664351561453},{"_id":"public/img/skin.webp","hash":"b4a91f1409d29b583bfe08603c51c460dd3c539f","modified":1664351561453},{"_id":"public/img/webpack.webp","hash":"d0a1b61a714cc3907c47791e13fadf9e7c138f8f","modified":1664351561453},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1664351561453},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1664351561453},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1664351561453},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1664351561453},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1664351561453},{"_id":"public/img/chrome.webp","hash":"070fe757810255fceab0d140be77b67bf1d016d1","modified":1664351561453},{"_id":"public/img/0101.webp","hash":"7564572c415d98b9349b018e76f86394a7f8925b","modified":1664351561453},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1664351561453},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1664351561453},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1664351561453},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1664351561453},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1664351561453},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1664351561453},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1664351561453},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1664351561453},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1664351561453},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1664351561453},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1664351561453},{"_id":"public/css/main.css","hash":"d3b6eb3ef0e222271f1453d3d1214f3ba053792d","modified":1664351561453},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1664351561453}],"Category":[],"Data":[],"Page":[{"title":"标题","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 标题\nlayout: about\n---\n","date":"2022-09-22T03:27:44.996Z","updated":"2022-09-22T03:27:44.996Z","path":"about/index.html","comments":1,"_id":"cl8lby4na0000p0w18hot1hx1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"【算法】机试算法-数独算法变种","index_img":"/img/keyboard-number.webp","_content":"\n[Sudoku-数独问题](https://www.nowcoder.com/practice/78a1a4ebe8a34c93aac006c44f6bf8a1?tpId=37&tqId=21267&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=%2Fexam%2Foj%2Fta%3FtpId%3D37&difficulty=undefined&judgeStatus=undefined&tags=&title=)\n\n##  描述\n\n问题描述：给你一个大写单词word，在这样一个遍布着大写的字母(A-Z)的矩阵(n(行) x m(列))中，如果你可以通过上、下、左、右的方向去找到连续的字母组成word，则输出word的的字母的坐标（行列从1开始计算），如果遍历了矩阵所有位置都找不到，则输出NO；\n\n示例：\n\n```js\n/**\n * 输入\n * 首行为标识矩阵的行(n)、列数(m)，比如这个是4x5的矩阵\n * 第2行为目标单词word\n * 从第3行到第n+2行为矩阵内的字母\n */\n`4 5\nHELLO\nABCDE\nHDFGA\nELRTY\nALOGH`\n\n// 输出\n3 1 // H(3 1) - E(4 1) - L(4 2) - L(5 2) - O(5 3)\n```\n\n##  思路分析\n\n- 第一步，把输入的矩阵数据转换成一个二维数组 board\n- 以从左到右，从上到下的顺序遍历每一个字母\n- 当找到word的首字母，将step加1，并记录此时board下标数据和result((i+1) + ' ' + (j+1))\n- 同时在当前字母位置的上、下、左、右四个方向上尝试下一个，同时继续遍历下一个\n- 如果没找到，遍历下一个，同时为了防止无限循环，对于有标识result的，return掉\n- 一直到遍历完所有字母\n\n##  代码实现\n\n```js\n/**\n * 遍历函数\n * @param {*} board n x m的二维数组矩阵\n * @param {*} i 遍历到第几行\n * @param {*} j 遍历到第几列\n * @param {*} step 遍历到word的第几步\n * @param {*} result 满足条件board下标数据，word[0] === board[i][j]\n * @returns \n */\nfunction sudoku(input) {\n  const inputArr = input.split('\\n');\n  const [n, m] = inputArr.shift().split(' '); // 首行为标识矩阵的行(n)、列数(m)，比如这个是4x5的矩阵\n  const word = inputArr.shift().trim(); // 第2行为目标单词word\n  const board = inputArr.map(item => item.split(''));\n  let output = 'NO';\n\n  const backtrack = (board, i, j, step = 0, result = '') => {\n    // 遍历到行尾，往下一行遍历\n    if (j === +m) {\n      if (step !== 0) {\n        return false;\n      }\n      return backtrack(board, i+1, 0, 0, '');\n    }\n    // 遍历完整个矩阵\n    if (i === +n) {\n      return true;\n    }\n    if (board[i][j] !== word[step]) {\n      // 上一次满足条件此次不满足不在往下遍历\n      if (result !== '' || step !== 0) { \n        return false;\n      }\n      return backtrack(board, i, j + 1, 0, '');\n    } else {\n      // 找到满足条件的\n      if (step === 0) {\n        result = (i+1) + ' ' + (j+1);\n      }\n      // 找到了整个word\n      if (step === word.length - 1) {\n        if (result) {\n          output = result;\n        }\n        return true;\n      }\n      step++;\n      // up - 向上找\n      if (i - 1 >= 0 && board[i - 1][j] === word[step]) { \n        backtrack(board, i-1, j, step, result);\n      }\n      // down - 向下找\n      if (i+1<+n && board[i+1][j] === word[step]) { \n        backtrack(board, i+1, j, step, result);\n      }\n      // left - 向左找\n      if (j-1>=0 && board[i][j-1] === word[step]) { \n        backtrack(board, i, j-1, step, result);\n      }\n      // right - 向右找\n      if (j+1<+m && board[i][j+1] === word[step]) { \n        backtrack(board, i, j+1, step, result);\n      }\n      step--;\n      backtrack(board, i, j+1, step);\n    }\n    return false;\n  };\n  backtrack(board, 0, 0);\n  console.log(output);\n}\n\n/**\n\n */\n// test case -1\nsudoku(`5 5\nHELLO\nOAIHL\nHCDOL\nELLOW\nOABRT\nOABRH`);\n\n// 2 1\n\n// test case -2\nsudoku(`4 5\nHELLO\nABCHE\nHDFGH\nELRTY\nALOGH`);\n\n// 2 1\n```","source":"_posts/algorithms-sudoku.md","raw":"---\ntitle: 【算法】机试算法-数独算法变种\nindex_img: /img/keyboard-number.webp\n---\n\n[Sudoku-数独问题](https://www.nowcoder.com/practice/78a1a4ebe8a34c93aac006c44f6bf8a1?tpId=37&tqId=21267&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=%2Fexam%2Foj%2Fta%3FtpId%3D37&difficulty=undefined&judgeStatus=undefined&tags=&title=)\n\n##  描述\n\n问题描述：给你一个大写单词word，在这样一个遍布着大写的字母(A-Z)的矩阵(n(行) x m(列))中，如果你可以通过上、下、左、右的方向去找到连续的字母组成word，则输出word的的字母的坐标（行列从1开始计算），如果遍历了矩阵所有位置都找不到，则输出NO；\n\n示例：\n\n```js\n/**\n * 输入\n * 首行为标识矩阵的行(n)、列数(m)，比如这个是4x5的矩阵\n * 第2行为目标单词word\n * 从第3行到第n+2行为矩阵内的字母\n */\n`4 5\nHELLO\nABCDE\nHDFGA\nELRTY\nALOGH`\n\n// 输出\n3 1 // H(3 1) - E(4 1) - L(4 2) - L(5 2) - O(5 3)\n```\n\n##  思路分析\n\n- 第一步，把输入的矩阵数据转换成一个二维数组 board\n- 以从左到右，从上到下的顺序遍历每一个字母\n- 当找到word的首字母，将step加1，并记录此时board下标数据和result((i+1) + ' ' + (j+1))\n- 同时在当前字母位置的上、下、左、右四个方向上尝试下一个，同时继续遍历下一个\n- 如果没找到，遍历下一个，同时为了防止无限循环，对于有标识result的，return掉\n- 一直到遍历完所有字母\n\n##  代码实现\n\n```js\n/**\n * 遍历函数\n * @param {*} board n x m的二维数组矩阵\n * @param {*} i 遍历到第几行\n * @param {*} j 遍历到第几列\n * @param {*} step 遍历到word的第几步\n * @param {*} result 满足条件board下标数据，word[0] === board[i][j]\n * @returns \n */\nfunction sudoku(input) {\n  const inputArr = input.split('\\n');\n  const [n, m] = inputArr.shift().split(' '); // 首行为标识矩阵的行(n)、列数(m)，比如这个是4x5的矩阵\n  const word = inputArr.shift().trim(); // 第2行为目标单词word\n  const board = inputArr.map(item => item.split(''));\n  let output = 'NO';\n\n  const backtrack = (board, i, j, step = 0, result = '') => {\n    // 遍历到行尾，往下一行遍历\n    if (j === +m) {\n      if (step !== 0) {\n        return false;\n      }\n      return backtrack(board, i+1, 0, 0, '');\n    }\n    // 遍历完整个矩阵\n    if (i === +n) {\n      return true;\n    }\n    if (board[i][j] !== word[step]) {\n      // 上一次满足条件此次不满足不在往下遍历\n      if (result !== '' || step !== 0) { \n        return false;\n      }\n      return backtrack(board, i, j + 1, 0, '');\n    } else {\n      // 找到满足条件的\n      if (step === 0) {\n        result = (i+1) + ' ' + (j+1);\n      }\n      // 找到了整个word\n      if (step === word.length - 1) {\n        if (result) {\n          output = result;\n        }\n        return true;\n      }\n      step++;\n      // up - 向上找\n      if (i - 1 >= 0 && board[i - 1][j] === word[step]) { \n        backtrack(board, i-1, j, step, result);\n      }\n      // down - 向下找\n      if (i+1<+n && board[i+1][j] === word[step]) { \n        backtrack(board, i+1, j, step, result);\n      }\n      // left - 向左找\n      if (j-1>=0 && board[i][j-1] === word[step]) { \n        backtrack(board, i, j-1, step, result);\n      }\n      // right - 向右找\n      if (j+1<+m && board[i][j+1] === word[step]) { \n        backtrack(board, i, j+1, step, result);\n      }\n      step--;\n      backtrack(board, i, j+1, step);\n    }\n    return false;\n  };\n  backtrack(board, 0, 0);\n  console.log(output);\n}\n\n/**\n\n */\n// test case -1\nsudoku(`5 5\nHELLO\nOAIHL\nHCDOL\nELLOW\nOABRT\nOABRH`);\n\n// 2 1\n\n// test case -2\nsudoku(`4 5\nHELLO\nABCHE\nHDFGH\nELRTY\nALOGH`);\n\n// 2 1\n```","slug":"algorithms-sudoku","published":1,"date":"2022-09-22T03:27:44.970Z","updated":"2022-09-28T07:51:25.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lby4nz0001p0w17zk51mvc","content":"<p><a href=\"https://www.nowcoder.com/practice/78a1a4ebe8a34c93aac006c44f6bf8a1?tpId=37&tqId=21267&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=\">Sudoku-数独问题</a></p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>问题描述：给你一个大写单词word，在这样一个遍布着大写的字母(A-Z)的矩阵(n(行) x m(列))中，如果你可以通过上、下、左、右的方向去找到连续的字母组成word，则输出word的的字母的坐标（行列从1开始计算），如果遍历了矩阵所有位置都找不到，则输出NO；</p>\n<p>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 输入</span><br><span class=\"hljs-comment\"> * 首行为标识矩阵的行(n)、列数(m)，比如这个是4x5的矩阵</span><br><span class=\"hljs-comment\"> * 第2行为目标单词word</span><br><span class=\"hljs-comment\"> * 从第3行到第n+2行为矩阵内的字母</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-string\">`4 5</span><br><span class=\"hljs-string\">HELLO</span><br><span class=\"hljs-string\">ABCDE</span><br><span class=\"hljs-string\">HDFGA</span><br><span class=\"hljs-string\">ELRTY</span><br><span class=\"hljs-string\">ALOGH`</span><br><br><span class=\"hljs-comment\">// 输出</span><br><span class=\"hljs-number\">3</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// H(3 1) - E(4 1) - L(4 2) - L(5 2) - O(5 3)</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><ul>\n<li>第一步，把输入的矩阵数据转换成一个二维数组 board</li>\n<li>以从左到右，从上到下的顺序遍历每一个字母</li>\n<li>当找到word的首字母，将step加1，并记录此时board下标数据和result((i+1) + ‘ ‘ + (j+1))</li>\n<li>同时在当前字母位置的上、下、左、右四个方向上尝试下一个，同时继续遍历下一个</li>\n<li>如果没找到，遍历下一个，同时为了防止无限循环，对于有标识result的，return掉</li>\n<li>一直到遍历完所有字母</li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 遍历函数</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">*</span>&#125; board n x m的二维数组矩阵</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">*</span>&#125; i 遍历到第几行</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">*</span>&#125; j 遍历到第几列</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">*</span>&#125; step 遍历到word的第几步</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">*</span>&#125; result 满足条件board下标数据，word[0] === board[i][j]</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@returns</span> </span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sudoku</span>(<span class=\"hljs-params\">input</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> inputArr = input.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);<br>  <span class=\"hljs-keyword\">const</span> [n, m] = inputArr.<span class=\"hljs-title function_\">shift</span>().<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>); <span class=\"hljs-comment\">// 首行为标识矩阵的行(n)、列数(m)，比如这个是4x5的矩阵</span><br>  <span class=\"hljs-keyword\">const</span> word = inputArr.<span class=\"hljs-title function_\">shift</span>().<span class=\"hljs-title function_\">trim</span>(); <span class=\"hljs-comment\">// 第2行为目标单词word</span><br>  <span class=\"hljs-keyword\">const</span> board = inputArr.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>));<br>  <span class=\"hljs-keyword\">let</span> output = <span class=\"hljs-string\">&#x27;NO&#x27;</span>;<br><br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">backtrack</span> = (<span class=\"hljs-params\">board, i, j, step = <span class=\"hljs-number\">0</span>, result = <span class=\"hljs-string\">&#x27;&#x27;</span></span>) =&gt; &#123;<br>    <span class=\"hljs-comment\">// 遍历到行尾，往下一行遍历</span><br>    <span class=\"hljs-keyword\">if</span> (j === +m) &#123;<br>      <span class=\"hljs-keyword\">if</span> (step !== <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">backtrack</span>(board, i+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-comment\">// 遍历完整个矩阵</span><br>    <span class=\"hljs-keyword\">if</span> (i === +n) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (board[i][j] !== word[step]) &#123;<br>      <span class=\"hljs-comment\">// 上一次满足条件此次不满足不在往下遍历</span><br>      <span class=\"hljs-keyword\">if</span> (result !== <span class=\"hljs-string\">&#x27;&#x27;</span> || step !== <span class=\"hljs-number\">0</span>) &#123; <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">backtrack</span>(board, i, j + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-comment\">// 找到满足条件的</span><br>      <span class=\"hljs-keyword\">if</span> (step === <span class=\"hljs-number\">0</span>) &#123;<br>        result = (i+<span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">&#x27; &#x27;</span> + (j+<span class=\"hljs-number\">1</span>);<br>      &#125;<br>      <span class=\"hljs-comment\">// 找到了整个word</span><br>      <span class=\"hljs-keyword\">if</span> (step === word.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (result) &#123;<br>          output = result;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>      &#125;<br>      step++;<br>      <span class=\"hljs-comment\">// up - 向上找</span><br>      <span class=\"hljs-keyword\">if</span> (i - <span class=\"hljs-number\">1</span> &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; board[i - <span class=\"hljs-number\">1</span>][j] === word[step]) &#123; <br>        <span class=\"hljs-title function_\">backtrack</span>(board, i-<span class=\"hljs-number\">1</span>, j, step, result);<br>      &#125;<br>      <span class=\"hljs-comment\">// down - 向下找</span><br>      <span class=\"hljs-keyword\">if</span> (i+<span class=\"hljs-number\">1</span>&lt;+n &amp;&amp; board[i+<span class=\"hljs-number\">1</span>][j] === word[step]) &#123; <br>        <span class=\"hljs-title function_\">backtrack</span>(board, i+<span class=\"hljs-number\">1</span>, j, step, result);<br>      &#125;<br>      <span class=\"hljs-comment\">// left - 向左找</span><br>      <span class=\"hljs-keyword\">if</span> (j-<span class=\"hljs-number\">1</span>&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; board[i][j-<span class=\"hljs-number\">1</span>] === word[step]) &#123; <br>        <span class=\"hljs-title function_\">backtrack</span>(board, i, j-<span class=\"hljs-number\">1</span>, step, result);<br>      &#125;<br>      <span class=\"hljs-comment\">// right - 向右找</span><br>      <span class=\"hljs-keyword\">if</span> (j+<span class=\"hljs-number\">1</span>&lt;+m &amp;&amp; board[i][j+<span class=\"hljs-number\">1</span>] === word[step]) &#123; <br>        <span class=\"hljs-title function_\">backtrack</span>(board, i, j+<span class=\"hljs-number\">1</span>, step, result);<br>      &#125;<br>      step--;<br>      <span class=\"hljs-title function_\">backtrack</span>(board, i, j+<span class=\"hljs-number\">1</span>, step);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>  &#125;;<br>  <span class=\"hljs-title function_\">backtrack</span>(board, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(output);<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-comment\">// test case -1</span><br><span class=\"hljs-title function_\">sudoku</span>(<span class=\"hljs-string\">`5 5</span><br><span class=\"hljs-string\">HELLO</span><br><span class=\"hljs-string\">OAIHL</span><br><span class=\"hljs-string\">HCDOL</span><br><span class=\"hljs-string\">ELLOW</span><br><span class=\"hljs-string\">OABRT</span><br><span class=\"hljs-string\">OABRH`</span>);<br><br><span class=\"hljs-comment\">// 2 1</span><br><br><span class=\"hljs-comment\">// test case -2</span><br><span class=\"hljs-title function_\">sudoku</span>(<span class=\"hljs-string\">`4 5</span><br><span class=\"hljs-string\">HELLO</span><br><span class=\"hljs-string\">ABCHE</span><br><span class=\"hljs-string\">HDFGH</span><br><span class=\"hljs-string\">ELRTY</span><br><span class=\"hljs-string\">ALOGH`</span>);<br><br><span class=\"hljs-comment\">// 2 1</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.nowcoder.com/practice/78a1a4ebe8a34c93aac006c44f6bf8a1?tpId=37&tqId=21267&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=\">Sudoku-数独问题</a></p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>问题描述：给你一个大写单词word，在这样一个遍布着大写的字母(A-Z)的矩阵(n(行) x m(列))中，如果你可以通过上、下、左、右的方向去找到连续的字母组成word，则输出word的的字母的坐标（行列从1开始计算），如果遍历了矩阵所有位置都找不到，则输出NO；</p>\n<p>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 输入</span><br><span class=\"hljs-comment\"> * 首行为标识矩阵的行(n)、列数(m)，比如这个是4x5的矩阵</span><br><span class=\"hljs-comment\"> * 第2行为目标单词word</span><br><span class=\"hljs-comment\"> * 从第3行到第n+2行为矩阵内的字母</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-string\">`4 5</span><br><span class=\"hljs-string\">HELLO</span><br><span class=\"hljs-string\">ABCDE</span><br><span class=\"hljs-string\">HDFGA</span><br><span class=\"hljs-string\">ELRTY</span><br><span class=\"hljs-string\">ALOGH`</span><br><br><span class=\"hljs-comment\">// 输出</span><br><span class=\"hljs-number\">3</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// H(3 1) - E(4 1) - L(4 2) - L(5 2) - O(5 3)</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><ul>\n<li>第一步，把输入的矩阵数据转换成一个二维数组 board</li>\n<li>以从左到右，从上到下的顺序遍历每一个字母</li>\n<li>当找到word的首字母，将step加1，并记录此时board下标数据和result((i+1) + ‘ ‘ + (j+1))</li>\n<li>同时在当前字母位置的上、下、左、右四个方向上尝试下一个，同时继续遍历下一个</li>\n<li>如果没找到，遍历下一个，同时为了防止无限循环，对于有标识result的，return掉</li>\n<li>一直到遍历完所有字母</li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 遍历函数</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">*</span>&#125; board n x m的二维数组矩阵</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">*</span>&#125; i 遍历到第几行</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">*</span>&#125; j 遍历到第几列</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">*</span>&#125; step 遍历到word的第几步</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">*</span>&#125; result 满足条件board下标数据，word[0] === board[i][j]</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@returns</span> </span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sudoku</span>(<span class=\"hljs-params\">input</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> inputArr = input.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);<br>  <span class=\"hljs-keyword\">const</span> [n, m] = inputArr.<span class=\"hljs-title function_\">shift</span>().<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>); <span class=\"hljs-comment\">// 首行为标识矩阵的行(n)、列数(m)，比如这个是4x5的矩阵</span><br>  <span class=\"hljs-keyword\">const</span> word = inputArr.<span class=\"hljs-title function_\">shift</span>().<span class=\"hljs-title function_\">trim</span>(); <span class=\"hljs-comment\">// 第2行为目标单词word</span><br>  <span class=\"hljs-keyword\">const</span> board = inputArr.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>));<br>  <span class=\"hljs-keyword\">let</span> output = <span class=\"hljs-string\">&#x27;NO&#x27;</span>;<br><br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">backtrack</span> = (<span class=\"hljs-params\">board, i, j, step = <span class=\"hljs-number\">0</span>, result = <span class=\"hljs-string\">&#x27;&#x27;</span></span>) =&gt; &#123;<br>    <span class=\"hljs-comment\">// 遍历到行尾，往下一行遍历</span><br>    <span class=\"hljs-keyword\">if</span> (j === +m) &#123;<br>      <span class=\"hljs-keyword\">if</span> (step !== <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">backtrack</span>(board, i+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-comment\">// 遍历完整个矩阵</span><br>    <span class=\"hljs-keyword\">if</span> (i === +n) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (board[i][j] !== word[step]) &#123;<br>      <span class=\"hljs-comment\">// 上一次满足条件此次不满足不在往下遍历</span><br>      <span class=\"hljs-keyword\">if</span> (result !== <span class=\"hljs-string\">&#x27;&#x27;</span> || step !== <span class=\"hljs-number\">0</span>) &#123; <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">backtrack</span>(board, i, j + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-comment\">// 找到满足条件的</span><br>      <span class=\"hljs-keyword\">if</span> (step === <span class=\"hljs-number\">0</span>) &#123;<br>        result = (i+<span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">&#x27; &#x27;</span> + (j+<span class=\"hljs-number\">1</span>);<br>      &#125;<br>      <span class=\"hljs-comment\">// 找到了整个word</span><br>      <span class=\"hljs-keyword\">if</span> (step === word.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (result) &#123;<br>          output = result;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>      &#125;<br>      step++;<br>      <span class=\"hljs-comment\">// up - 向上找</span><br>      <span class=\"hljs-keyword\">if</span> (i - <span class=\"hljs-number\">1</span> &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; board[i - <span class=\"hljs-number\">1</span>][j] === word[step]) &#123; <br>        <span class=\"hljs-title function_\">backtrack</span>(board, i-<span class=\"hljs-number\">1</span>, j, step, result);<br>      &#125;<br>      <span class=\"hljs-comment\">// down - 向下找</span><br>      <span class=\"hljs-keyword\">if</span> (i+<span class=\"hljs-number\">1</span>&lt;+n &amp;&amp; board[i+<span class=\"hljs-number\">1</span>][j] === word[step]) &#123; <br>        <span class=\"hljs-title function_\">backtrack</span>(board, i+<span class=\"hljs-number\">1</span>, j, step, result);<br>      &#125;<br>      <span class=\"hljs-comment\">// left - 向左找</span><br>      <span class=\"hljs-keyword\">if</span> (j-<span class=\"hljs-number\">1</span>&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; board[i][j-<span class=\"hljs-number\">1</span>] === word[step]) &#123; <br>        <span class=\"hljs-title function_\">backtrack</span>(board, i, j-<span class=\"hljs-number\">1</span>, step, result);<br>      &#125;<br>      <span class=\"hljs-comment\">// right - 向右找</span><br>      <span class=\"hljs-keyword\">if</span> (j+<span class=\"hljs-number\">1</span>&lt;+m &amp;&amp; board[i][j+<span class=\"hljs-number\">1</span>] === word[step]) &#123; <br>        <span class=\"hljs-title function_\">backtrack</span>(board, i, j+<span class=\"hljs-number\">1</span>, step, result);<br>      &#125;<br>      step--;<br>      <span class=\"hljs-title function_\">backtrack</span>(board, i, j+<span class=\"hljs-number\">1</span>, step);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>  &#125;;<br>  <span class=\"hljs-title function_\">backtrack</span>(board, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(output);<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-comment\">// test case -1</span><br><span class=\"hljs-title function_\">sudoku</span>(<span class=\"hljs-string\">`5 5</span><br><span class=\"hljs-string\">HELLO</span><br><span class=\"hljs-string\">OAIHL</span><br><span class=\"hljs-string\">HCDOL</span><br><span class=\"hljs-string\">ELLOW</span><br><span class=\"hljs-string\">OABRT</span><br><span class=\"hljs-string\">OABRH`</span>);<br><br><span class=\"hljs-comment\">// 2 1</span><br><br><span class=\"hljs-comment\">// test case -2</span><br><span class=\"hljs-title function_\">sudoku</span>(<span class=\"hljs-string\">`4 5</span><br><span class=\"hljs-string\">HELLO</span><br><span class=\"hljs-string\">ABCHE</span><br><span class=\"hljs-string\">HDFGH</span><br><span class=\"hljs-string\">ELRTY</span><br><span class=\"hljs-string\">ALOGH`</span>);<br><br><span class=\"hljs-comment\">// 2 1</span><br></code></pre></td></tr></table></figure>"},{"title":"【算法】深入掌握算法系列","index_img":"/img/coders-offical.webp","_content":"\n[JavaScript-Algorithms](https://github.com/sisterAn/JavaScript-Algorithms) - 题源地址\n[labuladong的算法小抄](https://labuladong.gitee.io/algo/) - 好的算法学习资料\n\n## 前言\n\n作为业务开发，虽然在平常开发中很少写算法，但当我们需要深入框架、开发语言、开源库时，懂算法将大大提高我们看源码的能力。例如 ：\n\n- virtual-dom diff 算法做了一些约定，后将原先 O(n3) 的时间复杂度降到了O(n) ，核心原理就是一个树的深度优先搜索\n- babel 这些就是一些编译原理的 parser 生成抽象语法树的知识，再将抽象语法树进行转换操作生成文件\n- 浏览器的 history，底层可以使用栈来实现\n- webpack 中利用 tree-shaking 优化\n- v8 中的调用栈、消息队列等等\n\n这些就大量使用了算法，看懂了就能更好的了解它们的性能，更高效的解决问题，提升我们的代码质量与思维视野，进阶到更高 Level，赚更多钱💰💰💰。\n\n## 计划\n\n给自己定个小目标，把下面深入掌握算法的小题全过一遍，每天最少一题；\n目前先附上源地址，后续自己做好后更新题目后的链接地址，并标记清除，比如 ✅图解leetcode88：合并两个有序数组\n\n## 深入掌握算法\n\n分为四个模块：数据结构、算法、设计、基础架构等\n\n###  数据结构\n\n#### 数组篇\n\n- [✅图解leetcode88：合并两个有序数组](https://leetcode-cn.com/problems/merge-sorted-array/solution/tou-ge-lan-shi-yong-yuan-sheng-api-by-ha-qpg5/)\n- [✅字节&leetcode1：两数之和](https://leetcode-cn.com/problems/two-sum/solution/xiao-nan-gua-kong-jian-huan-shi-jian-by-9kjta/)\n- [✅腾讯&leetcode15：三数之和](https://leetcode-cn.com/problems/3sum/solution/xiao-nan-gua-pai-xu-shuang-zhi-zhen-by-h-i03k/)\n- [字节：N数之和](https://github.com/sisterAn/JavaScript-Algorithms/issues/128)\n- [腾讯：数组扁平化、去重、排序 ](https://github.com/sisterAn/JavaScript-Algorithms/issues/5)\n- [✅leetcode349：给定两个数组，编写一个函数来计算它们的交集](https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/xiao-nan-gua-pai-xu-jia-shuang-zhi-zhen-tbapt/)\n- [✅华为&leetcode146：设计和实现一个LRU（最近最少使用）缓存机制](https://leetcode-cn.com/problems/lru-cache/solution/xiao-nan-gua-shuang-xiang-lian-biao-ji-m-q7rt/)\n- [阿里算法题：编写一个函数计算多个数组的交集](https://github.com/sisterAn/JavaScript-Algorithms/issues/10)\n- [✅leetcode352: 将数据流变为多个不相交区间](https://leetcode-cn.com/problems/data-stream-as-disjoint-intervals/solution/xiao-nan-gua-he-li-li-yong-zhan-by-happy-rsd8/)\n\n#### 链表\n- [✅leetcode21：合并两个有序链表](https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/xiao-nan-gua-die-dai-by-happydemoney-c19o/)\n- [✅有赞&leetcode141：判断一个单链表是否有环](https://leetcode-cn.com/problems/linked-list-cycle/solution/xiao-nan-gua-kuai-man-zhi-zhen-by-happyd-hnyl/)\n- [✅图解leetcode206：反转链表](https://leetcode-cn.com/problems/reverse-linked-list/solution/xiao-nan-gua-xian-jin-hou-chu-zhan-by-ha-m56f/)\n- [✅leetcode876：求链表的中间结点](https://leetcode-cn.com/problems/middle-of-the-linked-list/solution/xiao-nan-gua-bian-li-lian-biao-ji-suan-c-nfvg/)\n- [✅leetcode19：删除链表倒数第 n 个结点](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/xiao-nan-gua-jian-dan-de-die-dai-by-happ-8mo6/)\n- [✅图解字节&leetcode160：编写一个程序，找到两个单链表相交的起始节点](https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiao-nan-gua-shuang-zhi-zhen-by-happydem-4gsx/)\n- [✅腾讯&leetcode611：有效三角形的个数](https://leetcode-cn.com/problems/valid-triangle-number/solution/xiao-nan-gua-pai-xu-er-fen-by-happydemon-vrkq/)\n- [快手算法：链表求和](https://github.com/sisterAn/JavaScript-Algorithms/issues/114)\n- [leetcode42：接雨水问题](https://github.com/sisterAn/JavaScript-Algorithms/issues/122)\n\n#### 字符串\n- [✅字节&leetcode151：翻转字符串里的单词](https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/xiao-yuan-sheng-apiyi-tao-lu-by-happydem-5yiv/)\n- [✅图解拼多多&leetcode14：最长公共前缀（LCP）](https://leetcode-cn.com/problems/longest-common-prefix/solution/xiao-zhan-jia-lin-shi-bian-liang-by-happ-jr44/)\n- [百度：实现一个函数，判断输入是不是回文字符串](https://github.com/sisterAn/JavaScript-Algorithms/issues/20)\n- [✅字节&Leetcode3：无重复字符的最长子串](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/xiao-dui-lie-by-happydemoney-k6uq/)\n- [✅Facebook&字节&leetcode415: 字符串相加](https://leetcode-cn.com/problems/add-strings/solution/xiao-shuang-zhi-zhen-die-dai-wei-bu-by-h-fi94/)\n- [✅腾讯&leetcode43：字符串相乘](https://leetcode-cn.com/problems/multiply-strings/solution/zi-fu-chuan-xiang-cheng-by-leetcode-solution/)\n- [✅腾讯&剑指 Offer 67. 把字符串转换成整数](https://leetcode-cn.com/problems/string-to-integer-atoi/solution/)\n\n#### 栈\n- [✅字节&leetcode155：最小栈（包含getMin函数的栈）](https://leetcode-cn.com/problems/min-stack/solution/xiao-nan-gua-zui-xiao-zhan-by-happydemon-4bbb/)\n- [✅图解腾讯&哔哩哔哩&leetcode20：有效的括号](https://leetcode-cn.com/problems/valid-parentheses/solution/xiao-nan-gua-zuo-jin-you-chu-by-happydem-kq7g/)\n- [✅leetcode1047：删除字符串中的所有相邻重复项](https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/solution/xiao-nan-gua-yong-zhan-jian-dan-chu-li-b-foi7/)\n- [leetcode1209：删除字符串中的所有相邻重复项 II](https://github.com/sisterAn/JavaScript-Algorithms/issues/27)\n- [面试真题：删除字符串中出现次数 >= 2 次的相邻字符](https://github.com/sisterAn/JavaScript-Algorithms/issues/28)\n\n#### 队列\n- [✅腾讯&剑指offer09：用两个栈实现队列](https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/xiao-nan-gua-zhu-zhan-fu-zhu-zhan-by-hap-tdmu/)\n- [✅leetcode239：滑动窗口最大值问题](https://leetcode-cn.com/problems/sliding-window-maximum/solution/hua-dong-chuang-kou-zui-da-zhi-by-leetco-ki6m/)\n- [✅字节&leetcode151：翻转字符串里的单词](https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/xiao-yuan-sheng-apiyi-tao-lu-by-happydem-5yiv/)\n- [✅字节&Leetcode3：无重复字符的最长子串](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/xiao-dui-lie-by-happydemoney-k6uq/)\n\n#### 哈希表\n- [✅leetcode349：给定两个数组，编写一个函数来计算它们的交集](https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/xiao-nan-gua-pai-xu-jia-shuang-zhi-zhen-tbapt/)\n- [✅字节&leetcode1：两数之和](https://leetcode-cn.com/problems/two-sum/solution/xiao-nan-gua-kong-jian-huan-shi-jian-by-9kjta/)\n- [✅腾讯&leetcode15：三数之和](https://leetcode-cn.com/problems/3sum/solution/xiao-nan-gua-pai-xu-shuang-zhi-zhen-by-h-i03k/)\n- [✅leetcode380：常数时间插入、删除和获取随机元素](https://leetcode-cn.com/problems/insert-delete-getrandom-o1/solution/chang-shu-shi-jian-cha-ru-shan-chu-he-huo-qu-sui-j/)\n- [✅剑指Offer50：第一个只出现一次的字符](https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/solution/xiao-nan-gua-ha-xi-biao-by-happydemoney-h6z6/)\n\n#### 二叉树\n\n##### 二叉树的遍历\n- [✅字节&leetcode144：二叉树的前序遍历](https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/)\n- [✅字节&leetcode94：二叉树的中序遍历](https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/)\n- [✅字节&leetcode145：二叉树的后序遍历](https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/)\n- [✅leetcode102：二叉树的层序遍历](https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/xiao-nan-gua-bfs-by-happydemoney-kgdd/)\n- [✅l字节&leetcode107：二叉树的层次遍历](https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/solution/xiao-nan-gua-bfszhan-by-happydemoney-e7tg/)\n\n##### 重构二叉树\n- [✅leetcode105：从前序与中序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/xiao-nan-gua-di-gui-by-happydemoney-7jkz/)\n\n##### 二叉树进阶\n- [✅l腾讯&leetcode104：二叉树的最大深度](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution/xiao-nan-gua-bfs-by-happydemoney-xlgv/)\n- [✅字节&腾讯leetcode236：二叉树的最近公共祖先](https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/xiao-nan-gua-hou-xu-bian-li-by-happydemo-xa1z/)\n- [✅剑指Offer&leetcode110：平衡二叉树](https://leetcode-cn.com/problems/balanced-binary-tree/solution/xiao-nan-gua-hou-xu-bian-li-by-happydemo-y9aj/)\n- [✅字节&leetcode112：路径总和](https://leetcode-cn.com/problems/path-sum/solution/xiao-nan-gua-qian-xu-bian-li-by-happydem-6brs/)\n- [✅剑指Offer&leetcode101：对称二叉树](https://leetcode-cn.com/problems/symmetric-tree/solution/xiao-nan-gua-di-gui-by-happydemoney-45at/)\n- [字节一面：给定一个二叉树, 找到该树中两个指定节点间的最短距离](https://github.com/sisterAn/JavaScript-Algorithms/issues/82)\n- [✅腾讯&leetcode230：二叉搜索树中第K小的元素](https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/solution/xiao-nan-gua-dfs-by-happydemoney-x8t7/)\n- [二叉树的左右子树交换](https://github.com/sisterAn/JavaScript-Algorithms/issues/141)\n\n#### 堆\n- [腾讯&字节等：最小的k个数](https://github.com/sisterAn/JavaScript-Algorithms/issues/59)\n- [leetcode347：前 K 个高频元素](https://github.com/sisterAn/JavaScript-Algorithms/issues/61)\n- [字节&leetcode215：数组中的第K个最大元素](https://github.com/sisterAn/JavaScript-Algorithms/issues/62)\n- [剑指Offer&leetcode295：数据流的中位数](https://github.com/sisterAn/JavaScript-Algorithms/issues/63)\n\n#### 图\n- [leetcode997：找到小镇的法官](https://github.com/sisterAn/JavaScript-Algorithms/issues/65)\n- [leetcode207：课程表问题](https://github.com/sisterAn/JavaScript-Algorithms/issues/66)\n- [剑指Offer&Bigo：旋转矩阵](https://github.com/sisterAn/JavaScript-Algorithms/issues/57)\n- [腾讯&leetcode：螺旋矩阵 II](https://github.com/sisterAn/JavaScript-Algorithms/issues/134)\n\n###  算法技巧\n\n#### 排序算法\n- [腾讯&字节：介绍一下快排原理以及时间复杂度，并实现一个快排](https://github.com/sisterAn/JavaScript-Algorithms/issues/70)\n- [字节&阿里&网易&leetcode384：打乱数组（洗牌算法）](https://github.com/sisterAn/JavaScript-Algorithms/issues/74)\n- [阿里五面：说下希尔排序的过程？ 希尔排序的时间复杂度和空间复杂度又是多少？](https://github.com/sisterAn/JavaScript-Algorithms/issues/75)\n- [腾讯&leetcode148：排序链表](https://github.com/sisterAn/JavaScript-Algorithms/issues/79)\n- [字节算法题：扑克牌问题（反向推导题）](https://github.com/sisterAn/JavaScript-Algorithms/issues/80)\n- [腾讯&leetcode611：有效三角形的个数](https://github.com/sisterAn/JavaScript-Algorithms/issues/93)\n\n#### 查找算法\n- [✅腾讯：简述二分查找算法与时间复杂度，并实现一个二分查找算法](https://leetcode-cn.com/problems/binary-search/solution/er-fen-cha-zhao-by-leetcode-solution-f0xw/)\n- [✅腾讯&字节&leetcode34：在排序数组中查找元素的第一个和最后一个位置](https://labuladong.gitee.io/algo/1/9/)\n- [腾讯&leetcode230：二叉搜索树中第K小的元素](https://github.com/sisterAn/JavaScript-Algorithms/issues/86)\n- [腾讯&leetcode875：爱吃香蕉的珂珂](https://github.com/sisterAn/JavaScript-Algorithms/issues/109)\n\n#### 动态规划\n- [✅字节&leetcode70：爬楼梯问题](https://leetcode-cn.com/problems/climbing-stairs/solution/xiao-nan-gua-jian-dan-di-gui-by-happydem-ribe/)\n- [字节&leetcode746：使用最小花费爬楼梯](https://github.com/sisterAn/JavaScript-Algorithms/issues/91)\n- [字节二面&leetcode53：最大子序和](https://github.com/sisterAn/JavaScript-Algorithms/issues/94)\n- [✅腾讯&leetcode121：买卖股票的最佳时机](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/xiao-dong-tai-gui-hua-by-happydemoney-rfwv/)\n- [腾讯&leetcode647：回文子串](https://github.com/sisterAn/JavaScript-Algorithms/issues/107)\n- [腾讯&leetcode5：最长回文子串](https://github.com/sisterAn/JavaScript-Algorithms/issues/121)\n- [阿里&网易&leetcode64：最小路径和](https://github.com/sisterAn/JavaScript-Algorithms/issues/139)\n\n#### 贪心算法\n- [✅字节&leetcode122：买卖股票的最佳时机 II](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/xiao-tan-xin-by-happydemoney-mafm/)\n- [✅字节&leetcode455：分发饼干](https://leetcode-cn.com/problems/assign-cookies/solution/xiao-shuang-zhi-zhen-by-happydemoney-rmza/)\n- [✅腾讯&leetcode659：分割数组为连续子序列](https://leetcode-cn.com/problems/split-array-into-consecutive-subsequences/solution/fen-ge-shu-zu-wei-lian-xu-zi-xu-lie-by-l-lbs5/)\n\n#### 回溯算法\n- [✅百度&leetcode46：全排列问题](https://leetcode-cn.com/problems/permutations/solution/xiao-hui-su-fa-by-happydemoney-1hi0/)\n- [✅腾讯&leetcode22：括号生成](https://leetcode-cn.com/problems/generate-parentheses/solution/gua-hao-sheng-cheng-by-leetcode-solution/)\n\n### 设计\n\n- [✅华为&leetcode146：设计和实现一个LRU（最近最少使用）缓存机制](https://leetcode-cn.com/problems/lru-cache/solution/xiao-nan-gua-shuang-xiang-lian-biao-ji-m-q7rt/)\n- [✅leetcode297. 二叉树的序列化与反序列化](https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/er-cha-shu-de-xu-lie-hua-yu-fan-xu-lie-hua-by-le-2/)\n","source":"_posts/algorithms-test.md","raw":"---\ntitle: 【算法】深入掌握算法系列\nindex_img: /img/coders-offical.webp\n---\n\n[JavaScript-Algorithms](https://github.com/sisterAn/JavaScript-Algorithms) - 题源地址\n[labuladong的算法小抄](https://labuladong.gitee.io/algo/) - 好的算法学习资料\n\n## 前言\n\n作为业务开发，虽然在平常开发中很少写算法，但当我们需要深入框架、开发语言、开源库时，懂算法将大大提高我们看源码的能力。例如 ：\n\n- virtual-dom diff 算法做了一些约定，后将原先 O(n3) 的时间复杂度降到了O(n) ，核心原理就是一个树的深度优先搜索\n- babel 这些就是一些编译原理的 parser 生成抽象语法树的知识，再将抽象语法树进行转换操作生成文件\n- 浏览器的 history，底层可以使用栈来实现\n- webpack 中利用 tree-shaking 优化\n- v8 中的调用栈、消息队列等等\n\n这些就大量使用了算法，看懂了就能更好的了解它们的性能，更高效的解决问题，提升我们的代码质量与思维视野，进阶到更高 Level，赚更多钱💰💰💰。\n\n## 计划\n\n给自己定个小目标，把下面深入掌握算法的小题全过一遍，每天最少一题；\n目前先附上源地址，后续自己做好后更新题目后的链接地址，并标记清除，比如 ✅图解leetcode88：合并两个有序数组\n\n## 深入掌握算法\n\n分为四个模块：数据结构、算法、设计、基础架构等\n\n###  数据结构\n\n#### 数组篇\n\n- [✅图解leetcode88：合并两个有序数组](https://leetcode-cn.com/problems/merge-sorted-array/solution/tou-ge-lan-shi-yong-yuan-sheng-api-by-ha-qpg5/)\n- [✅字节&leetcode1：两数之和](https://leetcode-cn.com/problems/two-sum/solution/xiao-nan-gua-kong-jian-huan-shi-jian-by-9kjta/)\n- [✅腾讯&leetcode15：三数之和](https://leetcode-cn.com/problems/3sum/solution/xiao-nan-gua-pai-xu-shuang-zhi-zhen-by-h-i03k/)\n- [字节：N数之和](https://github.com/sisterAn/JavaScript-Algorithms/issues/128)\n- [腾讯：数组扁平化、去重、排序 ](https://github.com/sisterAn/JavaScript-Algorithms/issues/5)\n- [✅leetcode349：给定两个数组，编写一个函数来计算它们的交集](https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/xiao-nan-gua-pai-xu-jia-shuang-zhi-zhen-tbapt/)\n- [✅华为&leetcode146：设计和实现一个LRU（最近最少使用）缓存机制](https://leetcode-cn.com/problems/lru-cache/solution/xiao-nan-gua-shuang-xiang-lian-biao-ji-m-q7rt/)\n- [阿里算法题：编写一个函数计算多个数组的交集](https://github.com/sisterAn/JavaScript-Algorithms/issues/10)\n- [✅leetcode352: 将数据流变为多个不相交区间](https://leetcode-cn.com/problems/data-stream-as-disjoint-intervals/solution/xiao-nan-gua-he-li-li-yong-zhan-by-happy-rsd8/)\n\n#### 链表\n- [✅leetcode21：合并两个有序链表](https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/xiao-nan-gua-die-dai-by-happydemoney-c19o/)\n- [✅有赞&leetcode141：判断一个单链表是否有环](https://leetcode-cn.com/problems/linked-list-cycle/solution/xiao-nan-gua-kuai-man-zhi-zhen-by-happyd-hnyl/)\n- [✅图解leetcode206：反转链表](https://leetcode-cn.com/problems/reverse-linked-list/solution/xiao-nan-gua-xian-jin-hou-chu-zhan-by-ha-m56f/)\n- [✅leetcode876：求链表的中间结点](https://leetcode-cn.com/problems/middle-of-the-linked-list/solution/xiao-nan-gua-bian-li-lian-biao-ji-suan-c-nfvg/)\n- [✅leetcode19：删除链表倒数第 n 个结点](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/xiao-nan-gua-jian-dan-de-die-dai-by-happ-8mo6/)\n- [✅图解字节&leetcode160：编写一个程序，找到两个单链表相交的起始节点](https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiao-nan-gua-shuang-zhi-zhen-by-happydem-4gsx/)\n- [✅腾讯&leetcode611：有效三角形的个数](https://leetcode-cn.com/problems/valid-triangle-number/solution/xiao-nan-gua-pai-xu-er-fen-by-happydemon-vrkq/)\n- [快手算法：链表求和](https://github.com/sisterAn/JavaScript-Algorithms/issues/114)\n- [leetcode42：接雨水问题](https://github.com/sisterAn/JavaScript-Algorithms/issues/122)\n\n#### 字符串\n- [✅字节&leetcode151：翻转字符串里的单词](https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/xiao-yuan-sheng-apiyi-tao-lu-by-happydem-5yiv/)\n- [✅图解拼多多&leetcode14：最长公共前缀（LCP）](https://leetcode-cn.com/problems/longest-common-prefix/solution/xiao-zhan-jia-lin-shi-bian-liang-by-happ-jr44/)\n- [百度：实现一个函数，判断输入是不是回文字符串](https://github.com/sisterAn/JavaScript-Algorithms/issues/20)\n- [✅字节&Leetcode3：无重复字符的最长子串](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/xiao-dui-lie-by-happydemoney-k6uq/)\n- [✅Facebook&字节&leetcode415: 字符串相加](https://leetcode-cn.com/problems/add-strings/solution/xiao-shuang-zhi-zhen-die-dai-wei-bu-by-h-fi94/)\n- [✅腾讯&leetcode43：字符串相乘](https://leetcode-cn.com/problems/multiply-strings/solution/zi-fu-chuan-xiang-cheng-by-leetcode-solution/)\n- [✅腾讯&剑指 Offer 67. 把字符串转换成整数](https://leetcode-cn.com/problems/string-to-integer-atoi/solution/)\n\n#### 栈\n- [✅字节&leetcode155：最小栈（包含getMin函数的栈）](https://leetcode-cn.com/problems/min-stack/solution/xiao-nan-gua-zui-xiao-zhan-by-happydemon-4bbb/)\n- [✅图解腾讯&哔哩哔哩&leetcode20：有效的括号](https://leetcode-cn.com/problems/valid-parentheses/solution/xiao-nan-gua-zuo-jin-you-chu-by-happydem-kq7g/)\n- [✅leetcode1047：删除字符串中的所有相邻重复项](https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/solution/xiao-nan-gua-yong-zhan-jian-dan-chu-li-b-foi7/)\n- [leetcode1209：删除字符串中的所有相邻重复项 II](https://github.com/sisterAn/JavaScript-Algorithms/issues/27)\n- [面试真题：删除字符串中出现次数 >= 2 次的相邻字符](https://github.com/sisterAn/JavaScript-Algorithms/issues/28)\n\n#### 队列\n- [✅腾讯&剑指offer09：用两个栈实现队列](https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/xiao-nan-gua-zhu-zhan-fu-zhu-zhan-by-hap-tdmu/)\n- [✅leetcode239：滑动窗口最大值问题](https://leetcode-cn.com/problems/sliding-window-maximum/solution/hua-dong-chuang-kou-zui-da-zhi-by-leetco-ki6m/)\n- [✅字节&leetcode151：翻转字符串里的单词](https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/xiao-yuan-sheng-apiyi-tao-lu-by-happydem-5yiv/)\n- [✅字节&Leetcode3：无重复字符的最长子串](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/xiao-dui-lie-by-happydemoney-k6uq/)\n\n#### 哈希表\n- [✅leetcode349：给定两个数组，编写一个函数来计算它们的交集](https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/xiao-nan-gua-pai-xu-jia-shuang-zhi-zhen-tbapt/)\n- [✅字节&leetcode1：两数之和](https://leetcode-cn.com/problems/two-sum/solution/xiao-nan-gua-kong-jian-huan-shi-jian-by-9kjta/)\n- [✅腾讯&leetcode15：三数之和](https://leetcode-cn.com/problems/3sum/solution/xiao-nan-gua-pai-xu-shuang-zhi-zhen-by-h-i03k/)\n- [✅leetcode380：常数时间插入、删除和获取随机元素](https://leetcode-cn.com/problems/insert-delete-getrandom-o1/solution/chang-shu-shi-jian-cha-ru-shan-chu-he-huo-qu-sui-j/)\n- [✅剑指Offer50：第一个只出现一次的字符](https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/solution/xiao-nan-gua-ha-xi-biao-by-happydemoney-h6z6/)\n\n#### 二叉树\n\n##### 二叉树的遍历\n- [✅字节&leetcode144：二叉树的前序遍历](https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/)\n- [✅字节&leetcode94：二叉树的中序遍历](https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/)\n- [✅字节&leetcode145：二叉树的后序遍历](https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/)\n- [✅leetcode102：二叉树的层序遍历](https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/xiao-nan-gua-bfs-by-happydemoney-kgdd/)\n- [✅l字节&leetcode107：二叉树的层次遍历](https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/solution/xiao-nan-gua-bfszhan-by-happydemoney-e7tg/)\n\n##### 重构二叉树\n- [✅leetcode105：从前序与中序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/xiao-nan-gua-di-gui-by-happydemoney-7jkz/)\n\n##### 二叉树进阶\n- [✅l腾讯&leetcode104：二叉树的最大深度](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution/xiao-nan-gua-bfs-by-happydemoney-xlgv/)\n- [✅字节&腾讯leetcode236：二叉树的最近公共祖先](https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/xiao-nan-gua-hou-xu-bian-li-by-happydemo-xa1z/)\n- [✅剑指Offer&leetcode110：平衡二叉树](https://leetcode-cn.com/problems/balanced-binary-tree/solution/xiao-nan-gua-hou-xu-bian-li-by-happydemo-y9aj/)\n- [✅字节&leetcode112：路径总和](https://leetcode-cn.com/problems/path-sum/solution/xiao-nan-gua-qian-xu-bian-li-by-happydem-6brs/)\n- [✅剑指Offer&leetcode101：对称二叉树](https://leetcode-cn.com/problems/symmetric-tree/solution/xiao-nan-gua-di-gui-by-happydemoney-45at/)\n- [字节一面：给定一个二叉树, 找到该树中两个指定节点间的最短距离](https://github.com/sisterAn/JavaScript-Algorithms/issues/82)\n- [✅腾讯&leetcode230：二叉搜索树中第K小的元素](https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/solution/xiao-nan-gua-dfs-by-happydemoney-x8t7/)\n- [二叉树的左右子树交换](https://github.com/sisterAn/JavaScript-Algorithms/issues/141)\n\n#### 堆\n- [腾讯&字节等：最小的k个数](https://github.com/sisterAn/JavaScript-Algorithms/issues/59)\n- [leetcode347：前 K 个高频元素](https://github.com/sisterAn/JavaScript-Algorithms/issues/61)\n- [字节&leetcode215：数组中的第K个最大元素](https://github.com/sisterAn/JavaScript-Algorithms/issues/62)\n- [剑指Offer&leetcode295：数据流的中位数](https://github.com/sisterAn/JavaScript-Algorithms/issues/63)\n\n#### 图\n- [leetcode997：找到小镇的法官](https://github.com/sisterAn/JavaScript-Algorithms/issues/65)\n- [leetcode207：课程表问题](https://github.com/sisterAn/JavaScript-Algorithms/issues/66)\n- [剑指Offer&Bigo：旋转矩阵](https://github.com/sisterAn/JavaScript-Algorithms/issues/57)\n- [腾讯&leetcode：螺旋矩阵 II](https://github.com/sisterAn/JavaScript-Algorithms/issues/134)\n\n###  算法技巧\n\n#### 排序算法\n- [腾讯&字节：介绍一下快排原理以及时间复杂度，并实现一个快排](https://github.com/sisterAn/JavaScript-Algorithms/issues/70)\n- [字节&阿里&网易&leetcode384：打乱数组（洗牌算法）](https://github.com/sisterAn/JavaScript-Algorithms/issues/74)\n- [阿里五面：说下希尔排序的过程？ 希尔排序的时间复杂度和空间复杂度又是多少？](https://github.com/sisterAn/JavaScript-Algorithms/issues/75)\n- [腾讯&leetcode148：排序链表](https://github.com/sisterAn/JavaScript-Algorithms/issues/79)\n- [字节算法题：扑克牌问题（反向推导题）](https://github.com/sisterAn/JavaScript-Algorithms/issues/80)\n- [腾讯&leetcode611：有效三角形的个数](https://github.com/sisterAn/JavaScript-Algorithms/issues/93)\n\n#### 查找算法\n- [✅腾讯：简述二分查找算法与时间复杂度，并实现一个二分查找算法](https://leetcode-cn.com/problems/binary-search/solution/er-fen-cha-zhao-by-leetcode-solution-f0xw/)\n- [✅腾讯&字节&leetcode34：在排序数组中查找元素的第一个和最后一个位置](https://labuladong.gitee.io/algo/1/9/)\n- [腾讯&leetcode230：二叉搜索树中第K小的元素](https://github.com/sisterAn/JavaScript-Algorithms/issues/86)\n- [腾讯&leetcode875：爱吃香蕉的珂珂](https://github.com/sisterAn/JavaScript-Algorithms/issues/109)\n\n#### 动态规划\n- [✅字节&leetcode70：爬楼梯问题](https://leetcode-cn.com/problems/climbing-stairs/solution/xiao-nan-gua-jian-dan-di-gui-by-happydem-ribe/)\n- [字节&leetcode746：使用最小花费爬楼梯](https://github.com/sisterAn/JavaScript-Algorithms/issues/91)\n- [字节二面&leetcode53：最大子序和](https://github.com/sisterAn/JavaScript-Algorithms/issues/94)\n- [✅腾讯&leetcode121：买卖股票的最佳时机](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/xiao-dong-tai-gui-hua-by-happydemoney-rfwv/)\n- [腾讯&leetcode647：回文子串](https://github.com/sisterAn/JavaScript-Algorithms/issues/107)\n- [腾讯&leetcode5：最长回文子串](https://github.com/sisterAn/JavaScript-Algorithms/issues/121)\n- [阿里&网易&leetcode64：最小路径和](https://github.com/sisterAn/JavaScript-Algorithms/issues/139)\n\n#### 贪心算法\n- [✅字节&leetcode122：买卖股票的最佳时机 II](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/xiao-tan-xin-by-happydemoney-mafm/)\n- [✅字节&leetcode455：分发饼干](https://leetcode-cn.com/problems/assign-cookies/solution/xiao-shuang-zhi-zhen-by-happydemoney-rmza/)\n- [✅腾讯&leetcode659：分割数组为连续子序列](https://leetcode-cn.com/problems/split-array-into-consecutive-subsequences/solution/fen-ge-shu-zu-wei-lian-xu-zi-xu-lie-by-l-lbs5/)\n\n#### 回溯算法\n- [✅百度&leetcode46：全排列问题](https://leetcode-cn.com/problems/permutations/solution/xiao-hui-su-fa-by-happydemoney-1hi0/)\n- [✅腾讯&leetcode22：括号生成](https://leetcode-cn.com/problems/generate-parentheses/solution/gua-hao-sheng-cheng-by-leetcode-solution/)\n\n### 设计\n\n- [✅华为&leetcode146：设计和实现一个LRU（最近最少使用）缓存机制](https://leetcode-cn.com/problems/lru-cache/solution/xiao-nan-gua-shuang-xiang-lian-biao-ji-m-q7rt/)\n- [✅leetcode297. 二叉树的序列化与反序列化](https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/er-cha-shu-de-xu-lie-hua-yu-fan-xu-lie-hua-by-le-2/)\n","slug":"algorithms-test","published":1,"date":"2022-09-22T03:27:44.973Z","updated":"2022-09-28T07:19:12.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lby4o50002p0w143c89fhg","content":"<p><a href=\"https://github.com/sisterAn/JavaScript-Algorithms\">JavaScript-Algorithms</a> - 题源地址<br><a href=\"https://labuladong.gitee.io/algo/\">labuladong的算法小抄</a> - 好的算法学习资料</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>作为业务开发，虽然在平常开发中很少写算法，但当我们需要深入框架、开发语言、开源库时，懂算法将大大提高我们看源码的能力。例如 ：</p>\n<ul>\n<li>virtual-dom diff 算法做了一些约定，后将原先 O(n3) 的时间复杂度降到了O(n) ，核心原理就是一个树的深度优先搜索</li>\n<li>babel 这些就是一些编译原理的 parser 生成抽象语法树的知识，再将抽象语法树进行转换操作生成文件</li>\n<li>浏览器的 history，底层可以使用栈来实现</li>\n<li>webpack 中利用 tree-shaking 优化</li>\n<li>v8 中的调用栈、消息队列等等</li>\n</ul>\n<p>这些就大量使用了算法，看懂了就能更好的了解它们的性能，更高效的解决问题，提升我们的代码质量与思维视野，进阶到更高 Level，赚更多钱💰💰💰。</p>\n<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2><p>给自己定个小目标，把下面深入掌握算法的小题全过一遍，每天最少一题；<br>目前先附上源地址，后续自己做好后更新题目后的链接地址，并标记清除，比如 ✅图解leetcode88：合并两个有序数组</p>\n<h2 id=\"深入掌握算法\"><a href=\"#深入掌握算法\" class=\"headerlink\" title=\"深入掌握算法\"></a>深入掌握算法</h2><p>分为四个模块：数据结构、算法、设计、基础架构等</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><h4 id=\"数组篇\"><a href=\"#数组篇\" class=\"headerlink\" title=\"数组篇\"></a>数组篇</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/merge-sorted-array/solution/tou-ge-lan-shi-yong-yuan-sheng-api-by-ha-qpg5/\">✅图解leetcode88：合并两个有序数组</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/two-sum/solution/xiao-nan-gua-kong-jian-huan-shi-jian-by-9kjta/\">✅字节&amp;leetcode1：两数之和</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/3sum/solution/xiao-nan-gua-pai-xu-shuang-zhi-zhen-by-h-i03k/\">✅腾讯&amp;leetcode15：三数之和</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/128\">字节：N数之和</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/5\">腾讯：数组扁平化、去重、排序 </a></li>\n<li><a href=\"https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/xiao-nan-gua-pai-xu-jia-shuang-zhi-zhen-tbapt/\">✅leetcode349：给定两个数组，编写一个函数来计算它们的交集</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/lru-cache/solution/xiao-nan-gua-shuang-xiang-lian-biao-ji-m-q7rt/\">✅华为&amp;leetcode146：设计和实现一个LRU（最近最少使用）缓存机制</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/10\">阿里算法题：编写一个函数计算多个数组的交集</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/data-stream-as-disjoint-intervals/solution/xiao-nan-gua-he-li-li-yong-zhan-by-happy-rsd8/\">✅leetcode352: 将数据流变为多个不相交区间</a></li>\n</ul>\n<h4 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/xiao-nan-gua-die-dai-by-happydemoney-c19o/\">✅leetcode21：合并两个有序链表</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/solution/xiao-nan-gua-kuai-man-zhi-zhen-by-happyd-hnyl/\">✅有赞&amp;leetcode141：判断一个单链表是否有环</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/reverse-linked-list/solution/xiao-nan-gua-xian-jin-hou-chu-zhan-by-ha-m56f/\">✅图解leetcode206：反转链表</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/middle-of-the-linked-list/solution/xiao-nan-gua-bian-li-lian-biao-ji-suan-c-nfvg/\">✅leetcode876：求链表的中间结点</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/xiao-nan-gua-jian-dan-de-die-dai-by-happ-8mo6/\">✅leetcode19：删除链表倒数第 n 个结点</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiao-nan-gua-shuang-zhi-zhen-by-happydem-4gsx/\">✅图解字节&amp;leetcode160：编写一个程序，找到两个单链表相交的起始节点</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/valid-triangle-number/solution/xiao-nan-gua-pai-xu-er-fen-by-happydemon-vrkq/\">✅腾讯&amp;leetcode611：有效三角形的个数</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/114\">快手算法：链表求和</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/122\">leetcode42：接雨水问题</a></li>\n</ul>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/xiao-yuan-sheng-apiyi-tao-lu-by-happydem-5yiv/\">✅字节&amp;leetcode151：翻转字符串里的单词</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/longest-common-prefix/solution/xiao-zhan-jia-lin-shi-bian-liang-by-happ-jr44/\">✅图解拼多多&amp;leetcode14：最长公共前缀（LCP）</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/20\">百度：实现一个函数，判断输入是不是回文字符串</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/xiao-dui-lie-by-happydemoney-k6uq/\">✅字节&amp;Leetcode3：无重复字符的最长子串</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/add-strings/solution/xiao-shuang-zhi-zhen-die-dai-wei-bu-by-h-fi94/\">✅Facebook&amp;字节&amp;leetcode415: 字符串相加</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/multiply-strings/solution/zi-fu-chuan-xiang-cheng-by-leetcode-solution/\">✅腾讯&amp;leetcode43：字符串相乘</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/string-to-integer-atoi/solution/\">✅腾讯&amp;剑指 Offer 67. 把字符串转换成整数</a></li>\n</ul>\n<h4 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/min-stack/solution/xiao-nan-gua-zui-xiao-zhan-by-happydemon-4bbb/\">✅字节&amp;leetcode155：最小栈（包含getMin函数的栈）</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/valid-parentheses/solution/xiao-nan-gua-zuo-jin-you-chu-by-happydem-kq7g/\">✅图解腾讯&amp;哔哩哔哩&amp;leetcode20：有效的括号</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/solution/xiao-nan-gua-yong-zhan-jian-dan-chu-li-b-foi7/\">✅leetcode1047：删除字符串中的所有相邻重复项</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/27\">leetcode1209：删除字符串中的所有相邻重复项 II</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/28\">面试真题：删除字符串中出现次数 &gt;= 2 次的相邻字符</a></li>\n</ul>\n<h4 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/xiao-nan-gua-zhu-zhan-fu-zhu-zhan-by-hap-tdmu/\">✅腾讯&amp;剑指offer09：用两个栈实现队列</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/sliding-window-maximum/solution/hua-dong-chuang-kou-zui-da-zhi-by-leetco-ki6m/\">✅leetcode239：滑动窗口最大值问题</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/xiao-yuan-sheng-apiyi-tao-lu-by-happydem-5yiv/\">✅字节&amp;leetcode151：翻转字符串里的单词</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/xiao-dui-lie-by-happydemoney-k6uq/\">✅字节&amp;Leetcode3：无重复字符的最长子串</a></li>\n</ul>\n<h4 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/xiao-nan-gua-pai-xu-jia-shuang-zhi-zhen-tbapt/\">✅leetcode349：给定两个数组，编写一个函数来计算它们的交集</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/two-sum/solution/xiao-nan-gua-kong-jian-huan-shi-jian-by-9kjta/\">✅字节&amp;leetcode1：两数之和</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/3sum/solution/xiao-nan-gua-pai-xu-shuang-zhi-zhen-by-h-i03k/\">✅腾讯&amp;leetcode15：三数之和</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/insert-delete-getrandom-o1/solution/chang-shu-shi-jian-cha-ru-shan-chu-he-huo-qu-sui-j/\">✅leetcode380：常数时间插入、删除和获取随机元素</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/solution/xiao-nan-gua-ha-xi-biao-by-happydemoney-h6z6/\">✅剑指Offer50：第一个只出现一次的字符</a></li>\n</ul>\n<h4 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h4><h5 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h5><ul>\n<li><a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/\">✅字节&amp;leetcode144：二叉树的前序遍历</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/\">✅字节&amp;leetcode94：二叉树的中序遍历</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/\">✅字节&amp;leetcode145：二叉树的后序遍历</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/xiao-nan-gua-bfs-by-happydemoney-kgdd/\">✅leetcode102：二叉树的层序遍历</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/solution/xiao-nan-gua-bfszhan-by-happydemoney-e7tg/\">✅l字节&amp;leetcode107：二叉树的层次遍历</a></li>\n</ul>\n<h5 id=\"重构二叉树\"><a href=\"#重构二叉树\" class=\"headerlink\" title=\"重构二叉树\"></a>重构二叉树</h5><ul>\n<li><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/xiao-nan-gua-di-gui-by-happydemoney-7jkz/\">✅leetcode105：从前序与中序遍历序列构造二叉树</a></li>\n</ul>\n<h5 id=\"二叉树进阶\"><a href=\"#二叉树进阶\" class=\"headerlink\" title=\"二叉树进阶\"></a>二叉树进阶</h5><ul>\n<li><a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution/xiao-nan-gua-bfs-by-happydemoney-xlgv/\">✅l腾讯&amp;leetcode104：二叉树的最大深度</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/xiao-nan-gua-hou-xu-bian-li-by-happydemo-xa1z/\">✅字节&amp;腾讯leetcode236：二叉树的最近公共祖先</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/solution/xiao-nan-gua-hou-xu-bian-li-by-happydemo-y9aj/\">✅剑指Offer&amp;leetcode110：平衡二叉树</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/path-sum/solution/xiao-nan-gua-qian-xu-bian-li-by-happydem-6brs/\">✅字节&amp;leetcode112：路径总和</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/symmetric-tree/solution/xiao-nan-gua-di-gui-by-happydemoney-45at/\">✅剑指Offer&amp;leetcode101：对称二叉树</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/82\">字节一面：给定一个二叉树, 找到该树中两个指定节点间的最短距离</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/solution/xiao-nan-gua-dfs-by-happydemoney-x8t7/\">✅腾讯&amp;leetcode230：二叉搜索树中第K小的元素</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/141\">二叉树的左右子树交换</a></li>\n</ul>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><ul>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/59\">腾讯&amp;字节等：最小的k个数</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/61\">leetcode347：前 K 个高频元素</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/62\">字节&amp;leetcode215：数组中的第K个最大元素</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/63\">剑指Offer&amp;leetcode295：数据流的中位数</a></li>\n</ul>\n<h4 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h4><ul>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/65\">leetcode997：找到小镇的法官</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/66\">leetcode207：课程表问题</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/57\">剑指Offer&amp;Bigo：旋转矩阵</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/134\">腾讯&amp;leetcode：螺旋矩阵 II</a></li>\n</ul>\n<h3 id=\"算法技巧\"><a href=\"#算法技巧\" class=\"headerlink\" title=\"算法技巧\"></a>算法技巧</h3><h4 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h4><ul>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/70\">腾讯&amp;字节：介绍一下快排原理以及时间复杂度，并实现一个快排</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/74\">字节&amp;阿里&amp;网易&amp;leetcode384：打乱数组（洗牌算法）</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/75\">阿里五面：说下希尔排序的过程？ 希尔排序的时间复杂度和空间复杂度又是多少？</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/79\">腾讯&amp;leetcode148：排序链表</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/80\">字节算法题：扑克牌问题（反向推导题）</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/93\">腾讯&amp;leetcode611：有效三角形的个数</a></li>\n</ul>\n<h4 id=\"查找算法\"><a href=\"#查找算法\" class=\"headerlink\" title=\"查找算法\"></a>查找算法</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/binary-search/solution/er-fen-cha-zhao-by-leetcode-solution-f0xw/\">✅腾讯：简述二分查找算法与时间复杂度，并实现一个二分查找算法</a></li>\n<li><a href=\"https://labuladong.gitee.io/algo/1/9/\">✅腾讯&amp;字节&amp;leetcode34：在排序数组中查找元素的第一个和最后一个位置</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/86\">腾讯&amp;leetcode230：二叉搜索树中第K小的元素</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/109\">腾讯&amp;leetcode875：爱吃香蕉的珂珂</a></li>\n</ul>\n<h4 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/climbing-stairs/solution/xiao-nan-gua-jian-dan-di-gui-by-happydem-ribe/\">✅字节&amp;leetcode70：爬楼梯问题</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/91\">字节&amp;leetcode746：使用最小花费爬楼梯</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/94\">字节二面&amp;leetcode53：最大子序和</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/xiao-dong-tai-gui-hua-by-happydemoney-rfwv/\">✅腾讯&amp;leetcode121：买卖股票的最佳时机</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/107\">腾讯&amp;leetcode647：回文子串</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/121\">腾讯&amp;leetcode5：最长回文子串</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/139\">阿里&amp;网易&amp;leetcode64：最小路径和</a></li>\n</ul>\n<h4 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/xiao-tan-xin-by-happydemoney-mafm/\">✅字节&amp;leetcode122：买卖股票的最佳时机 II</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/assign-cookies/solution/xiao-shuang-zhi-zhen-by-happydemoney-rmza/\">✅字节&amp;leetcode455：分发饼干</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/split-array-into-consecutive-subsequences/solution/fen-ge-shu-zu-wei-lian-xu-zi-xu-lie-by-l-lbs5/\">✅腾讯&amp;leetcode659：分割数组为连续子序列</a></li>\n</ul>\n<h4 id=\"回溯算法\"><a href=\"#回溯算法\" class=\"headerlink\" title=\"回溯算法\"></a>回溯算法</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/permutations/solution/xiao-hui-su-fa-by-happydemoney-1hi0/\">✅百度&amp;leetcode46：全排列问题</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/generate-parentheses/solution/gua-hao-sheng-cheng-by-leetcode-solution/\">✅腾讯&amp;leetcode22：括号生成</a></li>\n</ul>\n<h3 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h3><ul>\n<li><a href=\"https://leetcode-cn.com/problems/lru-cache/solution/xiao-nan-gua-shuang-xiang-lian-biao-ji-m-q7rt/\">✅华为&amp;leetcode146：设计和实现一个LRU（最近最少使用）缓存机制</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/er-cha-shu-de-xu-lie-hua-yu-fan-xu-lie-hua-by-le-2/\">✅leetcode297. 二叉树的序列化与反序列化</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/sisterAn/JavaScript-Algorithms\">JavaScript-Algorithms</a> - 题源地址<br><a href=\"https://labuladong.gitee.io/algo/\">labuladong的算法小抄</a> - 好的算法学习资料</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>作为业务开发，虽然在平常开发中很少写算法，但当我们需要深入框架、开发语言、开源库时，懂算法将大大提高我们看源码的能力。例如 ：</p>\n<ul>\n<li>virtual-dom diff 算法做了一些约定，后将原先 O(n3) 的时间复杂度降到了O(n) ，核心原理就是一个树的深度优先搜索</li>\n<li>babel 这些就是一些编译原理的 parser 生成抽象语法树的知识，再将抽象语法树进行转换操作生成文件</li>\n<li>浏览器的 history，底层可以使用栈来实现</li>\n<li>webpack 中利用 tree-shaking 优化</li>\n<li>v8 中的调用栈、消息队列等等</li>\n</ul>\n<p>这些就大量使用了算法，看懂了就能更好的了解它们的性能，更高效的解决问题，提升我们的代码质量与思维视野，进阶到更高 Level，赚更多钱💰💰💰。</p>\n<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2><p>给自己定个小目标，把下面深入掌握算法的小题全过一遍，每天最少一题；<br>目前先附上源地址，后续自己做好后更新题目后的链接地址，并标记清除，比如 ✅图解leetcode88：合并两个有序数组</p>\n<h2 id=\"深入掌握算法\"><a href=\"#深入掌握算法\" class=\"headerlink\" title=\"深入掌握算法\"></a>深入掌握算法</h2><p>分为四个模块：数据结构、算法、设计、基础架构等</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><h4 id=\"数组篇\"><a href=\"#数组篇\" class=\"headerlink\" title=\"数组篇\"></a>数组篇</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/merge-sorted-array/solution/tou-ge-lan-shi-yong-yuan-sheng-api-by-ha-qpg5/\">✅图解leetcode88：合并两个有序数组</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/two-sum/solution/xiao-nan-gua-kong-jian-huan-shi-jian-by-9kjta/\">✅字节&amp;leetcode1：两数之和</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/3sum/solution/xiao-nan-gua-pai-xu-shuang-zhi-zhen-by-h-i03k/\">✅腾讯&amp;leetcode15：三数之和</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/128\">字节：N数之和</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/5\">腾讯：数组扁平化、去重、排序 </a></li>\n<li><a href=\"https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/xiao-nan-gua-pai-xu-jia-shuang-zhi-zhen-tbapt/\">✅leetcode349：给定两个数组，编写一个函数来计算它们的交集</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/lru-cache/solution/xiao-nan-gua-shuang-xiang-lian-biao-ji-m-q7rt/\">✅华为&amp;leetcode146：设计和实现一个LRU（最近最少使用）缓存机制</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/10\">阿里算法题：编写一个函数计算多个数组的交集</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/data-stream-as-disjoint-intervals/solution/xiao-nan-gua-he-li-li-yong-zhan-by-happy-rsd8/\">✅leetcode352: 将数据流变为多个不相交区间</a></li>\n</ul>\n<h4 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/xiao-nan-gua-die-dai-by-happydemoney-c19o/\">✅leetcode21：合并两个有序链表</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/solution/xiao-nan-gua-kuai-man-zhi-zhen-by-happyd-hnyl/\">✅有赞&amp;leetcode141：判断一个单链表是否有环</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/reverse-linked-list/solution/xiao-nan-gua-xian-jin-hou-chu-zhan-by-ha-m56f/\">✅图解leetcode206：反转链表</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/middle-of-the-linked-list/solution/xiao-nan-gua-bian-li-lian-biao-ji-suan-c-nfvg/\">✅leetcode876：求链表的中间结点</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/xiao-nan-gua-jian-dan-de-die-dai-by-happ-8mo6/\">✅leetcode19：删除链表倒数第 n 个结点</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiao-nan-gua-shuang-zhi-zhen-by-happydem-4gsx/\">✅图解字节&amp;leetcode160：编写一个程序，找到两个单链表相交的起始节点</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/valid-triangle-number/solution/xiao-nan-gua-pai-xu-er-fen-by-happydemon-vrkq/\">✅腾讯&amp;leetcode611：有效三角形的个数</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/114\">快手算法：链表求和</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/122\">leetcode42：接雨水问题</a></li>\n</ul>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/xiao-yuan-sheng-apiyi-tao-lu-by-happydem-5yiv/\">✅字节&amp;leetcode151：翻转字符串里的单词</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/longest-common-prefix/solution/xiao-zhan-jia-lin-shi-bian-liang-by-happ-jr44/\">✅图解拼多多&amp;leetcode14：最长公共前缀（LCP）</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/20\">百度：实现一个函数，判断输入是不是回文字符串</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/xiao-dui-lie-by-happydemoney-k6uq/\">✅字节&amp;Leetcode3：无重复字符的最长子串</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/add-strings/solution/xiao-shuang-zhi-zhen-die-dai-wei-bu-by-h-fi94/\">✅Facebook&amp;字节&amp;leetcode415: 字符串相加</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/multiply-strings/solution/zi-fu-chuan-xiang-cheng-by-leetcode-solution/\">✅腾讯&amp;leetcode43：字符串相乘</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/string-to-integer-atoi/solution/\">✅腾讯&amp;剑指 Offer 67. 把字符串转换成整数</a></li>\n</ul>\n<h4 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/min-stack/solution/xiao-nan-gua-zui-xiao-zhan-by-happydemon-4bbb/\">✅字节&amp;leetcode155：最小栈（包含getMin函数的栈）</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/valid-parentheses/solution/xiao-nan-gua-zuo-jin-you-chu-by-happydem-kq7g/\">✅图解腾讯&amp;哔哩哔哩&amp;leetcode20：有效的括号</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/solution/xiao-nan-gua-yong-zhan-jian-dan-chu-li-b-foi7/\">✅leetcode1047：删除字符串中的所有相邻重复项</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/27\">leetcode1209：删除字符串中的所有相邻重复项 II</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/28\">面试真题：删除字符串中出现次数 &gt;= 2 次的相邻字符</a></li>\n</ul>\n<h4 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/xiao-nan-gua-zhu-zhan-fu-zhu-zhan-by-hap-tdmu/\">✅腾讯&amp;剑指offer09：用两个栈实现队列</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/sliding-window-maximum/solution/hua-dong-chuang-kou-zui-da-zhi-by-leetco-ki6m/\">✅leetcode239：滑动窗口最大值问题</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/xiao-yuan-sheng-apiyi-tao-lu-by-happydem-5yiv/\">✅字节&amp;leetcode151：翻转字符串里的单词</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/xiao-dui-lie-by-happydemoney-k6uq/\">✅字节&amp;Leetcode3：无重复字符的最长子串</a></li>\n</ul>\n<h4 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/xiao-nan-gua-pai-xu-jia-shuang-zhi-zhen-tbapt/\">✅leetcode349：给定两个数组，编写一个函数来计算它们的交集</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/two-sum/solution/xiao-nan-gua-kong-jian-huan-shi-jian-by-9kjta/\">✅字节&amp;leetcode1：两数之和</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/3sum/solution/xiao-nan-gua-pai-xu-shuang-zhi-zhen-by-h-i03k/\">✅腾讯&amp;leetcode15：三数之和</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/insert-delete-getrandom-o1/solution/chang-shu-shi-jian-cha-ru-shan-chu-he-huo-qu-sui-j/\">✅leetcode380：常数时间插入、删除和获取随机元素</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/solution/xiao-nan-gua-ha-xi-biao-by-happydemoney-h6z6/\">✅剑指Offer50：第一个只出现一次的字符</a></li>\n</ul>\n<h4 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h4><h5 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h5><ul>\n<li><a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/\">✅字节&amp;leetcode144：二叉树的前序遍历</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/\">✅字节&amp;leetcode94：二叉树的中序遍历</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/xiao-nan-gua-di-gui-jie-jue-qian-zhong-h-lwxw/\">✅字节&amp;leetcode145：二叉树的后序遍历</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/xiao-nan-gua-bfs-by-happydemoney-kgdd/\">✅leetcode102：二叉树的层序遍历</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/solution/xiao-nan-gua-bfszhan-by-happydemoney-e7tg/\">✅l字节&amp;leetcode107：二叉树的层次遍历</a></li>\n</ul>\n<h5 id=\"重构二叉树\"><a href=\"#重构二叉树\" class=\"headerlink\" title=\"重构二叉树\"></a>重构二叉树</h5><ul>\n<li><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/xiao-nan-gua-di-gui-by-happydemoney-7jkz/\">✅leetcode105：从前序与中序遍历序列构造二叉树</a></li>\n</ul>\n<h5 id=\"二叉树进阶\"><a href=\"#二叉树进阶\" class=\"headerlink\" title=\"二叉树进阶\"></a>二叉树进阶</h5><ul>\n<li><a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution/xiao-nan-gua-bfs-by-happydemoney-xlgv/\">✅l腾讯&amp;leetcode104：二叉树的最大深度</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/xiao-nan-gua-hou-xu-bian-li-by-happydemo-xa1z/\">✅字节&amp;腾讯leetcode236：二叉树的最近公共祖先</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/solution/xiao-nan-gua-hou-xu-bian-li-by-happydemo-y9aj/\">✅剑指Offer&amp;leetcode110：平衡二叉树</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/path-sum/solution/xiao-nan-gua-qian-xu-bian-li-by-happydem-6brs/\">✅字节&amp;leetcode112：路径总和</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/symmetric-tree/solution/xiao-nan-gua-di-gui-by-happydemoney-45at/\">✅剑指Offer&amp;leetcode101：对称二叉树</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/82\">字节一面：给定一个二叉树, 找到该树中两个指定节点间的最短距离</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/solution/xiao-nan-gua-dfs-by-happydemoney-x8t7/\">✅腾讯&amp;leetcode230：二叉搜索树中第K小的元素</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/141\">二叉树的左右子树交换</a></li>\n</ul>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><ul>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/59\">腾讯&amp;字节等：最小的k个数</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/61\">leetcode347：前 K 个高频元素</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/62\">字节&amp;leetcode215：数组中的第K个最大元素</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/63\">剑指Offer&amp;leetcode295：数据流的中位数</a></li>\n</ul>\n<h4 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h4><ul>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/65\">leetcode997：找到小镇的法官</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/66\">leetcode207：课程表问题</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/57\">剑指Offer&amp;Bigo：旋转矩阵</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/134\">腾讯&amp;leetcode：螺旋矩阵 II</a></li>\n</ul>\n<h3 id=\"算法技巧\"><a href=\"#算法技巧\" class=\"headerlink\" title=\"算法技巧\"></a>算法技巧</h3><h4 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h4><ul>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/70\">腾讯&amp;字节：介绍一下快排原理以及时间复杂度，并实现一个快排</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/74\">字节&amp;阿里&amp;网易&amp;leetcode384：打乱数组（洗牌算法）</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/75\">阿里五面：说下希尔排序的过程？ 希尔排序的时间复杂度和空间复杂度又是多少？</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/79\">腾讯&amp;leetcode148：排序链表</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/80\">字节算法题：扑克牌问题（反向推导题）</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/93\">腾讯&amp;leetcode611：有效三角形的个数</a></li>\n</ul>\n<h4 id=\"查找算法\"><a href=\"#查找算法\" class=\"headerlink\" title=\"查找算法\"></a>查找算法</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/binary-search/solution/er-fen-cha-zhao-by-leetcode-solution-f0xw/\">✅腾讯：简述二分查找算法与时间复杂度，并实现一个二分查找算法</a></li>\n<li><a href=\"https://labuladong.gitee.io/algo/1/9/\">✅腾讯&amp;字节&amp;leetcode34：在排序数组中查找元素的第一个和最后一个位置</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/86\">腾讯&amp;leetcode230：二叉搜索树中第K小的元素</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/109\">腾讯&amp;leetcode875：爱吃香蕉的珂珂</a></li>\n</ul>\n<h4 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/climbing-stairs/solution/xiao-nan-gua-jian-dan-di-gui-by-happydem-ribe/\">✅字节&amp;leetcode70：爬楼梯问题</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/91\">字节&amp;leetcode746：使用最小花费爬楼梯</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/94\">字节二面&amp;leetcode53：最大子序和</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/xiao-dong-tai-gui-hua-by-happydemoney-rfwv/\">✅腾讯&amp;leetcode121：买卖股票的最佳时机</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/107\">腾讯&amp;leetcode647：回文子串</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/121\">腾讯&amp;leetcode5：最长回文子串</a></li>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/139\">阿里&amp;网易&amp;leetcode64：最小路径和</a></li>\n</ul>\n<h4 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/xiao-tan-xin-by-happydemoney-mafm/\">✅字节&amp;leetcode122：买卖股票的最佳时机 II</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/assign-cookies/solution/xiao-shuang-zhi-zhen-by-happydemoney-rmza/\">✅字节&amp;leetcode455：分发饼干</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/split-array-into-consecutive-subsequences/solution/fen-ge-shu-zu-wei-lian-xu-zi-xu-lie-by-l-lbs5/\">✅腾讯&amp;leetcode659：分割数组为连续子序列</a></li>\n</ul>\n<h4 id=\"回溯算法\"><a href=\"#回溯算法\" class=\"headerlink\" title=\"回溯算法\"></a>回溯算法</h4><ul>\n<li><a href=\"https://leetcode-cn.com/problems/permutations/solution/xiao-hui-su-fa-by-happydemoney-1hi0/\">✅百度&amp;leetcode46：全排列问题</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/generate-parentheses/solution/gua-hao-sheng-cheng-by-leetcode-solution/\">✅腾讯&amp;leetcode22：括号生成</a></li>\n</ul>\n<h3 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h3><ul>\n<li><a href=\"https://leetcode-cn.com/problems/lru-cache/solution/xiao-nan-gua-shuang-xiang-lian-biao-ji-m-q7rt/\">✅华为&amp;leetcode146：设计和实现一个LRU（最近最少使用）缓存机制</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/er-cha-shu-de-xu-lie-hua-yu-fan-xu-lie-hua-by-le-2/\">✅leetcode297. 二叉树的序列化与反序列化</a></li>\n</ul>\n"},{"title":"【实现API】数组reduce方法的实现","index_img":"/img/reduce.webp","_content":"[MDN-Array.prototype.reduce](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)\n\n##\t介绍\n\nreduce() 方法对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。\n\n第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为 0 的元素开始执行，则需要传递初始值。否则，数组索引为 0 的元素将被作为初始值 initialValue，迭代器将从第二个元素开始执行（索引为 1 而不是 0）。\n\n##\t用法\n\n```js\nconst array1 = [1, 2, 3, 4];\n\n// 0 + 1 + 2 + 3 + 4\nconst initialValue = 0;\nconst sumWithInitial = array1.reduce(\n  (previousValue, currentValue) => previousValue + currentValue,\n  initialValue\n);\n\nconsole.log(sumWithInitial);\n// expected output: 10\n```\n\n##\t实现\n\n```js\nArray.prototype.reduceFn = function (reducer/*, initValue*/) {\n  // reducer必须是一个函数\n  if (typeof reducer !== 'function') {\n    throw new TypeError(`${reducer} is not a function.`);\n  }\n  // 是否包含初始值\n  const hasInitValue = arguments.length > 1;\n  // 当前遍历的数组\n  const array = Object(this);\n  const length = array.length;\n  // 数组长度要大于0或包含初始值\n  if (length === 0 && !hasInitValue) {\n    throw new TypeError('Reduce of empty array with no initial value');\n  }\n  // 上一次调用 reducer 时的返回值, 此处为初始值赋值\n  let previousValue = hasInitValue ? arguments[1] : array[0];\n  // 数组中正在处理的元素的索引\n  let currentIndex = hasInitValue ? 0 : 1;\n  while (currentIndex < length) {\n    previousValue = reducer(previousValue, array[currentIndex], currentIndex, array);\n    currentIndex ++;\n  }\n  return previousValue;\n};\n\n// test\n[1, 2, 3, 4, 5].reduceFn((prev, cur) => prev + cur); // 15\n[1, 2, 3, 4, 5].reduceFn((prev, cur) => prev + cur, 10); // 25\n```","source":"_posts/reduce.md","raw":"---\ntitle: 【实现API】数组reduce方法的实现\nindex_img: /img/reduce.webp\n---\n[MDN-Array.prototype.reduce](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)\n\n##\t介绍\n\nreduce() 方法对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。\n\n第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为 0 的元素开始执行，则需要传递初始值。否则，数组索引为 0 的元素将被作为初始值 initialValue，迭代器将从第二个元素开始执行（索引为 1 而不是 0）。\n\n##\t用法\n\n```js\nconst array1 = [1, 2, 3, 4];\n\n// 0 + 1 + 2 + 3 + 4\nconst initialValue = 0;\nconst sumWithInitial = array1.reduce(\n  (previousValue, currentValue) => previousValue + currentValue,\n  initialValue\n);\n\nconsole.log(sumWithInitial);\n// expected output: 10\n```\n\n##\t实现\n\n```js\nArray.prototype.reduceFn = function (reducer/*, initValue*/) {\n  // reducer必须是一个函数\n  if (typeof reducer !== 'function') {\n    throw new TypeError(`${reducer} is not a function.`);\n  }\n  // 是否包含初始值\n  const hasInitValue = arguments.length > 1;\n  // 当前遍历的数组\n  const array = Object(this);\n  const length = array.length;\n  // 数组长度要大于0或包含初始值\n  if (length === 0 && !hasInitValue) {\n    throw new TypeError('Reduce of empty array with no initial value');\n  }\n  // 上一次调用 reducer 时的返回值, 此处为初始值赋值\n  let previousValue = hasInitValue ? arguments[1] : array[0];\n  // 数组中正在处理的元素的索引\n  let currentIndex = hasInitValue ? 0 : 1;\n  while (currentIndex < length) {\n    previousValue = reducer(previousValue, array[currentIndex], currentIndex, array);\n    currentIndex ++;\n  }\n  return previousValue;\n};\n\n// test\n[1, 2, 3, 4, 5].reduceFn((prev, cur) => prev + cur); // 15\n[1, 2, 3, 4, 5].reduceFn((prev, cur) => prev + cur, 10); // 25\n```","slug":"reduce","published":1,"date":"2022-09-22T03:27:44.980Z","updated":"2022-09-28T07:25:35.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lby4o70003p0w15efq4j86","content":"<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">MDN-Array.prototype.reduce</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>reduce() 方法对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</p>\n<p>第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为 0 的元素开始执行，则需要传递初始值。否则，数组索引为 0 的元素将被作为初始值 initialValue，迭代器将从第二个元素开始执行（索引为 1 而不是 0）。</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> array1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];<br><br><span class=\"hljs-comment\">// 0 + 1 + 2 + 3 + 4</span><br><span class=\"hljs-keyword\">const</span> initialValue = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">const</span> sumWithInitial = array1.<span class=\"hljs-title function_\">reduce</span>(<br>  <span class=\"hljs-function\">(<span class=\"hljs-params\">previousValue, currentValue</span>) =&gt;</span> previousValue + currentValue,<br>  initialValue<br>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sumWithInitial);<br><span class=\"hljs-comment\">// expected output: 10</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">reduceFn</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">reducer<span class=\"hljs-comment\">/*, initValue*/</span></span>) &#123;<br>  <span class=\"hljs-comment\">// reducer必须是一个函数</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> reducer !== <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;reducer&#125;</span> is not a function.`</span>);<br>  &#125;<br>  <span class=\"hljs-comment\">// 是否包含初始值</span><br>  <span class=\"hljs-keyword\">const</span> hasInitValue = <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-comment\">// 当前遍历的数组</span><br>  <span class=\"hljs-keyword\">const</span> array = <span class=\"hljs-title class_\">Object</span>(<span class=\"hljs-variable language_\">this</span>);<br>  <span class=\"hljs-keyword\">const</span> length = array.<span class=\"hljs-property\">length</span>;<br>  <span class=\"hljs-comment\">// 数组长度要大于0或包含初始值</span><br>  <span class=\"hljs-keyword\">if</span> (length === <span class=\"hljs-number\">0</span> &amp;&amp; !hasInitValue) &#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Reduce of empty array with no initial value&#x27;</span>);<br>  &#125;<br>  <span class=\"hljs-comment\">// 上一次调用 reducer 时的返回值, 此处为初始值赋值</span><br>  <span class=\"hljs-keyword\">let</span> previousValue = hasInitValue ? <span class=\"hljs-variable language_\">arguments</span>[<span class=\"hljs-number\">1</span>] : array[<span class=\"hljs-number\">0</span>];<br>  <span class=\"hljs-comment\">// 数组中正在处理的元素的索引</span><br>  <span class=\"hljs-keyword\">let</span> currentIndex = hasInitValue ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span> (currentIndex &lt; length) &#123;<br>    previousValue = <span class=\"hljs-title function_\">reducer</span>(previousValue, array[currentIndex], currentIndex, array);<br>    currentIndex ++;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> previousValue;<br>&#125;;<br><br><span class=\"hljs-comment\">// test</span><br>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>].<span class=\"hljs-title function_\">reduceFn</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, cur</span>) =&gt;</span> prev + cur); <span class=\"hljs-comment\">// 15</span><br>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>].<span class=\"hljs-title function_\">reduceFn</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, cur</span>) =&gt;</span> prev + cur, <span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// 25</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">MDN-Array.prototype.reduce</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>reduce() 方法对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</p>\n<p>第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为 0 的元素开始执行，则需要传递初始值。否则，数组索引为 0 的元素将被作为初始值 initialValue，迭代器将从第二个元素开始执行（索引为 1 而不是 0）。</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> array1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];<br><br><span class=\"hljs-comment\">// 0 + 1 + 2 + 3 + 4</span><br><span class=\"hljs-keyword\">const</span> initialValue = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">const</span> sumWithInitial = array1.<span class=\"hljs-title function_\">reduce</span>(<br>  <span class=\"hljs-function\">(<span class=\"hljs-params\">previousValue, currentValue</span>) =&gt;</span> previousValue + currentValue,<br>  initialValue<br>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sumWithInitial);<br><span class=\"hljs-comment\">// expected output: 10</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">reduceFn</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">reducer<span class=\"hljs-comment\">/*, initValue*/</span></span>) &#123;<br>  <span class=\"hljs-comment\">// reducer必须是一个函数</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> reducer !== <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;reducer&#125;</span> is not a function.`</span>);<br>  &#125;<br>  <span class=\"hljs-comment\">// 是否包含初始值</span><br>  <span class=\"hljs-keyword\">const</span> hasInitValue = <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-comment\">// 当前遍历的数组</span><br>  <span class=\"hljs-keyword\">const</span> array = <span class=\"hljs-title class_\">Object</span>(<span class=\"hljs-variable language_\">this</span>);<br>  <span class=\"hljs-keyword\">const</span> length = array.<span class=\"hljs-property\">length</span>;<br>  <span class=\"hljs-comment\">// 数组长度要大于0或包含初始值</span><br>  <span class=\"hljs-keyword\">if</span> (length === <span class=\"hljs-number\">0</span> &amp;&amp; !hasInitValue) &#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Reduce of empty array with no initial value&#x27;</span>);<br>  &#125;<br>  <span class=\"hljs-comment\">// 上一次调用 reducer 时的返回值, 此处为初始值赋值</span><br>  <span class=\"hljs-keyword\">let</span> previousValue = hasInitValue ? <span class=\"hljs-variable language_\">arguments</span>[<span class=\"hljs-number\">1</span>] : array[<span class=\"hljs-number\">0</span>];<br>  <span class=\"hljs-comment\">// 数组中正在处理的元素的索引</span><br>  <span class=\"hljs-keyword\">let</span> currentIndex = hasInitValue ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span> (currentIndex &lt; length) &#123;<br>    previousValue = <span class=\"hljs-title function_\">reducer</span>(previousValue, array[currentIndex], currentIndex, array);<br>    currentIndex ++;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> previousValue;<br>&#125;;<br><br><span class=\"hljs-comment\">// test</span><br>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>].<span class=\"hljs-title function_\">reduceFn</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, cur</span>) =&gt;</span> prev + cur); <span class=\"hljs-comment\">// 15</span><br>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>].<span class=\"hljs-title function_\">reduceFn</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, cur</span>) =&gt;</span> prev + cur, <span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// 25</span><br></code></pre></td></tr></table></figure>"},{"title":"【实用功能】请求队列","index_img":"/img/0101.webp","_content":"\n[TOC]\n\n##  背景\n\n  某些页面的首屏请求会比较多，比如超过20多个，如果用户量大的情况下，会给服务器带来极大的压力，为了优化这种情况，服务端的开发同事建议前端能不能限制一下同时请求的数量，比如保持并行请求数量最大为6，当并发中的某个请求完成，执行请求队列的中的队头的请求，直到所有请求完成。\n\n##  实现\n\n### 请求队列类\n\n```js\n/**\n * 请求队列类\n */\nclass RequestQueue { \n  /**\n   * @params {Array} requestList - 请求队列，先进先出\n   * @params {Number} requestLimit - 最大请求并发数，默认为6\n   */\n  constructor(requestList  = [], requestLimit = 6) { \n    this.requestList = requestList;\n    this.requestLimit = requestLimit;\n  }\n  /**\n   * 执行请求的方法\n   */\n  run() {\n    while (this.requestLimit && this.requestList.length) {\n      const requestTask = this.requestList.shift();\n      requestTask()\n        .then(time => { \n          console.log('response success <-- request duration:', time);\n        })\n        .catch(error => { \n          console.log(error);\n        })\n        .finally(() => {\n          this.requestLimit++;\n          this.run();\n        });\n      this.requestLimit--;\n    }\n  }\n}\n```\n\n### 构建请求函数\n\n```js\nfunction createRequest(time) {\n  /**\n   * 这里简单解释下为什么包一层function\n   * 如果不包function的话，放到队列中请求就已经执行了\n   * 达不到想要的效果\n   */\n  return function () {\n    return new Promise((resolve, reject) => {\n      console.log('start request --> response time:', time);\n      try {\n        setTimeout(() => { \n          resolve(time);\n        }, time)\n      } catch (error) { \n        reject(error);\n      }\n    });\n  }\n}\n```\n\n### Demo\n\n```js\nconst requestTimeList = [\n  1000, 2500, 3000,\n  1500, 3500, 2000,\n  1200, 4000, 800,\n  500, 600, 1400,\n  1600, 2400, 2200\n];\nfunction createRequest(time) {\n  return function () {\n    return new Promise((resolve, reject) => {\n      console.log('start request --> response time:', time);\n      try {\n        setTimeout(() => { \n          resolve(time);\n        }, time)\n      } catch (error) { \n        reject(error);\n      }\n    });\n  }\n}\nconst requestQueueList = requestTimeList.map(item => createRequest(item));\n\nclass RequestQueue { \n  constructor(requestList  = [], requestLimit = 6) { \n    this.requestList = requestList;\n    this.requestLimit = requestLimit;\n  }\n  run() { \n    while (this.requestLimit && this.requestList.length) {\n      const requestTask = this.requestList.shift();\n      requestTask()\n        .then(time => { \n          console.log('response success <-- request duration:', time);\n        })\n        .catch(error => { \n          console.log(error);\n        })\n        .finally(() => {\n          this.requestLimit++;\n          this.run();\n        });\n      this.requestLimit--;\n    }\n  }\n}\n\nconst requestQueue = new RequestQueue(requestQueueList, 6);\nrequestQueue.run();\n\n// 输出示例\n/*\n// 首次执行run函数，发出6个并发请求\nVM36:11 start request --> response time: 1000\nVM36:11 start request --> response time: 2500\nVM36:11 start request --> response time: 3000\nVM36:11 start request --> response time: 1500\nVM36:11 start request --> response time: 3500\nVM36:11 start request --> response time: 2000\n\n// 上述6个请求中，1000最短，所以最先返回结果\nVM36:34 response success <-- request duration: 1000\n// 并发数少一个，立马执行未执行队列中的新的请求\nVM36:11 start request --> response time: 1200\n\nVM36:34 response success <-- request duration: 1500\nVM36:11 start request --> response time: 4000\n\nVM36:34 response success <-- request duration: 2000\nVM36:11 start request --> response time: 800\n\nVM36:34 response success <-- request duration: 1200\nVM36:11 start request --> response time: 500\n\nVM36:34 response success <-- request duration: 2500\nVM36:11 start request --> response time: 600\n\nVM36:34 response success <-- request duration: 500\nVM36:11 start request --> response time: 1400\n\nVM36:34 response success <-- request duration: 800\nVM36:11 start request --> response time: 1600\n\nVM36:34 response success <-- request duration: 3000\nVM36:11 start request --> response time: 2400\n\nVM36:34 response success <-- request duration: 600\nVM36:11 start request --> response time: 2200\n\nVM36:34 response success <-- request duration: 3500\nVM36:34 response success <-- request duration: 1400\nVM36:34 response success <-- request duration: 1600\nVM36:34 response success <-- request duration: 2200\nVM36:34 response success <-- request duration: 2400\nVM36:34 response success <-- request duration: 4000\n**/\n```\n","source":"_posts/request-queue.md","raw":"---\ntitle: 【实用功能】请求队列\nindex_img: /img/0101.webp\n---\n\n[TOC]\n\n##  背景\n\n  某些页面的首屏请求会比较多，比如超过20多个，如果用户量大的情况下，会给服务器带来极大的压力，为了优化这种情况，服务端的开发同事建议前端能不能限制一下同时请求的数量，比如保持并行请求数量最大为6，当并发中的某个请求完成，执行请求队列的中的队头的请求，直到所有请求完成。\n\n##  实现\n\n### 请求队列类\n\n```js\n/**\n * 请求队列类\n */\nclass RequestQueue { \n  /**\n   * @params {Array} requestList - 请求队列，先进先出\n   * @params {Number} requestLimit - 最大请求并发数，默认为6\n   */\n  constructor(requestList  = [], requestLimit = 6) { \n    this.requestList = requestList;\n    this.requestLimit = requestLimit;\n  }\n  /**\n   * 执行请求的方法\n   */\n  run() {\n    while (this.requestLimit && this.requestList.length) {\n      const requestTask = this.requestList.shift();\n      requestTask()\n        .then(time => { \n          console.log('response success <-- request duration:', time);\n        })\n        .catch(error => { \n          console.log(error);\n        })\n        .finally(() => {\n          this.requestLimit++;\n          this.run();\n        });\n      this.requestLimit--;\n    }\n  }\n}\n```\n\n### 构建请求函数\n\n```js\nfunction createRequest(time) {\n  /**\n   * 这里简单解释下为什么包一层function\n   * 如果不包function的话，放到队列中请求就已经执行了\n   * 达不到想要的效果\n   */\n  return function () {\n    return new Promise((resolve, reject) => {\n      console.log('start request --> response time:', time);\n      try {\n        setTimeout(() => { \n          resolve(time);\n        }, time)\n      } catch (error) { \n        reject(error);\n      }\n    });\n  }\n}\n```\n\n### Demo\n\n```js\nconst requestTimeList = [\n  1000, 2500, 3000,\n  1500, 3500, 2000,\n  1200, 4000, 800,\n  500, 600, 1400,\n  1600, 2400, 2200\n];\nfunction createRequest(time) {\n  return function () {\n    return new Promise((resolve, reject) => {\n      console.log('start request --> response time:', time);\n      try {\n        setTimeout(() => { \n          resolve(time);\n        }, time)\n      } catch (error) { \n        reject(error);\n      }\n    });\n  }\n}\nconst requestQueueList = requestTimeList.map(item => createRequest(item));\n\nclass RequestQueue { \n  constructor(requestList  = [], requestLimit = 6) { \n    this.requestList = requestList;\n    this.requestLimit = requestLimit;\n  }\n  run() { \n    while (this.requestLimit && this.requestList.length) {\n      const requestTask = this.requestList.shift();\n      requestTask()\n        .then(time => { \n          console.log('response success <-- request duration:', time);\n        })\n        .catch(error => { \n          console.log(error);\n        })\n        .finally(() => {\n          this.requestLimit++;\n          this.run();\n        });\n      this.requestLimit--;\n    }\n  }\n}\n\nconst requestQueue = new RequestQueue(requestQueueList, 6);\nrequestQueue.run();\n\n// 输出示例\n/*\n// 首次执行run函数，发出6个并发请求\nVM36:11 start request --> response time: 1000\nVM36:11 start request --> response time: 2500\nVM36:11 start request --> response time: 3000\nVM36:11 start request --> response time: 1500\nVM36:11 start request --> response time: 3500\nVM36:11 start request --> response time: 2000\n\n// 上述6个请求中，1000最短，所以最先返回结果\nVM36:34 response success <-- request duration: 1000\n// 并发数少一个，立马执行未执行队列中的新的请求\nVM36:11 start request --> response time: 1200\n\nVM36:34 response success <-- request duration: 1500\nVM36:11 start request --> response time: 4000\n\nVM36:34 response success <-- request duration: 2000\nVM36:11 start request --> response time: 800\n\nVM36:34 response success <-- request duration: 1200\nVM36:11 start request --> response time: 500\n\nVM36:34 response success <-- request duration: 2500\nVM36:11 start request --> response time: 600\n\nVM36:34 response success <-- request duration: 500\nVM36:11 start request --> response time: 1400\n\nVM36:34 response success <-- request duration: 800\nVM36:11 start request --> response time: 1600\n\nVM36:34 response success <-- request duration: 3000\nVM36:11 start request --> response time: 2400\n\nVM36:34 response success <-- request duration: 600\nVM36:11 start request --> response time: 2200\n\nVM36:34 response success <-- request duration: 3500\nVM36:34 response success <-- request duration: 1400\nVM36:34 response success <-- request duration: 1600\nVM36:34 response success <-- request duration: 2200\nVM36:34 response success <-- request duration: 2400\nVM36:34 response success <-- request duration: 4000\n**/\n```\n","slug":"request-queue","published":1,"date":"2022-09-22T03:27:44.985Z","updated":"2022-09-28T07:50:18.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lby4o80004p0w1f8eohq7v","content":"<p>[TOC]</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>  某些页面的首屏请求会比较多，比如超过20多个，如果用户量大的情况下，会给服务器带来极大的压力，为了优化这种情况，服务端的开发同事建议前端能不能限制一下同时请求的数量，比如保持并行请求数量最大为6，当并发中的某个请求完成，执行请求队列的中的队头的请求，直到所有请求完成。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"请求队列类\"><a href=\"#请求队列类\" class=\"headerlink\" title=\"请求队列类\"></a>请求队列类</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 请求队列类</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestQueue</span> &#123; <br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@params</span> &#123;<span class=\"hljs-type\">Array</span>&#125; <span class=\"hljs-variable\">requestList</span> - 请求队列，先进先出</span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@params</span> &#123;<span class=\"hljs-type\">Number</span>&#125; <span class=\"hljs-variable\">requestLimit</span> - 最大请求并发数，默认为6</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">requestList  = [], requestLimit = <span class=\"hljs-number\">6</span></span>) &#123; <br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestList</span> = requestList;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span> = requestLimit;<br>  &#125;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 执行请求的方法</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestList</span>.<span class=\"hljs-property\">length</span>) &#123;<br>      <span class=\"hljs-keyword\">const</span> requestTask = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestList</span>.<span class=\"hljs-title function_\">shift</span>();<br>      <span class=\"hljs-title function_\">requestTask</span>()<br>        .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">time</span> =&gt;</span> &#123; <br>          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;response success &lt;-- request duration:&#x27;</span>, time);<br>        &#125;)<br>        .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123; <br>          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);<br>        &#125;)<br>        .<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span>++;<br>          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">run</span>();<br>        &#125;);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span>--;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"构建请求函数\"><a href=\"#构建请求函数\" class=\"headerlink\" title=\"构建请求函数\"></a>构建请求函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createRequest</span>(<span class=\"hljs-params\">time</span>) &#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 这里简单解释下为什么包一层function</span><br><span class=\"hljs-comment\">   * 如果不包function的话，放到队列中请求就已经执行了</span><br><span class=\"hljs-comment\">   * 达不到想要的效果</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;start request --&gt; response time:&#x27;</span>, time);<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123; <br>          <span class=\"hljs-title function_\">resolve</span>(time);<br>        &#125;, time)<br>      &#125; <span class=\"hljs-keyword\">catch</span> (error) &#123; <br>        <span class=\"hljs-title function_\">reject</span>(error);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> requestTimeList = [<br>  <span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">2500</span>, <span class=\"hljs-number\">3000</span>,<br>  <span class=\"hljs-number\">1500</span>, <span class=\"hljs-number\">3500</span>, <span class=\"hljs-number\">2000</span>,<br>  <span class=\"hljs-number\">1200</span>, <span class=\"hljs-number\">4000</span>, <span class=\"hljs-number\">800</span>,<br>  <span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">600</span>, <span class=\"hljs-number\">1400</span>,<br>  <span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">2400</span>, <span class=\"hljs-number\">2200</span><br>];<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createRequest</span>(<span class=\"hljs-params\">time</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;start request --&gt; response time:&#x27;</span>, time);<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123; <br>          <span class=\"hljs-title function_\">resolve</span>(time);<br>        &#125;, time)<br>      &#125; <span class=\"hljs-keyword\">catch</span> (error) &#123; <br>        <span class=\"hljs-title function_\">reject</span>(error);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> requestQueueList = requestTimeList.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> <span class=\"hljs-title function_\">createRequest</span>(item));<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestQueue</span> &#123; <br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">requestList  = [], requestLimit = <span class=\"hljs-number\">6</span></span>) &#123; <br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestList</span> = requestList;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span> = requestLimit;<br>  &#125;<br>  <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\"></span>) &#123; <br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestList</span>.<span class=\"hljs-property\">length</span>) &#123;<br>      <span class=\"hljs-keyword\">const</span> requestTask = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestList</span>.<span class=\"hljs-title function_\">shift</span>();<br>      <span class=\"hljs-title function_\">requestTask</span>()<br>        .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">time</span> =&gt;</span> &#123; <br>          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;response success &lt;-- request duration:&#x27;</span>, time);<br>        &#125;)<br>        .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123; <br>          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);<br>        &#125;)<br>        .<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span>++;<br>          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">run</span>();<br>        &#125;);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span>--;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> requestQueue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestQueue</span>(requestQueueList, <span class=\"hljs-number\">6</span>);<br>requestQueue.<span class=\"hljs-title function_\">run</span>();<br><br><span class=\"hljs-comment\">// 输出示例</span><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">// 首次执行run函数，发出6个并发请求</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 1000</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 2500</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 3000</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 1500</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 3500</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 2000</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">// 上述6个请求中，1000最短，所以最先返回结果</span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 1000</span><br><span class=\"hljs-comment\">// 并发数少一个，立马执行未执行队列中的新的请求</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 1200</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 1500</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 4000</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 2000</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 800</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 1200</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 500</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 2500</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 600</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 500</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 1400</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 800</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 1600</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 3000</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 2400</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 600</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 2200</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 3500</span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 1400</span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 1600</span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 2200</span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 2400</span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 4000</span><br><span class=\"hljs-comment\">**/</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>  某些页面的首屏请求会比较多，比如超过20多个，如果用户量大的情况下，会给服务器带来极大的压力，为了优化这种情况，服务端的开发同事建议前端能不能限制一下同时请求的数量，比如保持并行请求数量最大为6，当并发中的某个请求完成，执行请求队列的中的队头的请求，直到所有请求完成。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"请求队列类\"><a href=\"#请求队列类\" class=\"headerlink\" title=\"请求队列类\"></a>请求队列类</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 请求队列类</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestQueue</span> &#123; <br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@params</span> &#123;<span class=\"hljs-type\">Array</span>&#125; <span class=\"hljs-variable\">requestList</span> - 请求队列，先进先出</span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@params</span> &#123;<span class=\"hljs-type\">Number</span>&#125; <span class=\"hljs-variable\">requestLimit</span> - 最大请求并发数，默认为6</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">requestList  = [], requestLimit = <span class=\"hljs-number\">6</span></span>) &#123; <br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestList</span> = requestList;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span> = requestLimit;<br>  &#125;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 执行请求的方法</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestList</span>.<span class=\"hljs-property\">length</span>) &#123;<br>      <span class=\"hljs-keyword\">const</span> requestTask = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestList</span>.<span class=\"hljs-title function_\">shift</span>();<br>      <span class=\"hljs-title function_\">requestTask</span>()<br>        .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">time</span> =&gt;</span> &#123; <br>          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;response success &lt;-- request duration:&#x27;</span>, time);<br>        &#125;)<br>        .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123; <br>          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);<br>        &#125;)<br>        .<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span>++;<br>          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">run</span>();<br>        &#125;);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span>--;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"构建请求函数\"><a href=\"#构建请求函数\" class=\"headerlink\" title=\"构建请求函数\"></a>构建请求函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createRequest</span>(<span class=\"hljs-params\">time</span>) &#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 这里简单解释下为什么包一层function</span><br><span class=\"hljs-comment\">   * 如果不包function的话，放到队列中请求就已经执行了</span><br><span class=\"hljs-comment\">   * 达不到想要的效果</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;start request --&gt; response time:&#x27;</span>, time);<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123; <br>          <span class=\"hljs-title function_\">resolve</span>(time);<br>        &#125;, time)<br>      &#125; <span class=\"hljs-keyword\">catch</span> (error) &#123; <br>        <span class=\"hljs-title function_\">reject</span>(error);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> requestTimeList = [<br>  <span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">2500</span>, <span class=\"hljs-number\">3000</span>,<br>  <span class=\"hljs-number\">1500</span>, <span class=\"hljs-number\">3500</span>, <span class=\"hljs-number\">2000</span>,<br>  <span class=\"hljs-number\">1200</span>, <span class=\"hljs-number\">4000</span>, <span class=\"hljs-number\">800</span>,<br>  <span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">600</span>, <span class=\"hljs-number\">1400</span>,<br>  <span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">2400</span>, <span class=\"hljs-number\">2200</span><br>];<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createRequest</span>(<span class=\"hljs-params\">time</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;start request --&gt; response time:&#x27;</span>, time);<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123; <br>          <span class=\"hljs-title function_\">resolve</span>(time);<br>        &#125;, time)<br>      &#125; <span class=\"hljs-keyword\">catch</span> (error) &#123; <br>        <span class=\"hljs-title function_\">reject</span>(error);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> requestQueueList = requestTimeList.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> <span class=\"hljs-title function_\">createRequest</span>(item));<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestQueue</span> &#123; <br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">requestList  = [], requestLimit = <span class=\"hljs-number\">6</span></span>) &#123; <br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestList</span> = requestList;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span> = requestLimit;<br>  &#125;<br>  <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\"></span>) &#123; <br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestList</span>.<span class=\"hljs-property\">length</span>) &#123;<br>      <span class=\"hljs-keyword\">const</span> requestTask = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestList</span>.<span class=\"hljs-title function_\">shift</span>();<br>      <span class=\"hljs-title function_\">requestTask</span>()<br>        .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">time</span> =&gt;</span> &#123; <br>          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;response success &lt;-- request duration:&#x27;</span>, time);<br>        &#125;)<br>        .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123; <br>          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);<br>        &#125;)<br>        .<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span>++;<br>          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">run</span>();<br>        &#125;);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">requestLimit</span>--;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> requestQueue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestQueue</span>(requestQueueList, <span class=\"hljs-number\">6</span>);<br>requestQueue.<span class=\"hljs-title function_\">run</span>();<br><br><span class=\"hljs-comment\">// 输出示例</span><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">// 首次执行run函数，发出6个并发请求</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 1000</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 2500</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 3000</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 1500</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 3500</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 2000</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">// 上述6个请求中，1000最短，所以最先返回结果</span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 1000</span><br><span class=\"hljs-comment\">// 并发数少一个，立马执行未执行队列中的新的请求</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 1200</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 1500</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 4000</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 2000</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 800</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 1200</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 500</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 2500</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 600</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 500</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 1400</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 800</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 1600</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 3000</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 2400</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 600</span><br><span class=\"hljs-comment\">VM36:11 start request --&gt; response time: 2200</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 3500</span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 1400</span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 1600</span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 2200</span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 2400</span><br><span class=\"hljs-comment\">VM36:34 response success &lt;-- request duration: 4000</span><br><span class=\"hljs-comment\">**/</span><br></code></pre></td></tr></table></figure>\n"},{"title":"【解决方案】前端换肤方案","index_img":"/img/skin-change.webp","_content":"\n| 方法 | 特点 | 兼容性 | 推荐度 |\n| ---- | ---- | ---- | ---- |\n| 利用class 命名空间 | 最简单的换肤方案 |  |  |\n| 准备多套CSS主题 | 最常用 |  | 推荐 |\n| 动态换肤 | 支持浏览器热换肤，最酷炫 |  |  |\n| less在线编译实现 | | | 不推荐 |\n| CSS变量换肤 | 不考虑IE，最佳换肤方式 | 使用css-vars-ponyfill解决兼容性问题 | 推荐 |\n\n##  利用class 命名空间\n\n```html\n\n<style>\n.red-theme p {\n  color: red\n}\n\n.blue-theme p {\n  color: blue\n｝\n</style>\n\n<body class=\"red-theme\">\n  <p> 这里是红色主题 </p>\n  ...\n</body>\n```\n\n## 准备多套CSS主题\n\n```css\n/*theme-default.css*/\np {\n  color: #333\n}\n```\n\n```css\n/* theme-red.css */\np {\n  color: #red\n}\n```\n\n页面加载后，根据用户需求加载不同的样式列表\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  ...\n  <link id=\"themeLink\" type=\"text/css\" rel=\"stylesheet\" href=\"./css/multipleTheme/light.css\" />\n</head>\n<body>\n  <p>light主题显示蓝字，dark主题显示红字</p>\n  <button onclick=\"changeTheme()\">切换主题</button>\n  <script>\n    let currentTheme = 'light';\n\n    function getTheme () {\n      if (currentTheme === 'light') {\n        currentTheme = 'dark';\n      } else {\n        currentTheme = 'light';\n      }\n      return currentTheme;\n    }\n    \n    function changeTheme () {\n      const ThemeMap = {\n        'light': './css/multipleTheme/light.css',\n        'dark': './css/multipleTheme/dark.css'\n      };\n      const themeLink = document.querySelector('#themeLink');\n      themeLink.href = ThemeMap[getTheme()];\n    }\n  </script>\n</body>\n</html>\n```\n\n有时候需要保存用户使用的主题，可以通过如下方式：\n```\n利用路由标记\n利用cookie标记\n利用localstorage\n保存到后端服务器\n```\n\n优化点：\n利用CSS预处理生成多套主题样式\n\n## 动态换肤\n\n这是element ui中的换肤方案，支持浏览器热换肤。生成一套主题， 将主题配色配置写在js中，在浏览器中用js动态修改style标签覆盖原有的CSS。\n\n1. 先把默认主题文件中涉及到颜色的 CSS 值替换成关键词\n2. 根据用户选择的主题色生成一系列对应的颜色值\n3. 把关键词再换回刚刚生成的相应的颜色值\n4. 直接在页面上加 style 标签，把生成的样式填进去\n\n### 先把默认主题文件中涉及到颜色的 CSS 值替换成关键词\n\n```js\n// https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L250-L274\ngetStyleTemplate(data) {\n  const colorMap = {\n    '#20a0ff': 'primary',\n    '#0190fe': 'secondary',\n    '#fbfdff': 'darkWhite',\n    '#1f2d3d': 'baseBlack',\n    '#324157': 'lightBlack',\n    '#48576a': 'extraLightBlack',\n    '#8391a5': 'baseSilver',\n    '#97a8be': 'lightSilver',\n    '#bfcbd9': 'extraLightSilver',\n    '#d1dbe5': 'baseGray',\n    '#e4e8f1': 'lightGray',\n    '#eef1f6': 'extraLightGray',\n    '#1d90e6': 'buttonActive',\n    '#4db3ff': 'buttonHover',\n    '#dfe6ec': 'tableBorder',\n    '#d2ecff': 'datepickerInRange',\n    '#afddff': 'datepickerInRangeHover',\n    '#1c8de0': 'selectOptionSelected',\n    '#edf7ff': 'lightBackground'\n  };\n  Object.keys(colorMap).forEach(key => {\n    const value = colorMap[key];\n    data = data.replace(new RegExp(key, 'ig'), value);\n  });\n  return data;\n}\n```\n\n### 根据用户选择的主题色生成一系列对应的颜色值\n\n```json\n// https://github.com/ElementUI/theme-preview/blob/master/src/utils/formula.json\n{\n  \"secondary\": \"color(primary s(99%) l(*0.9))\",\n\n  \"darkWhite\": \"color(#fff blend(primary 2%))\",\n\n  \"baseBlack\": \"color(primary h(+6) s(33%) l(18%))\",\n  \"lightBlack\": \"color(baseBlack h(+5) s(27%) l(27%))\",\n  \"extraLightBlack\": \"color(baseBlack h(+2) s(19%) l(35%))\",\n  \"baseSilver\": \"color(baseBlack h(+3) s(16%) l(58%))\",\n  \"lightSilver\": \"color(baseBlack h(+3) s(23%) l(67%))\",\n  \"extraLightSilver\": \"color(baseBlack s(26%) l(80%))\",\n  \"baseGray\": \"color(baseBlack s(28%) l(86%))\",\n  \"lightGray\": \"color(baseBlack h(+10) s(33%) l(92%))\",\n  \"extraLightGray\": \"color(baseBlack h(+6) s(33%) l(95%))\",\n\n  \"buttonActive\": \"color(primary shade(10%))\",\n  \"buttonHover\": \"color(primary tint(20%))\",\n\n  \"tableBorder\": \"color(extraLightSilver h(-3) s(27%) l(90%))\",\n\n  \"datepickerInRange\": \"color(primary tint(80%))\",\n  \"datepickerInRangeHover\": \"color(primary tint(64%))\",\n\n  \"selectOptionSelected\": \"color(primary shade(12%))\",\n\n  \"lightBackground\": \"color(primary tint(92%))\",\n  \"emptyText\": \"color(primary s(16%) l(44%))\"\n}\n```\n\n### 把关键词再换回刚刚生成的相应的颜色值\n\n```js\n// https://github.com/ElementUI/theme-preview/blob/master/src/utils/color.js\nimport color from 'css-color-function';\nimport formula from './formula.json';\n\nconst generateColors = primary => {\n  let colors = {};\n  let baseBlack = '';\n  let extraLightBlack = '';\n  let extraLightSilver = '';\n\n  Object.keys(formula).forEach(key => {\n    const value = formula[key]\n      .replace(/primary/g, primary)\n      .replace(/baseBlack/g, baseBlack)\n      .replace(/extraLightBlack/g, extraLightBlack)\n      .replace(/extraLightSilver/g, extraLightSilver);\n    colors[key] = color.convert(value);\n    if (key === 'baseBlack') {\n      baseBlack = colors[key];\n    }\n    if (key === 'extraLightBlack') {\n      extraLightBlack = colors[key];\n    }\n    if (key === 'extraLightSilver') {\n      extraLightSilver = colors[key];\n    }\n  });\n  return colors;\n};\n\nexport default generateColors;\n```\n\n### 直接在页面上加 style 标签，把生成的样式填进去\n\n```js\n// https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L198-L211\nwriteNewStyle() {\n  let cssText = this.originalStyle;\n  Object.keys(this.colors).forEach(key => {\n    cssText = cssText.replace(new RegExp('(:|\\\\s+)' + key, 'g'), '$1' + this.colors[key]);\n  });\n  if (this.originalStylesheetCount === document.styleSheets.length) {\n    const style = document.createElement('style');\n    style.innerText = cssText;\n    document.head.appendChild(style);\n  } else {\n    document.head.lastChild.innerText = cssText;\n  }\n}\n```\n\n## less在线编译实现\n\n不推荐\n\n## CSS变量实现\n\n[CSS Variables (Custom Properties)](https://caniuse.com/?search=css%20variables)\n\n```css\n/* variable.css */\n/* 默认变量 */\n:root {\n  --primary: blue;\n}\n\n/* 亮色变量 */\n[data-theme=\"light\"] {\n  --primary: green;\n}\n\n/* 深色变量 */\n[data-theme=\"dark\"] {\n  --primary: red;\n}\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" data-theme=\"default\">\n<head>\n  ...\n  <title>Css Variable</title>\n\n  <link id=\"themeLink\" type=\"text/css\" rel=\"stylesheet\" href=\"./css/cssVariable/variable.css\" />\n  <style>\n    p {\n      color: var(--primary);\n    }\n  </style>\n</head>\n<body>\n  <p>默认主题为蓝色，light主题显示绿字，dark主题显示红字</p>\n  <button onclick=\"changeTheme()\">切换主题</button>\n  <script>\n    const themeList = ['default', 'light', 'dark'];\n    let currentThemeIndex = 0;\n    function changeTheme () {\n      const htmlNode = document.querySelector('html');\n      currentThemeIndex++;\n      if (currentThemeIndex > themeList.length - 1) {\n        currentThemeIndex = 0;\n      }\n      htmlNode.setAttribute('data-theme', themeList[currentThemeIndex]);\n    }\n  </script>\n</body>\n</html>\n```\n\n### css变量兼容方案\n\n首先需要建一个存放公共css变量的js文件，将需要定义的css变量存放到该js文件，例如（variable.js）\n\n```js\n//浅色\nexport const lightTheme = { \n  '--primary': 'green'\n};\n// 深色\nexport const darkTheme = { \n  '--primary': 'red'\n};\n```\n\n页面使用css变量，例如：\n```html\n<style lang=\"scss\"> \n.text { \n  color: var(--primary);\n}\n</style>\n```\n\n安装css-vars-ponyfill 插件\n\n「css-vars-ponyfill」 官方概念：在传统浏览器和现代浏览器中为CSS自定义属性(又名“CSS变量”)提供客户端支持的ponyfill。 （具体用法与概念请查阅官方网站：[css-vars-ponyfill](https://github.com/JofunLiang/vue-project-themable-demo)）\n\n封装切换主题的js，在main.js做初始化调用\n\n```js\n// theme.js\nimport { lightTheme, darkTheme } from \"../src/assets/js/variable\";\nimport cssVars from \"css-vars-ponyfill\";\n\nexport const initTheme = (theme) => {\n  document.documentElement.setAttribute(\"data-theme\", theme ? \"light\" : \"dark\"); \n  cssVars({\n    watch: true, // 当添加，删除或修改其<link>或<style>元素的禁用或href属性时，ponyfill将自行调用    \n    variables: theme ? lightTheme : darkTheme, // variables 自定义属性名/值对的集合\n    onlyLegacy: false, // false  默认将css变量编译为浏览器识别的css样式  true 当浏览器不支持css变量的时候将css变量编译为识别的css\n  });\n};\n```\n","source":"_posts/website-skin-project.md","raw":"---\ntitle: 【解决方案】前端换肤方案\nindex_img: /img/skin-change.webp\n---\n\n| 方法 | 特点 | 兼容性 | 推荐度 |\n| ---- | ---- | ---- | ---- |\n| 利用class 命名空间 | 最简单的换肤方案 |  |  |\n| 准备多套CSS主题 | 最常用 |  | 推荐 |\n| 动态换肤 | 支持浏览器热换肤，最酷炫 |  |  |\n| less在线编译实现 | | | 不推荐 |\n| CSS变量换肤 | 不考虑IE，最佳换肤方式 | 使用css-vars-ponyfill解决兼容性问题 | 推荐 |\n\n##  利用class 命名空间\n\n```html\n\n<style>\n.red-theme p {\n  color: red\n}\n\n.blue-theme p {\n  color: blue\n｝\n</style>\n\n<body class=\"red-theme\">\n  <p> 这里是红色主题 </p>\n  ...\n</body>\n```\n\n## 准备多套CSS主题\n\n```css\n/*theme-default.css*/\np {\n  color: #333\n}\n```\n\n```css\n/* theme-red.css */\np {\n  color: #red\n}\n```\n\n页面加载后，根据用户需求加载不同的样式列表\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  ...\n  <link id=\"themeLink\" type=\"text/css\" rel=\"stylesheet\" href=\"./css/multipleTheme/light.css\" />\n</head>\n<body>\n  <p>light主题显示蓝字，dark主题显示红字</p>\n  <button onclick=\"changeTheme()\">切换主题</button>\n  <script>\n    let currentTheme = 'light';\n\n    function getTheme () {\n      if (currentTheme === 'light') {\n        currentTheme = 'dark';\n      } else {\n        currentTheme = 'light';\n      }\n      return currentTheme;\n    }\n    \n    function changeTheme () {\n      const ThemeMap = {\n        'light': './css/multipleTheme/light.css',\n        'dark': './css/multipleTheme/dark.css'\n      };\n      const themeLink = document.querySelector('#themeLink');\n      themeLink.href = ThemeMap[getTheme()];\n    }\n  </script>\n</body>\n</html>\n```\n\n有时候需要保存用户使用的主题，可以通过如下方式：\n```\n利用路由标记\n利用cookie标记\n利用localstorage\n保存到后端服务器\n```\n\n优化点：\n利用CSS预处理生成多套主题样式\n\n## 动态换肤\n\n这是element ui中的换肤方案，支持浏览器热换肤。生成一套主题， 将主题配色配置写在js中，在浏览器中用js动态修改style标签覆盖原有的CSS。\n\n1. 先把默认主题文件中涉及到颜色的 CSS 值替换成关键词\n2. 根据用户选择的主题色生成一系列对应的颜色值\n3. 把关键词再换回刚刚生成的相应的颜色值\n4. 直接在页面上加 style 标签，把生成的样式填进去\n\n### 先把默认主题文件中涉及到颜色的 CSS 值替换成关键词\n\n```js\n// https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L250-L274\ngetStyleTemplate(data) {\n  const colorMap = {\n    '#20a0ff': 'primary',\n    '#0190fe': 'secondary',\n    '#fbfdff': 'darkWhite',\n    '#1f2d3d': 'baseBlack',\n    '#324157': 'lightBlack',\n    '#48576a': 'extraLightBlack',\n    '#8391a5': 'baseSilver',\n    '#97a8be': 'lightSilver',\n    '#bfcbd9': 'extraLightSilver',\n    '#d1dbe5': 'baseGray',\n    '#e4e8f1': 'lightGray',\n    '#eef1f6': 'extraLightGray',\n    '#1d90e6': 'buttonActive',\n    '#4db3ff': 'buttonHover',\n    '#dfe6ec': 'tableBorder',\n    '#d2ecff': 'datepickerInRange',\n    '#afddff': 'datepickerInRangeHover',\n    '#1c8de0': 'selectOptionSelected',\n    '#edf7ff': 'lightBackground'\n  };\n  Object.keys(colorMap).forEach(key => {\n    const value = colorMap[key];\n    data = data.replace(new RegExp(key, 'ig'), value);\n  });\n  return data;\n}\n```\n\n### 根据用户选择的主题色生成一系列对应的颜色值\n\n```json\n// https://github.com/ElementUI/theme-preview/blob/master/src/utils/formula.json\n{\n  \"secondary\": \"color(primary s(99%) l(*0.9))\",\n\n  \"darkWhite\": \"color(#fff blend(primary 2%))\",\n\n  \"baseBlack\": \"color(primary h(+6) s(33%) l(18%))\",\n  \"lightBlack\": \"color(baseBlack h(+5) s(27%) l(27%))\",\n  \"extraLightBlack\": \"color(baseBlack h(+2) s(19%) l(35%))\",\n  \"baseSilver\": \"color(baseBlack h(+3) s(16%) l(58%))\",\n  \"lightSilver\": \"color(baseBlack h(+3) s(23%) l(67%))\",\n  \"extraLightSilver\": \"color(baseBlack s(26%) l(80%))\",\n  \"baseGray\": \"color(baseBlack s(28%) l(86%))\",\n  \"lightGray\": \"color(baseBlack h(+10) s(33%) l(92%))\",\n  \"extraLightGray\": \"color(baseBlack h(+6) s(33%) l(95%))\",\n\n  \"buttonActive\": \"color(primary shade(10%))\",\n  \"buttonHover\": \"color(primary tint(20%))\",\n\n  \"tableBorder\": \"color(extraLightSilver h(-3) s(27%) l(90%))\",\n\n  \"datepickerInRange\": \"color(primary tint(80%))\",\n  \"datepickerInRangeHover\": \"color(primary tint(64%))\",\n\n  \"selectOptionSelected\": \"color(primary shade(12%))\",\n\n  \"lightBackground\": \"color(primary tint(92%))\",\n  \"emptyText\": \"color(primary s(16%) l(44%))\"\n}\n```\n\n### 把关键词再换回刚刚生成的相应的颜色值\n\n```js\n// https://github.com/ElementUI/theme-preview/blob/master/src/utils/color.js\nimport color from 'css-color-function';\nimport formula from './formula.json';\n\nconst generateColors = primary => {\n  let colors = {};\n  let baseBlack = '';\n  let extraLightBlack = '';\n  let extraLightSilver = '';\n\n  Object.keys(formula).forEach(key => {\n    const value = formula[key]\n      .replace(/primary/g, primary)\n      .replace(/baseBlack/g, baseBlack)\n      .replace(/extraLightBlack/g, extraLightBlack)\n      .replace(/extraLightSilver/g, extraLightSilver);\n    colors[key] = color.convert(value);\n    if (key === 'baseBlack') {\n      baseBlack = colors[key];\n    }\n    if (key === 'extraLightBlack') {\n      extraLightBlack = colors[key];\n    }\n    if (key === 'extraLightSilver') {\n      extraLightSilver = colors[key];\n    }\n  });\n  return colors;\n};\n\nexport default generateColors;\n```\n\n### 直接在页面上加 style 标签，把生成的样式填进去\n\n```js\n// https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L198-L211\nwriteNewStyle() {\n  let cssText = this.originalStyle;\n  Object.keys(this.colors).forEach(key => {\n    cssText = cssText.replace(new RegExp('(:|\\\\s+)' + key, 'g'), '$1' + this.colors[key]);\n  });\n  if (this.originalStylesheetCount === document.styleSheets.length) {\n    const style = document.createElement('style');\n    style.innerText = cssText;\n    document.head.appendChild(style);\n  } else {\n    document.head.lastChild.innerText = cssText;\n  }\n}\n```\n\n## less在线编译实现\n\n不推荐\n\n## CSS变量实现\n\n[CSS Variables (Custom Properties)](https://caniuse.com/?search=css%20variables)\n\n```css\n/* variable.css */\n/* 默认变量 */\n:root {\n  --primary: blue;\n}\n\n/* 亮色变量 */\n[data-theme=\"light\"] {\n  --primary: green;\n}\n\n/* 深色变量 */\n[data-theme=\"dark\"] {\n  --primary: red;\n}\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" data-theme=\"default\">\n<head>\n  ...\n  <title>Css Variable</title>\n\n  <link id=\"themeLink\" type=\"text/css\" rel=\"stylesheet\" href=\"./css/cssVariable/variable.css\" />\n  <style>\n    p {\n      color: var(--primary);\n    }\n  </style>\n</head>\n<body>\n  <p>默认主题为蓝色，light主题显示绿字，dark主题显示红字</p>\n  <button onclick=\"changeTheme()\">切换主题</button>\n  <script>\n    const themeList = ['default', 'light', 'dark'];\n    let currentThemeIndex = 0;\n    function changeTheme () {\n      const htmlNode = document.querySelector('html');\n      currentThemeIndex++;\n      if (currentThemeIndex > themeList.length - 1) {\n        currentThemeIndex = 0;\n      }\n      htmlNode.setAttribute('data-theme', themeList[currentThemeIndex]);\n    }\n  </script>\n</body>\n</html>\n```\n\n### css变量兼容方案\n\n首先需要建一个存放公共css变量的js文件，将需要定义的css变量存放到该js文件，例如（variable.js）\n\n```js\n//浅色\nexport const lightTheme = { \n  '--primary': 'green'\n};\n// 深色\nexport const darkTheme = { \n  '--primary': 'red'\n};\n```\n\n页面使用css变量，例如：\n```html\n<style lang=\"scss\"> \n.text { \n  color: var(--primary);\n}\n</style>\n```\n\n安装css-vars-ponyfill 插件\n\n「css-vars-ponyfill」 官方概念：在传统浏览器和现代浏览器中为CSS自定义属性(又名“CSS变量”)提供客户端支持的ponyfill。 （具体用法与概念请查阅官方网站：[css-vars-ponyfill](https://github.com/JofunLiang/vue-project-themable-demo)）\n\n封装切换主题的js，在main.js做初始化调用\n\n```js\n// theme.js\nimport { lightTheme, darkTheme } from \"../src/assets/js/variable\";\nimport cssVars from \"css-vars-ponyfill\";\n\nexport const initTheme = (theme) => {\n  document.documentElement.setAttribute(\"data-theme\", theme ? \"light\" : \"dark\"); \n  cssVars({\n    watch: true, // 当添加，删除或修改其<link>或<style>元素的禁用或href属性时，ponyfill将自行调用    \n    variables: theme ? lightTheme : darkTheme, // variables 自定义属性名/值对的集合\n    onlyLegacy: false, // false  默认将css变量编译为浏览器识别的css样式  true 当浏览器不支持css变量的时候将css变量编译为识别的css\n  });\n};\n```\n","slug":"website-skin-project","published":1,"date":"2022-09-22T03:27:44.991Z","updated":"2022-09-28T07:49:46.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lby4o90005p0w17e5i65a8","content":"<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>特点</th>\n<th>兼容性</th>\n<th>推荐度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>利用class 命名空间</td>\n<td>最简单的换肤方案</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>准备多套CSS主题</td>\n<td>最常用</td>\n<td></td>\n<td>推荐</td>\n</tr>\n<tr>\n<td>动态换肤</td>\n<td>支持浏览器热换肤，最酷炫</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>less在线编译实现</td>\n<td></td>\n<td></td>\n<td>不推荐</td>\n</tr>\n<tr>\n<td>CSS变量换肤</td>\n<td>不考虑IE，最佳换肤方式</td>\n<td>使用css-vars-ponyfill解决兼容性问题</td>\n<td>推荐</td>\n</tr>\n</tbody></table>\n<h2 id=\"利用class-命名空间\"><a href=\"#利用class-命名空间\" class=\"headerlink\" title=\"利用class 命名空间\"></a>利用class 命名空间</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.red-theme</span> <span class=\"hljs-selector-tag\">p</span> &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">color</span>: red</span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.blue-theme</span> <span class=\"hljs-selector-tag\">p</span> &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">color</span>: blue</span><br><span class=\"language-css\">｝</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;red-theme&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span> 这里是红色主题 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  ...<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"准备多套CSS主题\"><a href=\"#准备多套CSS主题\" class=\"headerlink\" title=\"准备多套CSS主题\"></a>准备多套CSS主题</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/*theme-default.css*/</span><br><span class=\"hljs-selector-tag\">p</span> &#123;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* theme-red.css */</span><br><span class=\"hljs-selector-tag\">p</span> &#123;<br>  <span class=\"hljs-attribute\">color</span>: #red<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>页面加载后，根据用户需求加载不同的样式列表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  ...<br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;themeLink&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;./css/multipleTheme/light.css&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>light主题显示蓝字，dark主题显示红字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;changeTheme()&quot;</span>&gt;</span>切换主题<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">let</span> currentTheme = <span class=\"hljs-string\">&#x27;light&#x27;</span>;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getTheme</span> () &#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">if</span> (currentTheme === <span class=\"hljs-string\">&#x27;light&#x27;</span>) &#123;</span><br><span class=\"language-javascript\">        currentTheme = <span class=\"hljs-string\">&#x27;dark&#x27;</span>;</span><br><span class=\"language-javascript\">      &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"language-javascript\">        currentTheme = <span class=\"hljs-string\">&#x27;light&#x27;</span>;</span><br><span class=\"language-javascript\">      &#125;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">return</span> currentTheme;</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">    </span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeTheme</span> () &#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeMap</span> = &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-string\">&#x27;light&#x27;</span>: <span class=\"hljs-string\">&#x27;./css/multipleTheme/light.css&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-string\">&#x27;dark&#x27;</span>: <span class=\"hljs-string\">&#x27;./css/multipleTheme/dark.css&#x27;</span></span><br><span class=\"language-javascript\">      &#125;;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">const</span> themeLink = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#themeLink&#x27;</span>);</span><br><span class=\"language-javascript\">      themeLink.<span class=\"hljs-property\">href</span> = <span class=\"hljs-title class_\">ThemeMap</span>[<span class=\"hljs-title function_\">getTheme</span>()];</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>有时候需要保存用户使用的主题，可以通过如下方式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">利用路由标记<br>利用cookie标记<br>利用localstorage<br>保存到后端服务器<br></code></pre></td></tr></table></figure>\n\n<p>优化点：<br>利用CSS预处理生成多套主题样式</p>\n<h2 id=\"动态换肤\"><a href=\"#动态换肤\" class=\"headerlink\" title=\"动态换肤\"></a>动态换肤</h2><p>这是element ui中的换肤方案，支持浏览器热换肤。生成一套主题， 将主题配色配置写在js中，在浏览器中用js动态修改style标签覆盖原有的CSS。</p>\n<ol>\n<li>先把默认主题文件中涉及到颜色的 CSS 值替换成关键词</li>\n<li>根据用户选择的主题色生成一系列对应的颜色值</li>\n<li>把关键词再换回刚刚生成的相应的颜色值</li>\n<li>直接在页面上加 style 标签，把生成的样式填进去</li>\n</ol>\n<h3 id=\"先把默认主题文件中涉及到颜色的-CSS-值替换成关键词\"><a href=\"#先把默认主题文件中涉及到颜色的-CSS-值替换成关键词\" class=\"headerlink\" title=\"先把默认主题文件中涉及到颜色的 CSS 值替换成关键词\"></a>先把默认主题文件中涉及到颜色的 CSS 值替换成关键词</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L250-L274</span><br><span class=\"hljs-title function_\">getStyleTemplate</span>(<span class=\"hljs-params\">data</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> colorMap = &#123;<br>    <span class=\"hljs-string\">&#x27;#20a0ff&#x27;</span>: <span class=\"hljs-string\">&#x27;primary&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#0190fe&#x27;</span>: <span class=\"hljs-string\">&#x27;secondary&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#fbfdff&#x27;</span>: <span class=\"hljs-string\">&#x27;darkWhite&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#1f2d3d&#x27;</span>: <span class=\"hljs-string\">&#x27;baseBlack&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#324157&#x27;</span>: <span class=\"hljs-string\">&#x27;lightBlack&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#48576a&#x27;</span>: <span class=\"hljs-string\">&#x27;extraLightBlack&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#8391a5&#x27;</span>: <span class=\"hljs-string\">&#x27;baseSilver&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#97a8be&#x27;</span>: <span class=\"hljs-string\">&#x27;lightSilver&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#bfcbd9&#x27;</span>: <span class=\"hljs-string\">&#x27;extraLightSilver&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#d1dbe5&#x27;</span>: <span class=\"hljs-string\">&#x27;baseGray&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#e4e8f1&#x27;</span>: <span class=\"hljs-string\">&#x27;lightGray&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#eef1f6&#x27;</span>: <span class=\"hljs-string\">&#x27;extraLightGray&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#1d90e6&#x27;</span>: <span class=\"hljs-string\">&#x27;buttonActive&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#4db3ff&#x27;</span>: <span class=\"hljs-string\">&#x27;buttonHover&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#dfe6ec&#x27;</span>: <span class=\"hljs-string\">&#x27;tableBorder&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#d2ecff&#x27;</span>: <span class=\"hljs-string\">&#x27;datepickerInRange&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#afddff&#x27;</span>: <span class=\"hljs-string\">&#x27;datepickerInRangeHover&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#1c8de0&#x27;</span>: <span class=\"hljs-string\">&#x27;selectOptionSelected&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#edf7ff&#x27;</span>: <span class=\"hljs-string\">&#x27;lightBackground&#x27;</span><br>  &#125;;<br>  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(colorMap).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> value = colorMap[key];<br>    data = data.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(key, <span class=\"hljs-string\">&#x27;ig&#x27;</span>), value);<br>  &#125;);<br>  <span class=\"hljs-keyword\">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"根据用户选择的主题色生成一系列对应的颜色值\"><a href=\"#根据用户选择的主题色生成一系列对应的颜色值\" class=\"headerlink\" title=\"根据用户选择的主题色生成一系列对应的颜色值\"></a>根据用户选择的主题色生成一系列对应的颜色值</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-comment\">// https://github.com/ElementUI/theme-preview/blob/master/src/utils/formula.json</span><br><span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;secondary&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary s(99%) l(*0.9))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;darkWhite&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(#fff blend(primary 2%))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;baseBlack&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary h(+6) s(33%) l(18%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;lightBlack&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack h(+5) s(27%) l(27%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;extraLightBlack&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack h(+2) s(19%) l(35%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;baseSilver&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack h(+3) s(16%) l(58%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;lightSilver&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack h(+3) s(23%) l(67%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;extraLightSilver&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack s(26%) l(80%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;baseGray&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack s(28%) l(86%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;lightGray&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack h(+10) s(33%) l(92%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;extraLightGray&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack h(+6) s(33%) l(95%))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;buttonActive&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary shade(10%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;buttonHover&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary tint(20%))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;tableBorder&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(extraLightSilver h(-3) s(27%) l(90%))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;datepickerInRange&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary tint(80%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;datepickerInRangeHover&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary tint(64%))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;selectOptionSelected&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary shade(12%))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;lightBackground&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary tint(92%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;emptyText&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary s(16%) l(44%))&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"把关键词再换回刚刚生成的相应的颜色值\"><a href=\"#把关键词再换回刚刚生成的相应的颜色值\" class=\"headerlink\" title=\"把关键词再换回刚刚生成的相应的颜色值\"></a>把关键词再换回刚刚生成的相应的颜色值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// https://github.com/ElementUI/theme-preview/blob/master/src/utils/color.js</span><br><span class=\"hljs-keyword\">import</span> color <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;css-color-function&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> formula <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./formula.json&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">generateColors</span> = primary =&gt; &#123;<br>  <span class=\"hljs-keyword\">let</span> colors = &#123;&#125;;<br>  <span class=\"hljs-keyword\">let</span> baseBlack = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  <span class=\"hljs-keyword\">let</span> extraLightBlack = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  <span class=\"hljs-keyword\">let</span> extraLightSilver = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br><br>  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(formula).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> value = formula[key]<br>      .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/primary/g</span>, primary)<br>      .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/baseBlack/g</span>, baseBlack)<br>      .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/extraLightBlack/g</span>, extraLightBlack)<br>      .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/extraLightSilver/g</span>, extraLightSilver);<br>    colors[key] = color.<span class=\"hljs-title function_\">convert</span>(value);<br>    <span class=\"hljs-keyword\">if</span> (key === <span class=\"hljs-string\">&#x27;baseBlack&#x27;</span>) &#123;<br>      baseBlack = colors[key];<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (key === <span class=\"hljs-string\">&#x27;extraLightBlack&#x27;</span>) &#123;<br>      extraLightBlack = colors[key];<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (key === <span class=\"hljs-string\">&#x27;extraLightSilver&#x27;</span>) &#123;<br>      extraLightSilver = colors[key];<br>    &#125;<br>  &#125;);<br>  <span class=\"hljs-keyword\">return</span> colors;<br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> generateColors;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"直接在页面上加-style-标签，把生成的样式填进去\"><a href=\"#直接在页面上加-style-标签，把生成的样式填进去\" class=\"headerlink\" title=\"直接在页面上加 style 标签，把生成的样式填进去\"></a>直接在页面上加 style 标签，把生成的样式填进去</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L198-L211</span><br><span class=\"hljs-title function_\">writeNewStyle</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> cssText = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">originalStyle</span>;<br>  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> &#123;<br>    cssText = cssText.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">&#x27;(:|\\\\s+)&#x27;</span> + key, <span class=\"hljs-string\">&#x27;g&#x27;</span>), <span class=\"hljs-string\">&#x27;$1&#x27;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span>[key]);<br>  &#125;);<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">originalStylesheetCount</span> === <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">styleSheets</span>.<span class=\"hljs-property\">length</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> style = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;style&#x27;</span>);<br>    style.<span class=\"hljs-property\">innerText</span> = cssText;<br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-title function_\">appendChild</span>(style);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">lastChild</span>.<span class=\"hljs-property\">innerText</span> = cssText;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"less在线编译实现\"><a href=\"#less在线编译实现\" class=\"headerlink\" title=\"less在线编译实现\"></a>less在线编译实现</h2><p>不推荐</p>\n<h2 id=\"CSS变量实现\"><a href=\"#CSS变量实现\" class=\"headerlink\" title=\"CSS变量实现\"></a>CSS变量实现</h2><p><a href=\"https://caniuse.com/?search=css%20variables\">CSS Variables (Custom Properties)</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* variable.css */</span><br><span class=\"hljs-comment\">/* 默认变量 */</span><br><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  <span class=\"hljs-attr\">--primary</span>: blue;<br>&#125;<br><br><span class=\"hljs-comment\">/* 亮色变量 */</span><br><span class=\"hljs-selector-attr\">[data-theme=<span class=\"hljs-string\">&quot;light&quot;</span>]</span> &#123;<br>  <span class=\"hljs-attr\">--primary</span>: green;<br>&#125;<br><br><span class=\"hljs-comment\">/* 深色变量 */</span><br><span class=\"hljs-selector-attr\">[data-theme=<span class=\"hljs-string\">&quot;dark&quot;</span>]</span> &#123;<br>  <span class=\"hljs-attr\">--primary</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span> <span class=\"hljs-attr\">data-theme</span>=<span class=\"hljs-string\">&quot;default&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  ...<br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Css Variable<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;themeLink&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;./css/cssVariable/variable.css&quot;</span> /&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-selector-tag\">p</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--primary);</span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>默认主题为蓝色，light主题显示绿字，dark主题显示红字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;changeTheme()&quot;</span>&gt;</span>切换主题<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">const</span> themeList = [<span class=\"hljs-string\">&#x27;default&#x27;</span>, <span class=\"hljs-string\">&#x27;light&#x27;</span>, <span class=\"hljs-string\">&#x27;dark&#x27;</span>];</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">let</span> currentThemeIndex = <span class=\"hljs-number\">0</span>;</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeTheme</span> () &#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">const</span> htmlNode = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;html&#x27;</span>);</span><br><span class=\"language-javascript\">      currentThemeIndex++;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">if</span> (currentThemeIndex &gt; themeList.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>) &#123;</span><br><span class=\"language-javascript\">        currentThemeIndex = <span class=\"hljs-number\">0</span>;</span><br><span class=\"language-javascript\">      &#125;</span><br><span class=\"language-javascript\">      htmlNode.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-theme&#x27;</span>, themeList[currentThemeIndex]);</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"css变量兼容方案\"><a href=\"#css变量兼容方案\" class=\"headerlink\" title=\"css变量兼容方案\"></a>css变量兼容方案</h3><p>首先需要建一个存放公共css变量的js文件，将需要定义的css变量存放到该js文件，例如（variable.js）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//浅色</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> lightTheme = &#123; <br>  <span class=\"hljs-string\">&#x27;--primary&#x27;</span>: <span class=\"hljs-string\">&#x27;green&#x27;</span><br>&#125;;<br><span class=\"hljs-comment\">// 深色</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> darkTheme = &#123; <br>  <span class=\"hljs-string\">&#x27;--primary&#x27;</span>: <span class=\"hljs-string\">&#x27;red&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>页面使用css变量，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;scss&quot;</span>&gt;</span><span class=\"language-css\"> </span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.text</span> &#123; </span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--primary);</span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>安装css-vars-ponyfill 插件</p>\n<p>「css-vars-ponyfill」 官方概念：在传统浏览器和现代浏览器中为CSS自定义属性(又名“CSS变量”)提供客户端支持的ponyfill。 （具体用法与概念请查阅官方网站：<a href=\"https://github.com/JofunLiang/vue-project-themable-demo\">css-vars-ponyfill</a>）</p>\n<p>封装切换主题的js，在main.js做初始化调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// theme.js</span><br><span class=\"hljs-keyword\">import</span> &#123; lightTheme, darkTheme &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../src/assets/js/variable&quot;</span>;<br><span class=\"hljs-keyword\">import</span> cssVars <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;css-vars-ponyfill&quot;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">initTheme</span> = (<span class=\"hljs-params\">theme</span>) =&gt; &#123;<br>  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&quot;data-theme&quot;</span>, theme ? <span class=\"hljs-string\">&quot;light&quot;</span> : <span class=\"hljs-string\">&quot;dark&quot;</span>); <br>  <span class=\"hljs-title function_\">cssVars</span>(&#123;<br>    <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 当添加，删除或修改其&lt;link&gt;或&lt;style&gt;元素的禁用或href属性时，ponyfill将自行调用    </span><br>    <span class=\"hljs-attr\">variables</span>: theme ? lightTheme : darkTheme, <span class=\"hljs-comment\">// variables 自定义属性名/值对的集合</span><br>    <span class=\"hljs-attr\">onlyLegacy</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// false  默认将css变量编译为浏览器识别的css样式  true 当浏览器不支持css变量的时候将css变量编译为识别的css</span><br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>特点</th>\n<th>兼容性</th>\n<th>推荐度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>利用class 命名空间</td>\n<td>最简单的换肤方案</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>准备多套CSS主题</td>\n<td>最常用</td>\n<td></td>\n<td>推荐</td>\n</tr>\n<tr>\n<td>动态换肤</td>\n<td>支持浏览器热换肤，最酷炫</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>less在线编译实现</td>\n<td></td>\n<td></td>\n<td>不推荐</td>\n</tr>\n<tr>\n<td>CSS变量换肤</td>\n<td>不考虑IE，最佳换肤方式</td>\n<td>使用css-vars-ponyfill解决兼容性问题</td>\n<td>推荐</td>\n</tr>\n</tbody></table>\n<h2 id=\"利用class-命名空间\"><a href=\"#利用class-命名空间\" class=\"headerlink\" title=\"利用class 命名空间\"></a>利用class 命名空间</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.red-theme</span> <span class=\"hljs-selector-tag\">p</span> &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">color</span>: red</span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.blue-theme</span> <span class=\"hljs-selector-tag\">p</span> &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">color</span>: blue</span><br><span class=\"language-css\">｝</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;red-theme&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span> 这里是红色主题 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  ...<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"准备多套CSS主题\"><a href=\"#准备多套CSS主题\" class=\"headerlink\" title=\"准备多套CSS主题\"></a>准备多套CSS主题</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/*theme-default.css*/</span><br><span class=\"hljs-selector-tag\">p</span> &#123;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* theme-red.css */</span><br><span class=\"hljs-selector-tag\">p</span> &#123;<br>  <span class=\"hljs-attribute\">color</span>: #red<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>页面加载后，根据用户需求加载不同的样式列表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  ...<br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;themeLink&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;./css/multipleTheme/light.css&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>light主题显示蓝字，dark主题显示红字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;changeTheme()&quot;</span>&gt;</span>切换主题<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">let</span> currentTheme = <span class=\"hljs-string\">&#x27;light&#x27;</span>;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getTheme</span> () &#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">if</span> (currentTheme === <span class=\"hljs-string\">&#x27;light&#x27;</span>) &#123;</span><br><span class=\"language-javascript\">        currentTheme = <span class=\"hljs-string\">&#x27;dark&#x27;</span>;</span><br><span class=\"language-javascript\">      &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"language-javascript\">        currentTheme = <span class=\"hljs-string\">&#x27;light&#x27;</span>;</span><br><span class=\"language-javascript\">      &#125;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">return</span> currentTheme;</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">    </span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeTheme</span> () &#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeMap</span> = &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-string\">&#x27;light&#x27;</span>: <span class=\"hljs-string\">&#x27;./css/multipleTheme/light.css&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-string\">&#x27;dark&#x27;</span>: <span class=\"hljs-string\">&#x27;./css/multipleTheme/dark.css&#x27;</span></span><br><span class=\"language-javascript\">      &#125;;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">const</span> themeLink = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#themeLink&#x27;</span>);</span><br><span class=\"language-javascript\">      themeLink.<span class=\"hljs-property\">href</span> = <span class=\"hljs-title class_\">ThemeMap</span>[<span class=\"hljs-title function_\">getTheme</span>()];</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>有时候需要保存用户使用的主题，可以通过如下方式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">利用路由标记<br>利用cookie标记<br>利用localstorage<br>保存到后端服务器<br></code></pre></td></tr></table></figure>\n\n<p>优化点：<br>利用CSS预处理生成多套主题样式</p>\n<h2 id=\"动态换肤\"><a href=\"#动态换肤\" class=\"headerlink\" title=\"动态换肤\"></a>动态换肤</h2><p>这是element ui中的换肤方案，支持浏览器热换肤。生成一套主题， 将主题配色配置写在js中，在浏览器中用js动态修改style标签覆盖原有的CSS。</p>\n<ol>\n<li>先把默认主题文件中涉及到颜色的 CSS 值替换成关键词</li>\n<li>根据用户选择的主题色生成一系列对应的颜色值</li>\n<li>把关键词再换回刚刚生成的相应的颜色值</li>\n<li>直接在页面上加 style 标签，把生成的样式填进去</li>\n</ol>\n<h3 id=\"先把默认主题文件中涉及到颜色的-CSS-值替换成关键词\"><a href=\"#先把默认主题文件中涉及到颜色的-CSS-值替换成关键词\" class=\"headerlink\" title=\"先把默认主题文件中涉及到颜色的 CSS 值替换成关键词\"></a>先把默认主题文件中涉及到颜色的 CSS 值替换成关键词</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L250-L274</span><br><span class=\"hljs-title function_\">getStyleTemplate</span>(<span class=\"hljs-params\">data</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> colorMap = &#123;<br>    <span class=\"hljs-string\">&#x27;#20a0ff&#x27;</span>: <span class=\"hljs-string\">&#x27;primary&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#0190fe&#x27;</span>: <span class=\"hljs-string\">&#x27;secondary&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#fbfdff&#x27;</span>: <span class=\"hljs-string\">&#x27;darkWhite&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#1f2d3d&#x27;</span>: <span class=\"hljs-string\">&#x27;baseBlack&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#324157&#x27;</span>: <span class=\"hljs-string\">&#x27;lightBlack&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#48576a&#x27;</span>: <span class=\"hljs-string\">&#x27;extraLightBlack&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#8391a5&#x27;</span>: <span class=\"hljs-string\">&#x27;baseSilver&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#97a8be&#x27;</span>: <span class=\"hljs-string\">&#x27;lightSilver&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#bfcbd9&#x27;</span>: <span class=\"hljs-string\">&#x27;extraLightSilver&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#d1dbe5&#x27;</span>: <span class=\"hljs-string\">&#x27;baseGray&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#e4e8f1&#x27;</span>: <span class=\"hljs-string\">&#x27;lightGray&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#eef1f6&#x27;</span>: <span class=\"hljs-string\">&#x27;extraLightGray&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#1d90e6&#x27;</span>: <span class=\"hljs-string\">&#x27;buttonActive&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#4db3ff&#x27;</span>: <span class=\"hljs-string\">&#x27;buttonHover&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#dfe6ec&#x27;</span>: <span class=\"hljs-string\">&#x27;tableBorder&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#d2ecff&#x27;</span>: <span class=\"hljs-string\">&#x27;datepickerInRange&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#afddff&#x27;</span>: <span class=\"hljs-string\">&#x27;datepickerInRangeHover&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#1c8de0&#x27;</span>: <span class=\"hljs-string\">&#x27;selectOptionSelected&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;#edf7ff&#x27;</span>: <span class=\"hljs-string\">&#x27;lightBackground&#x27;</span><br>  &#125;;<br>  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(colorMap).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> value = colorMap[key];<br>    data = data.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(key, <span class=\"hljs-string\">&#x27;ig&#x27;</span>), value);<br>  &#125;);<br>  <span class=\"hljs-keyword\">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"根据用户选择的主题色生成一系列对应的颜色值\"><a href=\"#根据用户选择的主题色生成一系列对应的颜色值\" class=\"headerlink\" title=\"根据用户选择的主题色生成一系列对应的颜色值\"></a>根据用户选择的主题色生成一系列对应的颜色值</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-comment\">// https://github.com/ElementUI/theme-preview/blob/master/src/utils/formula.json</span><br><span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;secondary&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary s(99%) l(*0.9))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;darkWhite&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(#fff blend(primary 2%))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;baseBlack&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary h(+6) s(33%) l(18%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;lightBlack&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack h(+5) s(27%) l(27%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;extraLightBlack&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack h(+2) s(19%) l(35%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;baseSilver&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack h(+3) s(16%) l(58%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;lightSilver&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack h(+3) s(23%) l(67%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;extraLightSilver&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack s(26%) l(80%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;baseGray&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack s(28%) l(86%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;lightGray&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack h(+10) s(33%) l(92%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;extraLightGray&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(baseBlack h(+6) s(33%) l(95%))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;buttonActive&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary shade(10%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;buttonHover&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary tint(20%))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;tableBorder&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(extraLightSilver h(-3) s(27%) l(90%))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;datepickerInRange&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary tint(80%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;datepickerInRangeHover&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary tint(64%))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;selectOptionSelected&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary shade(12%))&quot;</span><span class=\"hljs-punctuation\">,</span><br><br>  <span class=\"hljs-attr\">&quot;lightBackground&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary tint(92%))&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;emptyText&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;color(primary s(16%) l(44%))&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"把关键词再换回刚刚生成的相应的颜色值\"><a href=\"#把关键词再换回刚刚生成的相应的颜色值\" class=\"headerlink\" title=\"把关键词再换回刚刚生成的相应的颜色值\"></a>把关键词再换回刚刚生成的相应的颜色值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// https://github.com/ElementUI/theme-preview/blob/master/src/utils/color.js</span><br><span class=\"hljs-keyword\">import</span> color <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;css-color-function&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> formula <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./formula.json&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">generateColors</span> = primary =&gt; &#123;<br>  <span class=\"hljs-keyword\">let</span> colors = &#123;&#125;;<br>  <span class=\"hljs-keyword\">let</span> baseBlack = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  <span class=\"hljs-keyword\">let</span> extraLightBlack = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  <span class=\"hljs-keyword\">let</span> extraLightSilver = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br><br>  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(formula).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> value = formula[key]<br>      .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/primary/g</span>, primary)<br>      .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/baseBlack/g</span>, baseBlack)<br>      .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/extraLightBlack/g</span>, extraLightBlack)<br>      .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/extraLightSilver/g</span>, extraLightSilver);<br>    colors[key] = color.<span class=\"hljs-title function_\">convert</span>(value);<br>    <span class=\"hljs-keyword\">if</span> (key === <span class=\"hljs-string\">&#x27;baseBlack&#x27;</span>) &#123;<br>      baseBlack = colors[key];<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (key === <span class=\"hljs-string\">&#x27;extraLightBlack&#x27;</span>) &#123;<br>      extraLightBlack = colors[key];<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (key === <span class=\"hljs-string\">&#x27;extraLightSilver&#x27;</span>) &#123;<br>      extraLightSilver = colors[key];<br>    &#125;<br>  &#125;);<br>  <span class=\"hljs-keyword\">return</span> colors;<br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> generateColors;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"直接在页面上加-style-标签，把生成的样式填进去\"><a href=\"#直接在页面上加-style-标签，把生成的样式填进去\" class=\"headerlink\" title=\"直接在页面上加 style 标签，把生成的样式填进去\"></a>直接在页面上加 style 标签，把生成的样式填进去</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L198-L211</span><br><span class=\"hljs-title function_\">writeNewStyle</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> cssText = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">originalStyle</span>;<br>  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> &#123;<br>    cssText = cssText.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">&#x27;(:|\\\\s+)&#x27;</span> + key, <span class=\"hljs-string\">&#x27;g&#x27;</span>), <span class=\"hljs-string\">&#x27;$1&#x27;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span>[key]);<br>  &#125;);<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">originalStylesheetCount</span> === <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">styleSheets</span>.<span class=\"hljs-property\">length</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> style = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;style&#x27;</span>);<br>    style.<span class=\"hljs-property\">innerText</span> = cssText;<br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-title function_\">appendChild</span>(style);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">lastChild</span>.<span class=\"hljs-property\">innerText</span> = cssText;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"less在线编译实现\"><a href=\"#less在线编译实现\" class=\"headerlink\" title=\"less在线编译实现\"></a>less在线编译实现</h2><p>不推荐</p>\n<h2 id=\"CSS变量实现\"><a href=\"#CSS变量实现\" class=\"headerlink\" title=\"CSS变量实现\"></a>CSS变量实现</h2><p><a href=\"https://caniuse.com/?search=css%20variables\">CSS Variables (Custom Properties)</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* variable.css */</span><br><span class=\"hljs-comment\">/* 默认变量 */</span><br><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  <span class=\"hljs-attr\">--primary</span>: blue;<br>&#125;<br><br><span class=\"hljs-comment\">/* 亮色变量 */</span><br><span class=\"hljs-selector-attr\">[data-theme=<span class=\"hljs-string\">&quot;light&quot;</span>]</span> &#123;<br>  <span class=\"hljs-attr\">--primary</span>: green;<br>&#125;<br><br><span class=\"hljs-comment\">/* 深色变量 */</span><br><span class=\"hljs-selector-attr\">[data-theme=<span class=\"hljs-string\">&quot;dark&quot;</span>]</span> &#123;<br>  <span class=\"hljs-attr\">--primary</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span> <span class=\"hljs-attr\">data-theme</span>=<span class=\"hljs-string\">&quot;default&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  ...<br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Css Variable<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;themeLink&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;./css/cssVariable/variable.css&quot;</span> /&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-selector-tag\">p</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--primary);</span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>默认主题为蓝色，light主题显示绿字，dark主题显示红字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;changeTheme()&quot;</span>&gt;</span>切换主题<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">const</span> themeList = [<span class=\"hljs-string\">&#x27;default&#x27;</span>, <span class=\"hljs-string\">&#x27;light&#x27;</span>, <span class=\"hljs-string\">&#x27;dark&#x27;</span>];</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">let</span> currentThemeIndex = <span class=\"hljs-number\">0</span>;</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeTheme</span> () &#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">const</span> htmlNode = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;html&#x27;</span>);</span><br><span class=\"language-javascript\">      currentThemeIndex++;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">if</span> (currentThemeIndex &gt; themeList.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>) &#123;</span><br><span class=\"language-javascript\">        currentThemeIndex = <span class=\"hljs-number\">0</span>;</span><br><span class=\"language-javascript\">      &#125;</span><br><span class=\"language-javascript\">      htmlNode.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-theme&#x27;</span>, themeList[currentThemeIndex]);</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"css变量兼容方案\"><a href=\"#css变量兼容方案\" class=\"headerlink\" title=\"css变量兼容方案\"></a>css变量兼容方案</h3><p>首先需要建一个存放公共css变量的js文件，将需要定义的css变量存放到该js文件，例如（variable.js）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//浅色</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> lightTheme = &#123; <br>  <span class=\"hljs-string\">&#x27;--primary&#x27;</span>: <span class=\"hljs-string\">&#x27;green&#x27;</span><br>&#125;;<br><span class=\"hljs-comment\">// 深色</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> darkTheme = &#123; <br>  <span class=\"hljs-string\">&#x27;--primary&#x27;</span>: <span class=\"hljs-string\">&#x27;red&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>页面使用css变量，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;scss&quot;</span>&gt;</span><span class=\"language-css\"> </span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.text</span> &#123; </span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--primary);</span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>安装css-vars-ponyfill 插件</p>\n<p>「css-vars-ponyfill」 官方概念：在传统浏览器和现代浏览器中为CSS自定义属性(又名“CSS变量”)提供客户端支持的ponyfill。 （具体用法与概念请查阅官方网站：<a href=\"https://github.com/JofunLiang/vue-project-themable-demo\">css-vars-ponyfill</a>）</p>\n<p>封装切换主题的js，在main.js做初始化调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// theme.js</span><br><span class=\"hljs-keyword\">import</span> &#123; lightTheme, darkTheme &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../src/assets/js/variable&quot;</span>;<br><span class=\"hljs-keyword\">import</span> cssVars <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;css-vars-ponyfill&quot;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">initTheme</span> = (<span class=\"hljs-params\">theme</span>) =&gt; &#123;<br>  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&quot;data-theme&quot;</span>, theme ? <span class=\"hljs-string\">&quot;light&quot;</span> : <span class=\"hljs-string\">&quot;dark&quot;</span>); <br>  <span class=\"hljs-title function_\">cssVars</span>(&#123;<br>    <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 当添加，删除或修改其&lt;link&gt;或&lt;style&gt;元素的禁用或href属性时，ponyfill将自行调用    </span><br>    <span class=\"hljs-attr\">variables</span>: theme ? lightTheme : darkTheme, <span class=\"hljs-comment\">// variables 自定义属性名/值对的集合</span><br>    <span class=\"hljs-attr\">onlyLegacy</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// false  默认将css变量编译为浏览器识别的css样式  true 当浏览器不支持css变量的时候将css变量编译为识别的css</span><br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure>\n"},{"title":"【webpack】打包一个vue应用","index_img":"/img/webpack.webp","_content":"Tag: `学习` `webapck`\n\n打包一个vue应用最方便的还是使用官方提供的vue-cli应用，但是，从长远来说，这不利于我们自身的成长；\n所以让我们暂时忘却vue-cli，基于webpack，从头一点一点去整合出一个webpack打包配置来；\n\n##  目标\n\n- 打包一个vue应用，可本地运行调试，可打线上包\n\n##  前期准备\n\n### 学习资料\n\n[深入浅出webpack](http://webpack.wuhaolin.cn/)\n\n[webpack中文文档](https://webpack.docschina.org/concepts/)\n\n###  webpack核心概念\n\n- Entry：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。\n- Module：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。\n- Chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。\n- Loader：模块转换器，用于把模块原内容按照需求转换成新内容。\n- Plugin：扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。\n- Output：输出结果，在 Webpack 经过一系列处理并得出最终想要的代码后输出结果。\n\n### 运行环境\n\n[node-v16.9.1](https://nodejs.org/zh-cn/)\n[vue-cli(用于生成一个vue基本工程)](https://cli.vuejs.org/zh/guide/installation.html)\n\n依赖版本相关\n\"webpack\": \"^5.64.1\",\n\"webpack-cli\": \"^4.9.1\",\n\n### 技术选型\n\n- 开发语言 ( JS (ES5/ES6+) or TS )\n\n  使用ES6，借助Babel\n\n- css预处理器 ( Less (.less) | Sass (.scss/.sass) | Stylus(.stylus/.styl) | Postcss )\n\n  使用Less\n\n### 一个空vue工程\n\n```js\n// 验证cli是否安装成功\nvue -V // 3.5.1\n\n// Mac/linux系统\nvue create webpack-practice\n// Windows系统\nwinpty vue.cmd create webpack-practice\n\n// 选择default(babel, eslint)\ncd webpack-practice\nnpm run serve\n\n/**\n *  DONE  Compiled successfully in 3542ms \n * \n * App running at:\n  - Local:   http://localhost:8080/ \n  - Network: http://x.x.x.x:8080/\n  Note that the development build is not optimized.\n  To create a production build, run npm run build.\n * /\n// 出现以上字样表示空工程已就绪\n```\n\n一切准备就绪，下面开始进入正题\n\n##  基础依赖及配置\n\n```js\nnpm i webpack webpack-cli -D\n```\n\n```js\n// package.json - add npm script\n\"scripts\": {\n  \"start\": \"webpack\",\n  \"serve:webpack\": \"webpack serve\",\n  \"build:webpack\": \"webpack --mode production\"\n},\n```\n\n```js\n// 根目录 - ./webpack.config.js\n/**\n * webapck配置总入口\n * 将配置分成三份，common/dev/prod\n */\nconst merge = require('webpack-merge');\nconst commonConfig = require('./build/webpack-common.config.js');\nconst developmentConfig = require('./build/webpack-dev.config.js');\nconst productionConfig = require('./build/webpack-prod.config.js');\n\nmodule.exports = (env, args) => {\n  if (args.mode === 'production') {\n    return merge(commonConfig, productionConfig);\n  } else {\n    return merge(commonConfig, developmentConfig);\n  }\n};\n```\n\n```js\n// build目录 - ./build/webpack-common.config.js\n/**\n * webapck配置文档\n * docs: https://webpack.docschina.org/concepts/\n */\nconst path = require('path');\n\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nmodule.exports = {\n  /**\n   * 入口(entry)\n   * 入口起点(entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。\n   * 默认值是 ./src/index.js\n   */\n  entry: './src/main.js',\n  /**\n   * 输出(output)\n   * output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。\n   */\n   output: {\n    path: resolve('/dist'), // 需要绝对路径\n    filename: '[name].js',\n    publicPath: '/'\n  },\n}\n```\n\n```js\n// build目录 - ./build/webpack-dev.config.js\n/**\n * 开发环境webpack配置\n */\nmodule.exports = {\n  mode: 'development',\n}\n```\n\n```js\n// build目录 - ./build/webpack-prod.config.js\n/**\n * 生产环境webpack配置\n */\nmodule.exports = {\n  mode: 'production',\n}\n```\n\n至此webpack相关基本配置已完成\n\n开始执行打包命令：\n\n```js\nnpm run start\n/**\n * \n * ERROR in ./src/App.vue 1:0\nModule parse failed: Unexpected token (1:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> <template>\n|   <div id=\"app\">\n|     <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n @ ./src/main.js 2:0-27 7:17-20\n *\n * /\n```\n\n报错了，大概意思是.vue文件它不能识别，需要借助相关loader处理\n\n##  loader配置\n\n### vue-loader\n\n[vue-loader](https://vue-loader.vuejs.org/zh/)\n\n```js\n// vue-loader因为已经通过cli安装了，所以不需要再安装了\n\n// ./build/webpack-common.config.js - 更新配置\nconst { VueLoaderPlugin } = require('vue-loader')\n\nmodule.exports = {\n  module: {\n    rules: [\n      // ... 其它规则\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader'\n      }\n    ]\n  },\n  plugins: [\n    // 请确保引入这个插件！\n    new VueLoaderPlugin()\n  ]\n}\n\n// 再次执行打包命令\nnpm run start\n/**\n * \n * ERROR in ./src/App.vue?vue&type=style&index=0&lang=css& (./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=css&) 20:0\nModule parse failed: Unexpected character '#' (20:0)\nFile was processed with these loaders:\n * ./node_modules/vue-loader/lib/index.js\nYou may need an additional loader to handle the result of these loaders.\n| \n| \n> #app {\n*/\n```\n\n又报错了，这次是识别不了图片和css样式，得，继续配置loader\n\n###  css-loader / url-loader\n\n```js\n// css-loader因为已经通过cli安装了，所以不需要再安装了\n\n// ./build/webpack-common.config.js - 更新配置\nmodule.exports = {\n  module: {\n    rules: [\n      // 其他loader\n      {\n        test: /\\.css$/,\n        use: ['vue-style-loader', 'css-loader']\n      },\n      {\n        test: /\\.png$/,\n        loader: 'url-loader',\n      }\n    ]\n  },\n}\n\n// 再次执行打包命令\nnpm run start\n\n// nice 打包成功\n```\n\n####  说明\n\n- css-loader 会找出 CSS 代码中的 @import 和 url() 这样的导入语句，告诉 Webpack 依赖这些资源。同时还支持 CSS Modules、压缩 CSS 等功能。处理完后再把结果交给 style-loader 去处理。\n\n- style-loader 会把 CSS 代码转换成字符串后，注入到 JavaScript 代码中去，通过 JavaScript 去给 DOM 增加样式。\n\n这里使用的vue-style-loader是fork了style-loader的源代码，对vue文件做了一些定制化处理。\n\n##  总结\n\n- 熟悉并实践了一下webpack的基本配置\n- 使用vue-loader加载.vue单文件\n- 使用css-loader/vue-style-loader加载.css文件\n- 使用url-loader加载图片资源文件\n\n其他未解决问题（后续再更新）：\n\n- css预处理文件处理 ，比如less (less-loader)\n- ES6转ES5语法 (babel-loader)\n- 本地运行一个服务并支持热更新 (wepack-dev-server)\n- 字体等文件的加载 (url-loader)\n- 视频等文件的加载 (url-loader)\n- 其他实用的功能（比如vue支持jsx的写法）\n- 线上打包的优化等等\n","source":"_posts/webpack-package.md","raw":"---\ntitle: 【webpack】打包一个vue应用\nindex_img: /img/webpack.webp\n---\nTag: `学习` `webapck`\n\n打包一个vue应用最方便的还是使用官方提供的vue-cli应用，但是，从长远来说，这不利于我们自身的成长；\n所以让我们暂时忘却vue-cli，基于webpack，从头一点一点去整合出一个webpack打包配置来；\n\n##  目标\n\n- 打包一个vue应用，可本地运行调试，可打线上包\n\n##  前期准备\n\n### 学习资料\n\n[深入浅出webpack](http://webpack.wuhaolin.cn/)\n\n[webpack中文文档](https://webpack.docschina.org/concepts/)\n\n###  webpack核心概念\n\n- Entry：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。\n- Module：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。\n- Chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。\n- Loader：模块转换器，用于把模块原内容按照需求转换成新内容。\n- Plugin：扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。\n- Output：输出结果，在 Webpack 经过一系列处理并得出最终想要的代码后输出结果。\n\n### 运行环境\n\n[node-v16.9.1](https://nodejs.org/zh-cn/)\n[vue-cli(用于生成一个vue基本工程)](https://cli.vuejs.org/zh/guide/installation.html)\n\n依赖版本相关\n\"webpack\": \"^5.64.1\",\n\"webpack-cli\": \"^4.9.1\",\n\n### 技术选型\n\n- 开发语言 ( JS (ES5/ES6+) or TS )\n\n  使用ES6，借助Babel\n\n- css预处理器 ( Less (.less) | Sass (.scss/.sass) | Stylus(.stylus/.styl) | Postcss )\n\n  使用Less\n\n### 一个空vue工程\n\n```js\n// 验证cli是否安装成功\nvue -V // 3.5.1\n\n// Mac/linux系统\nvue create webpack-practice\n// Windows系统\nwinpty vue.cmd create webpack-practice\n\n// 选择default(babel, eslint)\ncd webpack-practice\nnpm run serve\n\n/**\n *  DONE  Compiled successfully in 3542ms \n * \n * App running at:\n  - Local:   http://localhost:8080/ \n  - Network: http://x.x.x.x:8080/\n  Note that the development build is not optimized.\n  To create a production build, run npm run build.\n * /\n// 出现以上字样表示空工程已就绪\n```\n\n一切准备就绪，下面开始进入正题\n\n##  基础依赖及配置\n\n```js\nnpm i webpack webpack-cli -D\n```\n\n```js\n// package.json - add npm script\n\"scripts\": {\n  \"start\": \"webpack\",\n  \"serve:webpack\": \"webpack serve\",\n  \"build:webpack\": \"webpack --mode production\"\n},\n```\n\n```js\n// 根目录 - ./webpack.config.js\n/**\n * webapck配置总入口\n * 将配置分成三份，common/dev/prod\n */\nconst merge = require('webpack-merge');\nconst commonConfig = require('./build/webpack-common.config.js');\nconst developmentConfig = require('./build/webpack-dev.config.js');\nconst productionConfig = require('./build/webpack-prod.config.js');\n\nmodule.exports = (env, args) => {\n  if (args.mode === 'production') {\n    return merge(commonConfig, productionConfig);\n  } else {\n    return merge(commonConfig, developmentConfig);\n  }\n};\n```\n\n```js\n// build目录 - ./build/webpack-common.config.js\n/**\n * webapck配置文档\n * docs: https://webpack.docschina.org/concepts/\n */\nconst path = require('path');\n\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nmodule.exports = {\n  /**\n   * 入口(entry)\n   * 入口起点(entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。\n   * 默认值是 ./src/index.js\n   */\n  entry: './src/main.js',\n  /**\n   * 输出(output)\n   * output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。\n   */\n   output: {\n    path: resolve('/dist'), // 需要绝对路径\n    filename: '[name].js',\n    publicPath: '/'\n  },\n}\n```\n\n```js\n// build目录 - ./build/webpack-dev.config.js\n/**\n * 开发环境webpack配置\n */\nmodule.exports = {\n  mode: 'development',\n}\n```\n\n```js\n// build目录 - ./build/webpack-prod.config.js\n/**\n * 生产环境webpack配置\n */\nmodule.exports = {\n  mode: 'production',\n}\n```\n\n至此webpack相关基本配置已完成\n\n开始执行打包命令：\n\n```js\nnpm run start\n/**\n * \n * ERROR in ./src/App.vue 1:0\nModule parse failed: Unexpected token (1:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> <template>\n|   <div id=\"app\">\n|     <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n @ ./src/main.js 2:0-27 7:17-20\n *\n * /\n```\n\n报错了，大概意思是.vue文件它不能识别，需要借助相关loader处理\n\n##  loader配置\n\n### vue-loader\n\n[vue-loader](https://vue-loader.vuejs.org/zh/)\n\n```js\n// vue-loader因为已经通过cli安装了，所以不需要再安装了\n\n// ./build/webpack-common.config.js - 更新配置\nconst { VueLoaderPlugin } = require('vue-loader')\n\nmodule.exports = {\n  module: {\n    rules: [\n      // ... 其它规则\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader'\n      }\n    ]\n  },\n  plugins: [\n    // 请确保引入这个插件！\n    new VueLoaderPlugin()\n  ]\n}\n\n// 再次执行打包命令\nnpm run start\n/**\n * \n * ERROR in ./src/App.vue?vue&type=style&index=0&lang=css& (./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=css&) 20:0\nModule parse failed: Unexpected character '#' (20:0)\nFile was processed with these loaders:\n * ./node_modules/vue-loader/lib/index.js\nYou may need an additional loader to handle the result of these loaders.\n| \n| \n> #app {\n*/\n```\n\n又报错了，这次是识别不了图片和css样式，得，继续配置loader\n\n###  css-loader / url-loader\n\n```js\n// css-loader因为已经通过cli安装了，所以不需要再安装了\n\n// ./build/webpack-common.config.js - 更新配置\nmodule.exports = {\n  module: {\n    rules: [\n      // 其他loader\n      {\n        test: /\\.css$/,\n        use: ['vue-style-loader', 'css-loader']\n      },\n      {\n        test: /\\.png$/,\n        loader: 'url-loader',\n      }\n    ]\n  },\n}\n\n// 再次执行打包命令\nnpm run start\n\n// nice 打包成功\n```\n\n####  说明\n\n- css-loader 会找出 CSS 代码中的 @import 和 url() 这样的导入语句，告诉 Webpack 依赖这些资源。同时还支持 CSS Modules、压缩 CSS 等功能。处理完后再把结果交给 style-loader 去处理。\n\n- style-loader 会把 CSS 代码转换成字符串后，注入到 JavaScript 代码中去，通过 JavaScript 去给 DOM 增加样式。\n\n这里使用的vue-style-loader是fork了style-loader的源代码，对vue文件做了一些定制化处理。\n\n##  总结\n\n- 熟悉并实践了一下webpack的基本配置\n- 使用vue-loader加载.vue单文件\n- 使用css-loader/vue-style-loader加载.css文件\n- 使用url-loader加载图片资源文件\n\n其他未解决问题（后续再更新）：\n\n- css预处理文件处理 ，比如less (less-loader)\n- ES6转ES5语法 (babel-loader)\n- 本地运行一个服务并支持热更新 (wepack-dev-server)\n- 字体等文件的加载 (url-loader)\n- 视频等文件的加载 (url-loader)\n- 其他实用的功能（比如vue支持jsx的写法）\n- 线上打包的优化等等\n","slug":"webpack-package","published":1,"date":"2022-09-22T03:27:44.988Z","updated":"2022-09-28T07:30:08.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lby4oa0006p0w18v6x4zc2","content":"<p>Tag: <code>学习</code> <code>webapck</code></p>\n<p>打包一个vue应用最方便的还是使用官方提供的vue-cli应用，但是，从长远来说，这不利于我们自身的成长；<br>所以让我们暂时忘却vue-cli，基于webpack，从头一点一点去整合出一个webpack打包配置来；</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>打包一个vue应用，可本地运行调试，可打线上包</li>\n</ul>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h3><p><a href=\"http://webpack.wuhaolin.cn/\">深入浅出webpack</a></p>\n<p><a href=\"https://webpack.docschina.org/concepts/\">webpack中文文档</a></p>\n<h3 id=\"webpack核心概念\"><a href=\"#webpack核心概念\" class=\"headerlink\" title=\"webpack核心概念\"></a>webpack核心概念</h3><ul>\n<li>Entry：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。</li>\n<li>Module：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。</li>\n<li>Chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。</li>\n<li>Loader：模块转换器，用于把模块原内容按照需求转换成新内容。</li>\n<li>Plugin：扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</li>\n<li>Output：输出结果，在 Webpack 经过一系列处理并得出最终想要的代码后输出结果。</li>\n</ul>\n<h3 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h3><p><a href=\"https://nodejs.org/zh-cn/\">node-v16.9.1</a><br><a href=\"https://cli.vuejs.org/zh/guide/installation.html\">vue-cli(用于生成一个vue基本工程)</a></p>\n<p>依赖版本相关<br>“webpack”: “^5.64.1”,<br>“webpack-cli”: “^4.9.1”,</p>\n<h3 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h3><ul>\n<li><p>开发语言 ( JS (ES5/ES6+) or TS )</p>\n<p>使用ES6，借助Babel</p>\n</li>\n<li><p>css预处理器 ( Less (.less) | Sass (.scss/.sass) | Stylus(.stylus/.styl) | Postcss )</p>\n<p>使用Less</p>\n</li>\n</ul>\n<h3 id=\"一个空vue工程\"><a href=\"#一个空vue工程\" class=\"headerlink\" title=\"一个空vue工程\"></a>一个空vue工程</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 验证cli是否安装成功</span><br>vue -V <span class=\"hljs-comment\">// 3.5.1</span><br><br><span class=\"hljs-comment\">// Mac/linux系统</span><br>vue create webpack-practice<br><span class=\"hljs-comment\">// Windows系统</span><br>winpty vue.<span class=\"hljs-property\">cmd</span> create webpack-practice<br><br><span class=\"hljs-comment\">// 选择default(babel, eslint)</span><br>cd webpack-practice<br>npm run serve<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> *  DONE  Compiled successfully in 3542ms </span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * App running at:</span><br><span class=\"hljs-comment\">  - Local:   http://localhost:8080/ </span><br><span class=\"hljs-comment\">  - Network: http://x.x.x.x:8080/</span><br><span class=\"hljs-comment\">  Note that the development build is not optimized.</span><br><span class=\"hljs-comment\">  To create a production build, run npm run build.</span><br><span class=\"hljs-comment\"> * /</span><br><span class=\"hljs-comment\">// 出现以上字样表示空工程已就绪</span><br></code></pre></td></tr></table></figure>\n\n<p>一切准备就绪，下面开始进入正题</p>\n<h2 id=\"基础依赖及配置\"><a href=\"#基础依赖及配置\" class=\"headerlink\" title=\"基础依赖及配置\"></a>基础依赖及配置</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">npm i webpack webpack-cli -D<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// package.json - add npm script</span><br><span class=\"hljs-string\">&quot;scripts&quot;</span>: &#123;<br>  <span class=\"hljs-string\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;webpack&quot;</span>,<br>  <span class=\"hljs-string\">&quot;serve:webpack&quot;</span>: <span class=\"hljs-string\">&quot;webpack serve&quot;</span>,<br>  <span class=\"hljs-string\">&quot;build:webpack&quot;</span>: <span class=\"hljs-string\">&quot;webpack --mode production&quot;</span><br>&#125;,<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 根目录 - ./webpack.config.js</span><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * webapck配置总入口</span><br><span class=\"hljs-comment\"> * 将配置分成三份，common/dev/prod</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;webpack-merge&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> commonConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./build/webpack-common.config.js&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> developmentConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./build/webpack-dev.config.js&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> productionConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./build/webpack-prod.config.js&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">env, args</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> (args.<span class=\"hljs-property\">mode</span> === <span class=\"hljs-string\">&#x27;production&#x27;</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">merge</span>(commonConfig, productionConfig);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">merge</span>(commonConfig, developmentConfig);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// build目录 - ./build/webpack-common.config.js</span><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * webapck配置文档</span><br><span class=\"hljs-comment\"> * docs: https://webpack.docschina.org/concepts/</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">resolve</span> (dir) &#123;<br>  <span class=\"hljs-keyword\">return</span> path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">&#x27;..&#x27;</span>, dir)<br>&#125;<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 入口(entry)</span><br><span class=\"hljs-comment\">   * 入口起点(entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</span><br><span class=\"hljs-comment\">   * 默认值是 ./src/index.js</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&#x27;./src/main.js&#x27;</span>,<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 输出(output)</span><br><span class=\"hljs-comment\">   * output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。</span><br><span class=\"hljs-comment\">   */</span><br>   <span class=\"hljs-attr\">output</span>: &#123;<br>    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&#x27;/dist&#x27;</span>), <span class=\"hljs-comment\">// 需要绝对路径</span><br>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,<br>    <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// build目录 - ./build/webpack-dev.config.js</span><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 开发环境webpack配置</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;development&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// build目录 - ./build/webpack-prod.config.js</span><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 生产环境webpack配置</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;production&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>至此webpack相关基本配置已完成</p>\n<p>开始执行打包命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">npm run start<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * ERROR in ./src/App.vue 1:0</span><br><span class=\"hljs-comment\">Module parse failed: Unexpected token (1:0)</span><br><span class=\"hljs-comment\">You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders</span><br><span class=\"hljs-comment\">&gt; &lt;template&gt;</span><br><span class=\"hljs-comment\">|   &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"hljs-comment\">|     &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class=\"hljs-comment\"> @ ./src/main.js 2:0-27 7:17-20</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * /</span><br></code></pre></td></tr></table></figure>\n\n<p>报错了，大概意思是.vue文件它不能识别，需要借助相关loader处理</p>\n<h2 id=\"loader配置\"><a href=\"#loader配置\" class=\"headerlink\" title=\"loader配置\"></a>loader配置</h2><h3 id=\"vue-loader\"><a href=\"#vue-loader\" class=\"headerlink\" title=\"vue-loader\"></a>vue-loader</h3><p><a href=\"https://vue-loader.vuejs.org/zh/\">vue-loader</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// vue-loader因为已经通过cli安装了，所以不需要再安装了</span><br><br><span class=\"hljs-comment\">// ./build/webpack-common.config.js - 更新配置</span><br><span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-title class_\">VueLoaderPlugin</span> &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;vue-loader&#x27;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      <span class=\"hljs-comment\">// ... 其它规则</span><br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.vue$/</span>,<br>        <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;vue-loader&#x27;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-comment\">// 请确保引入这个插件！</span><br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VueLoaderPlugin</span>()<br>  ]<br>&#125;<br><br><span class=\"hljs-comment\">// 再次执行打包命令</span><br>npm run start<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * ERROR in ./src/App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp; (./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp;) 20:0</span><br><span class=\"hljs-comment\">Module parse failed: Unexpected character &#x27;#&#x27; (20:0)</span><br><span class=\"hljs-comment\">File was processed with these loaders:</span><br><span class=\"hljs-comment\"> * ./node_modules/vue-loader/lib/index.js</span><br><span class=\"hljs-comment\">You may need an additional loader to handle the result of these loaders.</span><br><span class=\"hljs-comment\">| </span><br><span class=\"hljs-comment\">| </span><br><span class=\"hljs-comment\">&gt; #app &#123;</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<p>又报错了，这次是识别不了图片和css样式，得，继续配置loader</p>\n<h3 id=\"css-loader-url-loader\"><a href=\"#css-loader-url-loader\" class=\"headerlink\" title=\"css-loader / url-loader\"></a>css-loader / url-loader</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// css-loader因为已经通过cli安装了，所以不需要再安装了</span><br><br><span class=\"hljs-comment\">// ./build/webpack-common.config.js - 更新配置</span><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      <span class=\"hljs-comment\">// 其他loader</span><br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">&#x27;vue-style-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>]<br>      &#125;,<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.png$/</span>,<br>        <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;url-loader&#x27;</span>,<br>      &#125;<br>    ]<br>  &#125;,<br>&#125;<br><br><span class=\"hljs-comment\">// 再次执行打包命令</span><br>npm run start<br><br><span class=\"hljs-comment\">// nice 打包成功</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ul>\n<li><p>css-loader 会找出 CSS 代码中的 @import 和 url() 这样的导入语句，告诉 Webpack 依赖这些资源。同时还支持 CSS Modules、压缩 CSS 等功能。处理完后再把结果交给 style-loader 去处理。</p>\n</li>\n<li><p>style-loader 会把 CSS 代码转换成字符串后，注入到 JavaScript 代码中去，通过 JavaScript 去给 DOM 增加样式。</p>\n</li>\n</ul>\n<p>这里使用的vue-style-loader是fork了style-loader的源代码，对vue文件做了一些定制化处理。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>熟悉并实践了一下webpack的基本配置</li>\n<li>使用vue-loader加载.vue单文件</li>\n<li>使用css-loader/vue-style-loader加载.css文件</li>\n<li>使用url-loader加载图片资源文件</li>\n</ul>\n<p>其他未解决问题（后续再更新）：</p>\n<ul>\n<li>css预处理文件处理 ，比如less (less-loader)</li>\n<li>ES6转ES5语法 (babel-loader)</li>\n<li>本地运行一个服务并支持热更新 (wepack-dev-server)</li>\n<li>字体等文件的加载 (url-loader)</li>\n<li>视频等文件的加载 (url-loader)</li>\n<li>其他实用的功能（比如vue支持jsx的写法）</li>\n<li>线上打包的优化等等</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Tag: <code>学习</code> <code>webapck</code></p>\n<p>打包一个vue应用最方便的还是使用官方提供的vue-cli应用，但是，从长远来说，这不利于我们自身的成长；<br>所以让我们暂时忘却vue-cli，基于webpack，从头一点一点去整合出一个webpack打包配置来；</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>打包一个vue应用，可本地运行调试，可打线上包</li>\n</ul>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h3><p><a href=\"http://webpack.wuhaolin.cn/\">深入浅出webpack</a></p>\n<p><a href=\"https://webpack.docschina.org/concepts/\">webpack中文文档</a></p>\n<h3 id=\"webpack核心概念\"><a href=\"#webpack核心概念\" class=\"headerlink\" title=\"webpack核心概念\"></a>webpack核心概念</h3><ul>\n<li>Entry：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。</li>\n<li>Module：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。</li>\n<li>Chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。</li>\n<li>Loader：模块转换器，用于把模块原内容按照需求转换成新内容。</li>\n<li>Plugin：扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</li>\n<li>Output：输出结果，在 Webpack 经过一系列处理并得出最终想要的代码后输出结果。</li>\n</ul>\n<h3 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h3><p><a href=\"https://nodejs.org/zh-cn/\">node-v16.9.1</a><br><a href=\"https://cli.vuejs.org/zh/guide/installation.html\">vue-cli(用于生成一个vue基本工程)</a></p>\n<p>依赖版本相关<br>“webpack”: “^5.64.1”,<br>“webpack-cli”: “^4.9.1”,</p>\n<h3 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h3><ul>\n<li><p>开发语言 ( JS (ES5/ES6+) or TS )</p>\n<p>使用ES6，借助Babel</p>\n</li>\n<li><p>css预处理器 ( Less (.less) | Sass (.scss/.sass) | Stylus(.stylus/.styl) | Postcss )</p>\n<p>使用Less</p>\n</li>\n</ul>\n<h3 id=\"一个空vue工程\"><a href=\"#一个空vue工程\" class=\"headerlink\" title=\"一个空vue工程\"></a>一个空vue工程</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 验证cli是否安装成功</span><br>vue -V <span class=\"hljs-comment\">// 3.5.1</span><br><br><span class=\"hljs-comment\">// Mac/linux系统</span><br>vue create webpack-practice<br><span class=\"hljs-comment\">// Windows系统</span><br>winpty vue.<span class=\"hljs-property\">cmd</span> create webpack-practice<br><br><span class=\"hljs-comment\">// 选择default(babel, eslint)</span><br>cd webpack-practice<br>npm run serve<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> *  DONE  Compiled successfully in 3542ms </span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * App running at:</span><br><span class=\"hljs-comment\">  - Local:   http://localhost:8080/ </span><br><span class=\"hljs-comment\">  - Network: http://x.x.x.x:8080/</span><br><span class=\"hljs-comment\">  Note that the development build is not optimized.</span><br><span class=\"hljs-comment\">  To create a production build, run npm run build.</span><br><span class=\"hljs-comment\"> * /</span><br><span class=\"hljs-comment\">// 出现以上字样表示空工程已就绪</span><br></code></pre></td></tr></table></figure>\n\n<p>一切准备就绪，下面开始进入正题</p>\n<h2 id=\"基础依赖及配置\"><a href=\"#基础依赖及配置\" class=\"headerlink\" title=\"基础依赖及配置\"></a>基础依赖及配置</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">npm i webpack webpack-cli -D<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// package.json - add npm script</span><br><span class=\"hljs-string\">&quot;scripts&quot;</span>: &#123;<br>  <span class=\"hljs-string\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;webpack&quot;</span>,<br>  <span class=\"hljs-string\">&quot;serve:webpack&quot;</span>: <span class=\"hljs-string\">&quot;webpack serve&quot;</span>,<br>  <span class=\"hljs-string\">&quot;build:webpack&quot;</span>: <span class=\"hljs-string\">&quot;webpack --mode production&quot;</span><br>&#125;,<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 根目录 - ./webpack.config.js</span><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * webapck配置总入口</span><br><span class=\"hljs-comment\"> * 将配置分成三份，common/dev/prod</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;webpack-merge&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> commonConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./build/webpack-common.config.js&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> developmentConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./build/webpack-dev.config.js&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> productionConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./build/webpack-prod.config.js&#x27;</span>);<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">env, args</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> (args.<span class=\"hljs-property\">mode</span> === <span class=\"hljs-string\">&#x27;production&#x27;</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">merge</span>(commonConfig, productionConfig);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">merge</span>(commonConfig, developmentConfig);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// build目录 - ./build/webpack-common.config.js</span><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * webapck配置文档</span><br><span class=\"hljs-comment\"> * docs: https://webpack.docschina.org/concepts/</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">resolve</span> (dir) &#123;<br>  <span class=\"hljs-keyword\">return</span> path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">&#x27;..&#x27;</span>, dir)<br>&#125;<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 入口(entry)</span><br><span class=\"hljs-comment\">   * 入口起点(entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</span><br><span class=\"hljs-comment\">   * 默认值是 ./src/index.js</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&#x27;./src/main.js&#x27;</span>,<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 输出(output)</span><br><span class=\"hljs-comment\">   * output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。</span><br><span class=\"hljs-comment\">   */</span><br>   <span class=\"hljs-attr\">output</span>: &#123;<br>    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&#x27;/dist&#x27;</span>), <span class=\"hljs-comment\">// 需要绝对路径</span><br>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,<br>    <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// build目录 - ./build/webpack-dev.config.js</span><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 开发环境webpack配置</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;development&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// build目录 - ./build/webpack-prod.config.js</span><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 生产环境webpack配置</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;production&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>至此webpack相关基本配置已完成</p>\n<p>开始执行打包命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">npm run start<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * ERROR in ./src/App.vue 1:0</span><br><span class=\"hljs-comment\">Module parse failed: Unexpected token (1:0)</span><br><span class=\"hljs-comment\">You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders</span><br><span class=\"hljs-comment\">&gt; &lt;template&gt;</span><br><span class=\"hljs-comment\">|   &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"hljs-comment\">|     &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class=\"hljs-comment\"> @ ./src/main.js 2:0-27 7:17-20</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * /</span><br></code></pre></td></tr></table></figure>\n\n<p>报错了，大概意思是.vue文件它不能识别，需要借助相关loader处理</p>\n<h2 id=\"loader配置\"><a href=\"#loader配置\" class=\"headerlink\" title=\"loader配置\"></a>loader配置</h2><h3 id=\"vue-loader\"><a href=\"#vue-loader\" class=\"headerlink\" title=\"vue-loader\"></a>vue-loader</h3><p><a href=\"https://vue-loader.vuejs.org/zh/\">vue-loader</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// vue-loader因为已经通过cli安装了，所以不需要再安装了</span><br><br><span class=\"hljs-comment\">// ./build/webpack-common.config.js - 更新配置</span><br><span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-title class_\">VueLoaderPlugin</span> &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;vue-loader&#x27;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      <span class=\"hljs-comment\">// ... 其它规则</span><br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.vue$/</span>,<br>        <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;vue-loader&#x27;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-comment\">// 请确保引入这个插件！</span><br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VueLoaderPlugin</span>()<br>  ]<br>&#125;<br><br><span class=\"hljs-comment\">// 再次执行打包命令</span><br>npm run start<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * ERROR in ./src/App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp; (./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp;) 20:0</span><br><span class=\"hljs-comment\">Module parse failed: Unexpected character &#x27;#&#x27; (20:0)</span><br><span class=\"hljs-comment\">File was processed with these loaders:</span><br><span class=\"hljs-comment\"> * ./node_modules/vue-loader/lib/index.js</span><br><span class=\"hljs-comment\">You may need an additional loader to handle the result of these loaders.</span><br><span class=\"hljs-comment\">| </span><br><span class=\"hljs-comment\">| </span><br><span class=\"hljs-comment\">&gt; #app &#123;</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<p>又报错了，这次是识别不了图片和css样式，得，继续配置loader</p>\n<h3 id=\"css-loader-url-loader\"><a href=\"#css-loader-url-loader\" class=\"headerlink\" title=\"css-loader / url-loader\"></a>css-loader / url-loader</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// css-loader因为已经通过cli安装了，所以不需要再安装了</span><br><br><span class=\"hljs-comment\">// ./build/webpack-common.config.js - 更新配置</span><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      <span class=\"hljs-comment\">// 其他loader</span><br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">&#x27;vue-style-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>]<br>      &#125;,<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.png$/</span>,<br>        <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;url-loader&#x27;</span>,<br>      &#125;<br>    ]<br>  &#125;,<br>&#125;<br><br><span class=\"hljs-comment\">// 再次执行打包命令</span><br>npm run start<br><br><span class=\"hljs-comment\">// nice 打包成功</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ul>\n<li><p>css-loader 会找出 CSS 代码中的 @import 和 url() 这样的导入语句，告诉 Webpack 依赖这些资源。同时还支持 CSS Modules、压缩 CSS 等功能。处理完后再把结果交给 style-loader 去处理。</p>\n</li>\n<li><p>style-loader 会把 CSS 代码转换成字符串后，注入到 JavaScript 代码中去，通过 JavaScript 去给 DOM 增加样式。</p>\n</li>\n</ul>\n<p>这里使用的vue-style-loader是fork了style-loader的源代码，对vue文件做了一些定制化处理。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>熟悉并实践了一下webpack的基本配置</li>\n<li>使用vue-loader加载.vue单文件</li>\n<li>使用css-loader/vue-style-loader加载.css文件</li>\n<li>使用url-loader加载图片资源文件</li>\n</ul>\n<p>其他未解决问题（后续再更新）：</p>\n<ul>\n<li>css预处理文件处理 ，比如less (less-loader)</li>\n<li>ES6转ES5语法 (babel-loader)</li>\n<li>本地运行一个服务并支持热更新 (wepack-dev-server)</li>\n<li>字体等文件的加载 (url-loader)</li>\n<li>视频等文件的加载 (url-loader)</li>\n<li>其他实用的功能（比如vue支持jsx的写法）</li>\n<li>线上打包的优化等等</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}